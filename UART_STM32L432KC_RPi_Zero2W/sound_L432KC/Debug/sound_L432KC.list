
sound_L432KC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f4c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800a0e0  0800a0e0  0000b0e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a714  0800a714  0000c1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a714  0800a714  0000b714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a71c  0800a71c  0000c1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a71c  0800a71c  0000b71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a720  0800a720  0000b720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800a724  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  200001e0  0800a904  0000c1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  0800a904  0000c750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9ef  00000000  00000000  0000c210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248d  00000000  00000000  0001abff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0001d090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093b  00000000  00000000  0001dcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000219e1  00000000  00000000  0001e5eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eff3  00000000  00000000  0003ffcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c72f4  00000000  00000000  0004efbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001162b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e8  00000000  00000000  001162f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0011a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a0c4 	.word	0x0800a0c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800a0c4 	.word	0x0800a0c4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800100a:	f001 f906 	bl	800221a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800100e:	f000 fb25 	bl	800165c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001012:	f000 fc35 	bl	8001880 <MX_GPIO_Init>
	MX_DMA_Init();
 8001016:	f000 fc0d 	bl	8001834 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800101a:	f000 fbdb 	bl	80017d4 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800101e:	f000 fba9 	bl	8001774 <MX_USART1_UART_Init>
	MX_RTC_Init();
 8001022:	f000 fb7f 	bl	8001724 <MX_RTC_Init>
		/* USER CODE BEGIN 3 */

#ifdef RECEPTION_ON

		// always be receiving from modem
		HAL_UART_Receive_DMA(&HAIFA_UART, buffer, sizeof(buffer));
 8001026:	22f0      	movs	r2, #240	@ 0xf0
 8001028:	4991      	ldr	r1, [pc, #580]	@ (8001270 <main+0x26c>)
 800102a:	4892      	ldr	r0, [pc, #584]	@ (8001274 <main+0x270>)
 800102c:	f003 fb5e 	bl	80046ec <HAL_UART_Receive_DMA>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop

		// read and bin messages split into
		do
		{
			__disable_irq();
			dma_tail = HAIFA_DMA_BUFFER_SIZE - HAIFA_UART.hdmarx->Instance->CNDTR;
 8001034:	4b8f      	ldr	r3, [pc, #572]	@ (8001274 <main+0x270>)
 8001036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001040:	4a8d      	ldr	r2, [pc, #564]	@ (8001278 <main+0x274>)
 8001042:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001044:	b662      	cpsie	i
}
 8001046:	bf00      	nop
			__enable_irq();

			if(dma_tail!=dma_head)
 8001048:	4b8b      	ldr	r3, [pc, #556]	@ (8001278 <main+0x274>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b8b      	ldr	r3, [pc, #556]	@ (800127c <main+0x278>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	f000 81a0 	beq.w	8001396 <main+0x392>
			{
				if(dma_head < dma_tail)
 8001056:	4b89      	ldr	r3, [pc, #548]	@ (800127c <main+0x278>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	4b87      	ldr	r3, [pc, #540]	@ (8001278 <main+0x274>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	f080 8083 	bcs.w	800116a <main+0x166>
				{
					for(register size_t i=dma_head; i<dma_tail; i++)
 8001064:	4b85      	ldr	r3, [pc, #532]	@ (800127c <main+0x278>)
 8001066:	681c      	ldr	r4, [r3, #0]
 8001068:	e07a      	b.n	8001160 <main+0x15c>
					{
						msg_list[cur_msg][cur_msg_sz++]= buffer[i];
 800106a:	4b85      	ldr	r3, [pc, #532]	@ (8001280 <main+0x27c>)
 800106c:	6819      	ldr	r1, [r3, #0]
 800106e:	4b85      	ldr	r3, [pc, #532]	@ (8001284 <main+0x280>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	1c53      	adds	r3, r2, #1
 8001074:	4883      	ldr	r0, [pc, #524]	@ (8001284 <main+0x280>)
 8001076:	6003      	str	r3, [r0, #0]
 8001078:	4b7d      	ldr	r3, [pc, #500]	@ (8001270 <main+0x26c>)
 800107a:	5d1d      	ldrb	r5, [r3, r4]
 800107c:	4882      	ldr	r0, [pc, #520]	@ (8001288 <main+0x284>)
 800107e:	460b      	mov	r3, r1
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	4403      	add	r3, r0
 8001088:	4413      	add	r3, r2
 800108a:	462a      	mov	r2, r5
 800108c:	701a      	strb	r2, [r3, #0]
						found = (found == 0 && msg_list[cur_msg][cur_msg_sz-1] == '\r') ? 1
 800108e:	4b7f      	ldr	r3, [pc, #508]	@ (800128c <main+0x288>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10e      	bne.n	80010b4 <main+0xb0>
 8001096:	4b7a      	ldr	r3, [pc, #488]	@ (8001280 <main+0x27c>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b7a      	ldr	r3, [pc, #488]	@ (8001284 <main+0x280>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	1e59      	subs	r1, r3, #1
 80010a0:	4879      	ldr	r0, [pc, #484]	@ (8001288 <main+0x284>)
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	4403      	add	r3, r0
 80010ac:	440b      	add	r3, r1
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b0d      	cmp	r3, #13
 80010b2:	d016      	beq.n	80010e2 <main+0xde>
								: (found == 1 && msg_list[cur_msg][cur_msg_sz-1] == '\n') ? 2
 80010b4:	4b75      	ldr	r3, [pc, #468]	@ (800128c <main+0x288>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
						found = (found == 0 && msg_list[cur_msg][cur_msg_sz-1] == '\r') ? 1
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d110      	bne.n	80010de <main+0xda>
								: (found == 1 && msg_list[cur_msg][cur_msg_sz-1] == '\n') ? 2
 80010bc:	4b70      	ldr	r3, [pc, #448]	@ (8001280 <main+0x27c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b70      	ldr	r3, [pc, #448]	@ (8001284 <main+0x280>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	1e59      	subs	r1, r3, #1
 80010c6:	4870      	ldr	r0, [pc, #448]	@ (8001288 <main+0x284>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4403      	add	r3, r0
 80010d2:	440b      	add	r3, r1
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d101      	bne.n	80010de <main+0xda>
						found = (found == 0 && msg_list[cur_msg][cur_msg_sz-1] == '\r') ? 1
 80010da:	2302      	movs	r3, #2
 80010dc:	e002      	b.n	80010e4 <main+0xe0>
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <main+0xe0>
 80010e2:	2301      	movs	r3, #1
 80010e4:	4a69      	ldr	r2, [pc, #420]	@ (800128c <main+0x288>)
 80010e6:	7013      	strb	r3, [r2, #0]
										: 0;

						if(found==2)
 80010e8:	4b68      	ldr	r3, [pc, #416]	@ (800128c <main+0x288>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d136      	bne.n	800115e <main+0x15a>
						{
							msg_list[cur_msg][cur_msg_sz-2] = 0;
 80010f0:	4b63      	ldr	r3, [pc, #396]	@ (8001280 <main+0x27c>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b63      	ldr	r3, [pc, #396]	@ (8001284 <main+0x280>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	1e99      	subs	r1, r3, #2
 80010fa:	4863      	ldr	r0, [pc, #396]	@ (8001288 <main+0x284>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4403      	add	r3, r0
 8001106:	440b      	add	r3, r1
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
							msg_list[cur_msg][cur_msg_sz-1] = 0;
 800110c:	4b5c      	ldr	r3, [pc, #368]	@ (8001280 <main+0x27c>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b5c      	ldr	r3, [pc, #368]	@ (8001284 <main+0x280>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	1e59      	subs	r1, r3, #1
 8001116:	485c      	ldr	r0, [pc, #368]	@ (8001288 <main+0x284>)
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	011b      	lsls	r3, r3, #4
 8001120:	4403      	add	r3, r0
 8001122:	440b      	add	r3, r1
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
							cur_msg = cur_msg == HAIFA_MESSAGE_LIST_SIZE-1 ? 0 : cur_msg + 1;
 8001128:	4b55      	ldr	r3, [pc, #340]	@ (8001280 <main+0x27c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b02      	cmp	r3, #2
 800112e:	d003      	beq.n	8001138 <main+0x134>
 8001130:	4b53      	ldr	r3, [pc, #332]	@ (8001280 <main+0x27c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	e000      	b.n	800113a <main+0x136>
 8001138:	2300      	movs	r3, #0
 800113a:	4a51      	ldr	r2, [pc, #324]	@ (8001280 <main+0x27c>)
 800113c:	6013      	str	r3, [r2, #0]
							memset(msg_list[cur_msg],0, HAIFA_MESSAGE_SIZE);
 800113e:	4b50      	ldr	r3, [pc, #320]	@ (8001280 <main+0x27c>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	4a4f      	ldr	r2, [pc, #316]	@ (8001288 <main+0x284>)
 800114c:	4413      	add	r3, r2
 800114e:	2250      	movs	r2, #80	@ 0x50
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f006 fafa 	bl	800774c <memset>
							cur_msg_sz=0;
 8001158:	4b4a      	ldr	r3, [pc, #296]	@ (8001284 <main+0x280>)
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
					for(register size_t i=dma_head; i<dma_tail; i++)
 800115e:	3401      	adds	r4, #1
 8001160:	4b45      	ldr	r3, [pc, #276]	@ (8001278 <main+0x274>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	429c      	cmp	r4, r3
 8001166:	d380      	bcc.n	800106a <main+0x66>
 8001168:	e111      	b.n	800138e <main+0x38a>
						}
					}
				}
				else
				{
					for(register size_t i=dma_head; i<HAIFA_DMA_BUFFER_SIZE; i++)
 800116a:	4b44      	ldr	r3, [pc, #272]	@ (800127c <main+0x278>)
 800116c:	681c      	ldr	r4, [r3, #0]
 800116e:	e07a      	b.n	8001266 <main+0x262>
					{
						msg_list[cur_msg][cur_msg_sz++]= buffer[i];
 8001170:	4b43      	ldr	r3, [pc, #268]	@ (8001280 <main+0x27c>)
 8001172:	6819      	ldr	r1, [r3, #0]
 8001174:	4b43      	ldr	r3, [pc, #268]	@ (8001284 <main+0x280>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	1c53      	adds	r3, r2, #1
 800117a:	4842      	ldr	r0, [pc, #264]	@ (8001284 <main+0x280>)
 800117c:	6003      	str	r3, [r0, #0]
 800117e:	4b3c      	ldr	r3, [pc, #240]	@ (8001270 <main+0x26c>)
 8001180:	5d1d      	ldrb	r5, [r3, r4]
 8001182:	4841      	ldr	r0, [pc, #260]	@ (8001288 <main+0x284>)
 8001184:	460b      	mov	r3, r1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	4403      	add	r3, r0
 800118e:	4413      	add	r3, r2
 8001190:	462a      	mov	r2, r5
 8001192:	701a      	strb	r2, [r3, #0]
						found = (found == 0 && msg_list[cur_msg][cur_msg_sz-1] == '\r') ? 1
 8001194:	4b3d      	ldr	r3, [pc, #244]	@ (800128c <main+0x288>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10e      	bne.n	80011ba <main+0x1b6>
 800119c:	4b38      	ldr	r3, [pc, #224]	@ (8001280 <main+0x27c>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b38      	ldr	r3, [pc, #224]	@ (8001284 <main+0x280>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1e59      	subs	r1, r3, #1
 80011a6:	4838      	ldr	r0, [pc, #224]	@ (8001288 <main+0x284>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4403      	add	r3, r0
 80011b2:	440b      	add	r3, r1
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b0d      	cmp	r3, #13
 80011b8:	d016      	beq.n	80011e8 <main+0x1e4>
								: (found == 1 && msg_list[cur_msg][cur_msg_sz-1] == '\n') ? 2
 80011ba:	4b34      	ldr	r3, [pc, #208]	@ (800128c <main+0x288>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
						found = (found == 0 && msg_list[cur_msg][cur_msg_sz-1] == '\r') ? 1
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d110      	bne.n	80011e4 <main+0x1e0>
								: (found == 1 && msg_list[cur_msg][cur_msg_sz-1] == '\n') ? 2
 80011c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001280 <main+0x27c>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <main+0x280>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	1e59      	subs	r1, r3, #1
 80011cc:	482e      	ldr	r0, [pc, #184]	@ (8001288 <main+0x284>)
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	4403      	add	r3, r0
 80011d8:	440b      	add	r3, r1
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b0a      	cmp	r3, #10
 80011de:	d101      	bne.n	80011e4 <main+0x1e0>
						found = (found == 0 && msg_list[cur_msg][cur_msg_sz-1] == '\r') ? 1
 80011e0:	2302      	movs	r3, #2
 80011e2:	e002      	b.n	80011ea <main+0x1e6>
 80011e4:	2300      	movs	r3, #0
 80011e6:	e000      	b.n	80011ea <main+0x1e6>
 80011e8:	2301      	movs	r3, #1
 80011ea:	4a28      	ldr	r2, [pc, #160]	@ (800128c <main+0x288>)
 80011ec:	7013      	strb	r3, [r2, #0]
										: 0;

						if(found==2)
 80011ee:	4b27      	ldr	r3, [pc, #156]	@ (800128c <main+0x288>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d136      	bne.n	8001264 <main+0x260>
						{
							msg_list[cur_msg][cur_msg_sz-2] = 0;
 80011f6:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <main+0x27c>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <main+0x280>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	1e99      	subs	r1, r3, #2
 8001200:	4821      	ldr	r0, [pc, #132]	@ (8001288 <main+0x284>)
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	4403      	add	r3, r0
 800120c:	440b      	add	r3, r1
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
							msg_list[cur_msg][cur_msg_sz-1] = 0;
 8001212:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <main+0x27c>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <main+0x280>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	1e59      	subs	r1, r3, #1
 800121c:	481a      	ldr	r0, [pc, #104]	@ (8001288 <main+0x284>)
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	011b      	lsls	r3, r3, #4
 8001226:	4403      	add	r3, r0
 8001228:	440b      	add	r3, r1
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
							cur_msg = cur_msg == HAIFA_MESSAGE_LIST_SIZE-1 ? 0 : cur_msg + 1;
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <main+0x27c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d003      	beq.n	800123e <main+0x23a>
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <main+0x27c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	e000      	b.n	8001240 <main+0x23c>
 800123e:	2300      	movs	r3, #0
 8001240:	4a0f      	ldr	r2, [pc, #60]	@ (8001280 <main+0x27c>)
 8001242:	6013      	str	r3, [r2, #0]
							memset(msg_list[cur_msg], 0, HAIFA_MESSAGE_SIZE);
 8001244:	4b0e      	ldr	r3, [pc, #56]	@ (8001280 <main+0x27c>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <main+0x284>)
 8001252:	4413      	add	r3, r2
 8001254:	2250      	movs	r2, #80	@ 0x50
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f006 fa77 	bl	800774c <memset>
							cur_msg_sz=0;
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <main+0x280>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
					for(register size_t i=dma_head; i<HAIFA_DMA_BUFFER_SIZE; i++)
 8001264:	3401      	adds	r4, #1
 8001266:	2cef      	cmp	r4, #239	@ 0xef
 8001268:	d982      	bls.n	8001170 <main+0x16c>
						}
					}
					for(register size_t i=0; i<dma_tail; i++)
 800126a:	2400      	movs	r4, #0
 800126c:	e08b      	b.n	8001386 <main+0x382>
 800126e:	bf00      	nop
 8001270:	200004b4 	.word	0x200004b4
 8001274:	20000220 	.word	0x20000220
 8001278:	200005a8 	.word	0x200005a8
 800127c:	200005a4 	.word	0x200005a4
 8001280:	200005b0 	.word	0x200005b0
 8001284:	200005ac 	.word	0x200005ac
 8001288:	200003c4 	.word	0x200003c4
 800128c:	200005b4 	.word	0x200005b4
					{
						msg_list[cur_msg][cur_msg_sz++]= buffer[i];
 8001290:	4b6e      	ldr	r3, [pc, #440]	@ (800144c <main+0x448>)
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	4b6e      	ldr	r3, [pc, #440]	@ (8001450 <main+0x44c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	1c53      	adds	r3, r2, #1
 800129a:	486d      	ldr	r0, [pc, #436]	@ (8001450 <main+0x44c>)
 800129c:	6003      	str	r3, [r0, #0]
 800129e:	4b6d      	ldr	r3, [pc, #436]	@ (8001454 <main+0x450>)
 80012a0:	5d1d      	ldrb	r5, [r3, r4]
 80012a2:	486d      	ldr	r0, [pc, #436]	@ (8001458 <main+0x454>)
 80012a4:	460b      	mov	r3, r1
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	011b      	lsls	r3, r3, #4
 80012ac:	4403      	add	r3, r0
 80012ae:	4413      	add	r3, r2
 80012b0:	462a      	mov	r2, r5
 80012b2:	701a      	strb	r2, [r3, #0]
						found = (found == 0 && msg_list[cur_msg][cur_msg_sz-1] == '\r') ? 1
 80012b4:	4b69      	ldr	r3, [pc, #420]	@ (800145c <main+0x458>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10e      	bne.n	80012da <main+0x2d6>
 80012bc:	4b63      	ldr	r3, [pc, #396]	@ (800144c <main+0x448>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b63      	ldr	r3, [pc, #396]	@ (8001450 <main+0x44c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	1e59      	subs	r1, r3, #1
 80012c6:	4864      	ldr	r0, [pc, #400]	@ (8001458 <main+0x454>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4403      	add	r3, r0
 80012d2:	440b      	add	r3, r1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b0d      	cmp	r3, #13
 80012d8:	d016      	beq.n	8001308 <main+0x304>
								: (found == 1 && msg_list[cur_msg][cur_msg_sz-1] == '\n') ? 2
 80012da:	4b60      	ldr	r3, [pc, #384]	@ (800145c <main+0x458>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
						found = (found == 0 && msg_list[cur_msg][cur_msg_sz-1] == '\r') ? 1
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d110      	bne.n	8001304 <main+0x300>
								: (found == 1 && msg_list[cur_msg][cur_msg_sz-1] == '\n') ? 2
 80012e2:	4b5a      	ldr	r3, [pc, #360]	@ (800144c <main+0x448>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001450 <main+0x44c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	1e59      	subs	r1, r3, #1
 80012ec:	485a      	ldr	r0, [pc, #360]	@ (8001458 <main+0x454>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	4403      	add	r3, r0
 80012f8:	440b      	add	r3, r1
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b0a      	cmp	r3, #10
 80012fe:	d101      	bne.n	8001304 <main+0x300>
						found = (found == 0 && msg_list[cur_msg][cur_msg_sz-1] == '\r') ? 1
 8001300:	2302      	movs	r3, #2
 8001302:	e002      	b.n	800130a <main+0x306>
 8001304:	2300      	movs	r3, #0
 8001306:	e000      	b.n	800130a <main+0x306>
 8001308:	2301      	movs	r3, #1
 800130a:	4a54      	ldr	r2, [pc, #336]	@ (800145c <main+0x458>)
 800130c:	7013      	strb	r3, [r2, #0]
										: 0;

						if(found==2)
 800130e:	4b53      	ldr	r3, [pc, #332]	@ (800145c <main+0x458>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d136      	bne.n	8001384 <main+0x380>
						{
							msg_list[cur_msg][cur_msg_sz-2] = 0;
 8001316:	4b4d      	ldr	r3, [pc, #308]	@ (800144c <main+0x448>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4b4d      	ldr	r3, [pc, #308]	@ (8001450 <main+0x44c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1e99      	subs	r1, r3, #2
 8001320:	484d      	ldr	r0, [pc, #308]	@ (8001458 <main+0x454>)
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	4403      	add	r3, r0
 800132c:	440b      	add	r3, r1
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]
							msg_list[cur_msg][cur_msg_sz-1] = 0;
 8001332:	4b46      	ldr	r3, [pc, #280]	@ (800144c <main+0x448>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b46      	ldr	r3, [pc, #280]	@ (8001450 <main+0x44c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1e59      	subs	r1, r3, #1
 800133c:	4846      	ldr	r0, [pc, #280]	@ (8001458 <main+0x454>)
 800133e:	4613      	mov	r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	4403      	add	r3, r0
 8001348:	440b      	add	r3, r1
 800134a:	2200      	movs	r2, #0
 800134c:	701a      	strb	r2, [r3, #0]

							cur_msg = cur_msg == HAIFA_MESSAGE_LIST_SIZE-1 ? 0 : cur_msg + 1;
 800134e:	4b3f      	ldr	r3, [pc, #252]	@ (800144c <main+0x448>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d003      	beq.n	800135e <main+0x35a>
 8001356:	4b3d      	ldr	r3, [pc, #244]	@ (800144c <main+0x448>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	e000      	b.n	8001360 <main+0x35c>
 800135e:	2300      	movs	r3, #0
 8001360:	4a3a      	ldr	r2, [pc, #232]	@ (800144c <main+0x448>)
 8001362:	6013      	str	r3, [r2, #0]
							memset(msg_list[cur_msg],0,HAIFA_MESSAGE_SIZE);
 8001364:	4b39      	ldr	r3, [pc, #228]	@ (800144c <main+0x448>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4613      	mov	r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	4413      	add	r3, r2
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4a39      	ldr	r2, [pc, #228]	@ (8001458 <main+0x454>)
 8001372:	4413      	add	r3, r2
 8001374:	2250      	movs	r2, #80	@ 0x50
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f006 f9e7 	bl	800774c <memset>
							cur_msg_sz=0;
 800137e:	4b34      	ldr	r3, [pc, #208]	@ (8001450 <main+0x44c>)
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
					for(register size_t i=0; i<dma_tail; i++)
 8001384:	3401      	adds	r4, #1
 8001386:	4b36      	ldr	r3, [pc, #216]	@ (8001460 <main+0x45c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	429c      	cmp	r4, r3
 800138c:	d380      	bcc.n	8001290 <main+0x28c>
						}
					}
				}
				dma_head=dma_tail;
 800138e:	4b34      	ldr	r3, [pc, #208]	@ (8001460 <main+0x45c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a34      	ldr	r2, [pc, #208]	@ (8001464 <main+0x460>)
 8001394:	6013      	str	r3, [r2, #0]
			}
		} while(dma_head!=(HAIFA_DMA_BUFFER_SIZE- HAIFA_UART.hdmarx->Instance->CNDTR));
 8001396:	4b34      	ldr	r3, [pc, #208]	@ (8001468 <main+0x464>)
 8001398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f1c3 02f0 	rsb	r2, r3, #240	@ 0xf0
 80013a2:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <main+0x460>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	f47f ae42 	bne.w	8001030 <main+0x2c>

		// try parsing all stored messages
		while ((last_read_msg + 1u) % HAIFA_MESSAGE_LIST_SIZE != cur_msg)
 80013ac:	e0aa      	b.n	8001504 <main+0x500>
		{
			last_read_msg = (last_read_msg + 1) % HAIFA_MESSAGE_LIST_SIZE;
 80013ae:	4b2f      	ldr	r3, [pc, #188]	@ (800146c <main+0x468>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	1c5a      	adds	r2, r3, #1
 80013b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001470 <main+0x46c>)
 80013b6:	fb83 3102 	smull	r3, r1, r3, r2
 80013ba:	17d3      	asrs	r3, r2, #31
 80013bc:	1ac9      	subs	r1, r1, r3
 80013be:	460b      	mov	r3, r1
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	440b      	add	r3, r1
 80013c4:	1ad1      	subs	r1, r2, r3
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	4b28      	ldr	r3, [pc, #160]	@ (800146c <main+0x468>)
 80013ca:	701a      	strb	r2, [r3, #0]

			// Parse incoming message
			if(msg_list[last_read_msg][0] == '$')
 80013cc:	4b27      	ldr	r3, [pc, #156]	@ (800146c <main+0x468>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	4a21      	ldr	r2, [pc, #132]	@ (8001458 <main+0x454>)
 80013d4:	460b      	mov	r3, r1
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	440b      	add	r3, r1
 80013da:	011b      	lsls	r3, r3, #4
 80013dc:	4413      	add	r3, r2
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b24      	cmp	r3, #36	@ 0x24
 80013e2:	f040 808f 	bne.w	8001504 <main+0x500>
			{
				// Extract ID
				int i_id = 1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	607b      	str	r3, [r7, #4]
				while(msg_list[last_read_msg][i_id] != ';' && i_id - 1 < MAX_ID_LEN)
 80013ea:	e012      	b.n	8001412 <main+0x40e>
				{

					id[i_id-1] = msg_list[last_read_msg][i_id];
 80013ec:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <main+0x468>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	1e5a      	subs	r2, r3, #1
 80013f6:	4918      	ldr	r1, [pc, #96]	@ (8001458 <main+0x454>)
 80013f8:	4603      	mov	r3, r0
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4403      	add	r3, r0
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	4419      	add	r1, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	440b      	add	r3, r1
 8001406:	7819      	ldrb	r1, [r3, #0]
 8001408:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <main+0x470>)
 800140a:	5499      	strb	r1, [r3, r2]
					i_id++;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3301      	adds	r3, #1
 8001410:	607b      	str	r3, [r7, #4]
				while(msg_list[last_read_msg][i_id] != ';' && i_id - 1 < MAX_ID_LEN)
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <main+0x468>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4619      	mov	r1, r3
 8001418:	4a0f      	ldr	r2, [pc, #60]	@ (8001458 <main+0x454>)
 800141a:	460b      	mov	r3, r1
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	441a      	add	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b3b      	cmp	r3, #59	@ 0x3b
 800142c:	d002      	beq.n	8001434 <main+0x430>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b02      	cmp	r3, #2
 8001432:	dddb      	ble.n	80013ec <main+0x3e8>
				}
				id[i_id-1] = '\0';
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	4a0e      	ldr	r2, [pc, #56]	@ (8001474 <main+0x470>)
 800143a:	2100      	movs	r1, #0
 800143c:	54d1      	strb	r1, [r2, r3]

				// Pass the semicolon
				i_id++;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3301      	adds	r3, #1
 8001442:	607b      	str	r3, [r7, #4]

				// Extract payload
				int i_pl = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	603b      	str	r3, [r7, #0]
				while(msg_list[last_read_msg][i_id + i_pl] != '\r' && i_pl < MAX_PAYLOAD_LEN)
 8001448:	e02c      	b.n	80014a4 <main+0x4a0>
 800144a:	bf00      	nop
 800144c:	200005b0 	.word	0x200005b0
 8001450:	200005ac 	.word	0x200005ac
 8001454:	200004b4 	.word	0x200004b4
 8001458:	200003c4 	.word	0x200003c4
 800145c:	200005b4 	.word	0x200005b4
 8001460:	200005a8 	.word	0x200005a8
 8001464:	200005a4 	.word	0x200005a4
 8001468:	20000220 	.word	0x20000220
 800146c:	20000000 	.word	0x20000000
 8001470:	55555556 	.word	0x55555556
 8001474:	200005b8 	.word	0x200005b8
				{
					payload[i_pl] = msg_list[last_read_msg][i_id + i_pl];
 8001478:	4b5f      	ldr	r3, [pc, #380]	@ (80015f8 <main+0x5f4>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	441a      	add	r2, r3
 8001484:	495d      	ldr	r1, [pc, #372]	@ (80015fc <main+0x5f8>)
 8001486:	4603      	mov	r3, r0
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4403      	add	r3, r0
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	440b      	add	r3, r1
 8001490:	4413      	add	r3, r2
 8001492:	7819      	ldrb	r1, [r3, #0]
 8001494:	4a5a      	ldr	r2, [pc, #360]	@ (8001600 <main+0x5fc>)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	4413      	add	r3, r2
 800149a:	460a      	mov	r2, r1
 800149c:	701a      	strb	r2, [r3, #0]
					i_pl++;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	603b      	str	r3, [r7, #0]
				while(msg_list[last_read_msg][i_id + i_pl] != '\r' && i_pl < MAX_PAYLOAD_LEN)
 80014a4:	4b54      	ldr	r3, [pc, #336]	@ (80015f8 <main+0x5f4>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	441a      	add	r2, r3
 80014b0:	4952      	ldr	r1, [pc, #328]	@ (80015fc <main+0x5f8>)
 80014b2:	4603      	mov	r3, r0
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4403      	add	r3, r0
 80014b8:	011b      	lsls	r3, r3, #4
 80014ba:	440b      	add	r3, r1
 80014bc:	4413      	add	r3, r2
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b0d      	cmp	r3, #13
 80014c2:	d002      	beq.n	80014ca <main+0x4c6>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b0e      	cmp	r3, #14
 80014c8:	ddd6      	ble.n	8001478 <main+0x474>
				}
				payload[i_pl] = '\0';
 80014ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001600 <main+0x5fc>)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]

				// Check the ID
				if(strcmp((char*)id, "DS") == 0)
 80014d4:	494b      	ldr	r1, [pc, #300]	@ (8001604 <main+0x600>)
 80014d6:	484c      	ldr	r0, [pc, #304]	@ (8001608 <main+0x604>)
 80014d8:	f7fe fe7a 	bl	80001d0 <strcmp>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d110      	bne.n	8001504 <main+0x500>
				{
					//Convert payload into float
					depth2reach = strtod((char*)payload, NULL);
 80014e2:	2100      	movs	r1, #0
 80014e4:	4846      	ldr	r0, [pc, #280]	@ (8001600 <main+0x5fc>)
 80014e6:	f005 fa8f 	bl	8006a08 <strtod>
 80014ea:	eeb0 7a40 	vmov.f32	s14, s0
 80014ee:	eef0 7a60 	vmov.f32	s15, s1
 80014f2:	4b46      	ldr	r3, [pc, #280]	@ (800160c <main+0x608>)
 80014f4:	ed83 7b00 	vstr	d7, [r3]
					printf("Target Depth = %f\r\n", depth2reach);
 80014f8:	4b44      	ldr	r3, [pc, #272]	@ (800160c <main+0x608>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	4844      	ldr	r0, [pc, #272]	@ (8001610 <main+0x60c>)
 8001500:	f005 ffa8 	bl	8007454 <iprintf>
		while ((last_read_msg + 1u) % HAIFA_MESSAGE_LIST_SIZE != cur_msg)
 8001504:	4b3c      	ldr	r3, [pc, #240]	@ (80015f8 <main+0x5f4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	1c59      	adds	r1, r3, #1
 800150a:	4b42      	ldr	r3, [pc, #264]	@ (8001614 <main+0x610>)
 800150c:	fba3 2301 	umull	r2, r3, r3, r1
 8001510:	085a      	lsrs	r2, r3, #1
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	1aca      	subs	r2, r1, r3
 800151a:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <main+0x614>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	429a      	cmp	r2, r3
 8001520:	f47f af45 	bne.w	80013ae <main+0x3aa>

		// Check if ARTIFICAL_DEPTH macro is defined (true for 1)
		if(ARTIFICAL_DEPTH)
		{
			// Generate variations for depth and target depth
			Generate_Depth_Variations(&depth, &depthTarget, 200.0);
 8001524:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 800161c <main+0x618>
 8001528:	493d      	ldr	r1, [pc, #244]	@ (8001620 <main+0x61c>)
 800152a:	483e      	ldr	r0, [pc, #248]	@ (8001624 <main+0x620>)
 800152c:	f000 f9f4 	bl	8001918 <Generate_Depth_Variations>
		}

		time_count++;
 8001530:	4b3d      	ldr	r3, [pc, #244]	@ (8001628 <main+0x624>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	4a3c      	ldr	r2, [pc, #240]	@ (8001628 <main+0x624>)
 8001538:	6013      	str	r3, [r2, #0]
		if(time_count > TIME_PERIOD)
 800153a:	4b3c      	ldr	r3, [pc, #240]	@ (800162c <main+0x628>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	461a      	mov	r2, r3
 8001548:	4b39      	ldr	r3, [pc, #228]	@ (8001630 <main+0x62c>)
 800154a:	fba3 2302 	umull	r2, r3, r3, r2
 800154e:	099a      	lsrs	r2, r3, #6
 8001550:	4b35      	ldr	r3, [pc, #212]	@ (8001628 <main+0x624>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	f4bf ad66 	bcs.w	8001026 <main+0x22>
		{
			time_count = 0;
 800155a:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <main+0x624>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
			// Prepare the transmission buffer
			snprintf((char*)aTxBuffer, sizeof(aTxBuffer),"$DC;%06.2f\r\n",depth);
 8001560:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <main+0x620>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ffff 	bl	8000568 <__aeabi_f2d>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	e9cd 2300 	strd	r2, r3, [sp]
 8001572:	4a30      	ldr	r2, [pc, #192]	@ (8001634 <main+0x630>)
 8001574:	2120      	movs	r1, #32
 8001576:	4830      	ldr	r0, [pc, #192]	@ (8001638 <main+0x634>)
 8001578:	f005 ffdc 	bl	8007534 <sniprintf>
			// "Depth=" (literal string)
			// "%06.2f" (format specifier: 6 digits total, 2 decimal place for depth value)
			// "\r\n" (message terminator)

			// Print the formatted message for debugging (optional)
			printf("TX : %s\r\n", aTxBuffer);
 800157c:	492e      	ldr	r1, [pc, #184]	@ (8001638 <main+0x634>)
 800157e:	482f      	ldr	r0, [pc, #188]	@ (800163c <main+0x638>)
 8001580:	f005 ff68 	bl	8007454 <iprintf>

			/* Start the transmission process */
			// Check if the UART peripheral is ready for transmission
			if(huart1.gState == HAL_UART_STATE_READY)
 8001584:	4b2e      	ldr	r3, [pc, #184]	@ (8001640 <main+0x63c>)
 8001586:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001588:	2b20      	cmp	r3, #32
 800158a:	f47f ad4c 	bne.w	8001026 <main+0x22>
			{
				// Initiate DMA transmission of data in aTxBuffer via USART1
				TransmitState = HAL_UART_Transmit_DMA(&huart1, aTxBuffer, TXBUFFERSIZE);
 800158e:	2220      	movs	r2, #32
 8001590:	4929      	ldr	r1, [pc, #164]	@ (8001638 <main+0x634>)
 8001592:	482b      	ldr	r0, [pc, #172]	@ (8001640 <main+0x63c>)
 8001594:	f003 f82e 	bl	80045f4 <HAL_UART_Transmit_DMA>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	4b29      	ldr	r3, [pc, #164]	@ (8001644 <main+0x640>)
 800159e:	701a      	strb	r2, [r3, #0]

				// Handle transmission errors
				if(TransmitState != HAL_OK)
 80015a0:	4b28      	ldr	r3, [pc, #160]	@ (8001644 <main+0x640>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01c      	beq.n	80015e2 <main+0x5de>
				{
					printf("Error in transmission\r\n");
 80015a8:	4827      	ldr	r0, [pc, #156]	@ (8001648 <main+0x644>)
 80015aa:	f005 ffbb 	bl	8007524 <puts>
					switch(TransmitState)
 80015ae:	4b25      	ldr	r3, [pc, #148]	@ (8001644 <main+0x640>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b03      	cmp	r3, #3
 80015b4:	d00e      	beq.n	80015d4 <main+0x5d0>
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	dc10      	bgt.n	80015dc <main+0x5d8>
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d002      	beq.n	80015c4 <main+0x5c0>
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d004      	beq.n	80015cc <main+0x5c8>
						break;
					case HAL_TIMEOUT :
						printf("HAL_TIMEOUT\r\n");
						break;
					default :
						break;
 80015c2:	e00b      	b.n	80015dc <main+0x5d8>
						printf("HAL_ERROR\r\n");
 80015c4:	4821      	ldr	r0, [pc, #132]	@ (800164c <main+0x648>)
 80015c6:	f005 ffad 	bl	8007524 <puts>
						break;
 80015ca:	e008      	b.n	80015de <main+0x5da>
						printf("HAL_BUSY\r\n");
 80015cc:	4820      	ldr	r0, [pc, #128]	@ (8001650 <main+0x64c>)
 80015ce:	f005 ffa9 	bl	8007524 <puts>
						break;
 80015d2:	e004      	b.n	80015de <main+0x5da>
						printf("HAL_TIMEOUT\r\n");
 80015d4:	481f      	ldr	r0, [pc, #124]	@ (8001654 <main+0x650>)
 80015d6:	f005 ffa5 	bl	8007524 <puts>
						break;
 80015da:	e000      	b.n	80015de <main+0x5da>
						break;
 80015dc:	bf00      	nop
					}
					Error_Handler();
 80015de:	f000 fb67 	bl	8001cb0 <Error_Handler>
				}

				/* Wait for the end of the transfer */
				while (UartReady != SET)
 80015e2:	bf00      	nop
 80015e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <main+0x654>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d1fa      	bne.n	80015e4 <main+0x5e0>
				{
				}

				/* Reset transmission flag */
				UartReady = RESET;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <main+0x654>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_DMA(&HAIFA_UART, buffer, sizeof(buffer));
 80015f4:	e517      	b.n	8001026 <main+0x22>
 80015f6:	bf00      	nop
 80015f8:	20000000 	.word	0x20000000
 80015fc:	200003c4 	.word	0x200003c4
 8001600:	200005bc 	.word	0x200005bc
 8001604:	0800a0e0 	.word	0x0800a0e0
 8001608:	200005b8 	.word	0x200005b8
 800160c:	200005d0 	.word	0x200005d0
 8001610:	0800a0e4 	.word	0x0800a0e4
 8001614:	aaaaaaab 	.word	0xaaaaaaab
 8001618:	200005b0 	.word	0x200005b0
 800161c:	43480000 	.word	0x43480000
 8001620:	20000008 	.word	0x20000008
 8001624:	20000004 	.word	0x20000004
 8001628:	200005d8 	.word	0x200005d8
 800162c:	2000000c 	.word	0x2000000c
 8001630:	10624dd3 	.word	0x10624dd3
 8001634:	0800a0f8 	.word	0x0800a0f8
 8001638:	200005dc 	.word	0x200005dc
 800163c:	0800a108 	.word	0x0800a108
 8001640:	20000220 	.word	0x20000220
 8001644:	200003c1 	.word	0x200003c1
 8001648:	0800a114 	.word	0x0800a114
 800164c:	0800a12c 	.word	0x0800a12c
 8001650:	0800a138 	.word	0x0800a138
 8001654:	0800a144 	.word	0x0800a144
 8001658:	200003c0 	.word	0x200003c0

0800165c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b096      	sub	sp, #88	@ 0x58
 8001660:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	2244      	movs	r2, #68	@ 0x44
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f006 f86e 	bl	800774c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001670:	463b      	mov	r3, r7
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	605a      	str	r2, [r3, #4]
 8001678:	609a      	str	r2, [r3, #8]
 800167a:	60da      	str	r2, [r3, #12]
 800167c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800167e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001682:	f001 fb73 	bl	8002d6c <HAL_PWREx_ControlVoltageScaling>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0x34>
	{
		Error_Handler();
 800168c:	f000 fb10 	bl	8001cb0 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001690:	f001 fb4e 	bl	8002d30 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001694:	4b22      	ldr	r3, [pc, #136]	@ (8001720 <SystemClock_Config+0xc4>)
 8001696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169a:	4a21      	ldr	r2, [pc, #132]	@ (8001720 <SystemClock_Config+0xc4>)
 800169c:	f023 0318 	bic.w	r3, r3, #24
 80016a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80016a4:	231c      	movs	r3, #28
 80016a6:	617b      	str	r3, [r7, #20]
			|RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016a8:	2301      	movs	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016b0:	2301      	movs	r3, #1
 80016b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016b8:	2360      	movs	r3, #96	@ 0x60
 80016ba:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016bc:	2302      	movs	r3, #2
 80016be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016c0:	2301      	movs	r3, #1
 80016c2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80016c4:	2301      	movs	r3, #1
 80016c6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 16;
 80016c8:	2310      	movs	r3, #16
 80016ca:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016cc:	2307      	movs	r3, #7
 80016ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016d4:	2302      	movs	r3, #2
 80016d6:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 fb9b 	bl	8002e18 <HAL_RCC_OscConfig>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x90>
	{
		Error_Handler();
 80016e8:	f000 fae2 	bl	8001cb0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ec:	230f      	movs	r3, #15
 80016ee:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f0:	2303      	movs	r3, #3
 80016f2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	2101      	movs	r1, #1
 8001704:	4618      	mov	r0, r3
 8001706:	f001 ff9b 	bl	8003640 <HAL_RCC_ClockConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8001710:	f000 face 	bl	8001cb0 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8001714:	f002 fbae 	bl	8003e74 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001718:	bf00      	nop
 800171a:	3758      	adds	r7, #88	@ 0x58
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40021000 	.word	0x40021000

08001724 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8001728:	4b10      	ldr	r3, [pc, #64]	@ (800176c <MX_RTC_Init+0x48>)
 800172a:	4a11      	ldr	r2, [pc, #68]	@ (8001770 <MX_RTC_Init+0x4c>)
 800172c:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800172e:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <MX_RTC_Init+0x48>)
 8001730:	2200      	movs	r2, #0
 8001732:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8001734:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <MX_RTC_Init+0x48>)
 8001736:	227f      	movs	r2, #127	@ 0x7f
 8001738:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 800173a:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_RTC_Init+0x48>)
 800173c:	22ff      	movs	r2, #255	@ 0xff
 800173e:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	@ (800176c <MX_RTC_Init+0x48>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_RTC_Init+0x48>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800174c:	4b07      	ldr	r3, [pc, #28]	@ (800176c <MX_RTC_Init+0x48>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001752:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_RTC_Init+0x48>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	@ (800176c <MX_RTC_Init+0x48>)
 800175a:	f002 fc8d 	bl	8004078 <HAL_RTC_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_RTC_Init+0x44>
	{
		Error_Handler();
 8001764:	f000 faa4 	bl	8001cb0 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200001fc 	.word	0x200001fc
 8001770:	40002800 	.word	0x40002800

08001774 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <MX_USART1_UART_Init+0x58>)
 800177a:	4a15      	ldr	r2, [pc, #84]	@ (80017d0 <MX_USART1_UART_Init+0x5c>)
 800177c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800177e:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <MX_USART1_UART_Init+0x58>)
 8001780:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001784:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_USART1_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <MX_USART1_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_USART1_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_USART1_UART_Init+0x58>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <MX_USART1_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_USART1_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <MX_USART1_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_USART1_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_USART1_UART_Init+0x58>)
 80017b8:	f002 fd7c 	bl	80042b4 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80017c2:	f000 fa75 	bl	8001cb0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000220 	.word	0x20000220
 80017d0:	40013800 	.word	0x40013800

080017d4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80017d8:	4b14      	ldr	r3, [pc, #80]	@ (800182c <MX_USART2_UART_Init+0x58>)
 80017da:	4a15      	ldr	r2, [pc, #84]	@ (8001830 <MX_USART2_UART_Init+0x5c>)
 80017dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80017de:	4b13      	ldr	r3, [pc, #76]	@ (800182c <MX_USART2_UART_Init+0x58>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <MX_USART2_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <MX_USART2_UART_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	@ (800182c <MX_USART2_UART_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <MX_USART2_UART_Init+0x58>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <MX_USART2_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b09      	ldr	r3, [pc, #36]	@ (800182c <MX_USART2_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180a:	4b08      	ldr	r3, [pc, #32]	@ (800182c <MX_USART2_UART_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <MX_USART2_UART_Init+0x58>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	@ (800182c <MX_USART2_UART_Init+0x58>)
 8001818:	f002 fd4c 	bl	80042b4 <HAL_UART_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8001822:	f000 fa45 	bl	8001cb0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200002a8 	.word	0x200002a8
 8001830:	40004400 	.word	0x40004400

08001834 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800183a:	4b10      	ldr	r3, [pc, #64]	@ (800187c <MX_DMA_Init+0x48>)
 800183c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800183e:	4a0f      	ldr	r2, [pc, #60]	@ (800187c <MX_DMA_Init+0x48>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6493      	str	r3, [r2, #72]	@ 0x48
 8001846:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <MX_DMA_Init+0x48>)
 8001848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	200e      	movs	r0, #14
 8001858:	f000 fe2f 	bl	80024ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800185c:	200e      	movs	r0, #14
 800185e:	f000 fe48 	bl	80024f2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	200f      	movs	r0, #15
 8001868:	f000 fe27 	bl	80024ba <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800186c:	200f      	movs	r0, #15
 800186e:	f000 fe40 	bl	80024f2 <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000

08001880 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001896:	4b1d      	ldr	r3, [pc, #116]	@ (800190c <MX_GPIO_Init+0x8c>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	4a1c      	ldr	r2, [pc, #112]	@ (800190c <MX_GPIO_Init+0x8c>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018a2:	4b1a      	ldr	r3, [pc, #104]	@ (800190c <MX_GPIO_Init+0x8c>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <MX_GPIO_Init+0x8c>)
 80018b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b2:	4a16      	ldr	r2, [pc, #88]	@ (800190c <MX_GPIO_Init+0x8c>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <MX_GPIO_Init+0x8c>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	4b11      	ldr	r3, [pc, #68]	@ (800190c <MX_GPIO_Init+0x8c>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ca:	4a10      	ldr	r2, [pc, #64]	@ (800190c <MX_GPIO_Init+0x8c>)
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d2:	4b0e      	ldr	r3, [pc, #56]	@ (800190c <MX_GPIO_Init+0x8c>)
 80018d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	2108      	movs	r1, #8
 80018e2:	480b      	ldr	r0, [pc, #44]	@ (8001910 <MX_GPIO_Init+0x90>)
 80018e4:	f001 fa0c 	bl	8002d00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 80018e8:	2308      	movs	r3, #8
 80018ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ec:	2301      	movs	r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4619      	mov	r1, r3
 80018fe:	4804      	ldr	r0, [pc, #16]	@ (8001910 <MX_GPIO_Init+0x90>)
 8001900:	f001 f894 	bl	8002a2c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001904:	bf00      	nop
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	48000400 	.word	0x48000400
 8001914:	00000000 	.word	0x00000000

08001918 <Generate_Depth_Variations>:
 *         if necessary, and adjusts the current depth randomly towards the target depth
 *         within a specific range.
 * @retval None
 */
void Generate_Depth_Variations(float* currDepth, float* depthTarget, float maxDepth)
{
 8001918:	b5b0      	push	{r4, r5, r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	ed87 0a01 	vstr	s0, [r7, #4]
	// Check if currDepth is not initialized
	if (*currDepth == -1)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001930:	eef4 7a47 	vcmp.f32	s15, s14
 8001934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001938:	d125      	bne.n	8001986 <Generate_Depth_Variations+0x6e>
	{
		// Seed the random number generator
		srand(RTC->SSR);
 800193a:	4b73      	ldr	r3, [pc, #460]	@ (8001b08 <Generate_Depth_Variations+0x1f0>)
 800193c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800193e:	4618      	mov	r0, r3
 8001940:	f004 f9f4 	bl	8005d2c <srand>
		// Generate a random initial depth between 0 and maxDepth
		*currDepth = ((float)rand() / (float)RAND_MAX) * maxDepth + 0.0;
 8001944:	f004 fa20 	bl	8005d88 <rand>
 8001948:	ee07 0a90 	vmov	s15, r0
 800194c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001950:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8001b0c <Generate_Depth_Variations+0x1f4>
 8001954:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001958:	edd7 7a01 	vldr	s15, [r7, #4]
 800195c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001960:	ee17 0a90 	vmov	r0, s15
 8001964:	f7fe fe00 	bl	8000568 <__aeabi_f2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	f7fe fc9c 	bl	80002ac <__adddf3>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f944 	bl	8000c08 <__aeabi_d2f>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	601a      	str	r2, [r3, #0]
	}

	// Check if the target depth has been reached
	// or if depthTarget is not initialized
	if (abs(*currDepth - *depthTarget) <= 0.6 || *depthTarget == -1.0)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	ed93 7a00 	vldr	s14, [r3]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	edd3 7a00 	vldr	s15, [r3]
 8001992:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199a:	ee17 3a90 	vmov	r3, s15
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0d      	blt.n	80019be <Generate_Depth_Variations+0xa6>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	ed93 7a00 	vldr	s14, [r3]
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b6:	ee17 3a90 	vmov	r3, s15
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	dd09      	ble.n	80019d2 <Generate_Depth_Variations+0xba>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80019c8:	eef4 7a47 	vcmp.f32	s15, s14
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	d134      	bne.n	8001a3c <Generate_Depth_Variations+0x124>
	{
		// Seed the random number generator
		srand(RTC->SSR);
 80019d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001b08 <Generate_Depth_Variations+0x1f0>)
 80019d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d6:	4618      	mov	r0, r3
 80019d8:	f004 f9a8 	bl	8005d2c <srand>
		// Generate a new random target depth between 0.6 and maxDepth-0.6
		*depthTarget = ((float)rand() / (float)RAND_MAX) * (maxDepth-0.6) + 0.6;
 80019dc:	f004 f9d4 	bl	8005d88 <rand>
 80019e0:	ee07 0a90 	vmov	s15, r0
 80019e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e8:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001b0c <Generate_Depth_Variations+0x1f4>
 80019ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019f0:	ee16 0a90 	vmov	r0, s13
 80019f4:	f7fe fdb8 	bl	8000568 <__aeabi_f2d>
 80019f8:	4604      	mov	r4, r0
 80019fa:	460d      	mov	r5, r1
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7fe fdb3 	bl	8000568 <__aeabi_f2d>
 8001a02:	a33f      	add	r3, pc, #252	@ (adr r3, 8001b00 <Generate_Depth_Variations+0x1e8>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7fe fc4e 	bl	80002a8 <__aeabi_dsub>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fe00 	bl	8000618 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	4619      	mov	r1, r3
 8001a20:	a337      	add	r3, pc, #220	@ (adr r3, 8001b00 <Generate_Depth_Variations+0x1e8>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fc41 	bl	80002ac <__adddf3>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff f8e9 	bl	8000c08 <__aeabi_d2f>
 8001a36:	4602      	mov	r2, r0
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	601a      	str	r2, [r3, #0]
	}

	// Generate a random adjustment between 0.1 and 0.5 with two decimal places
	srand(RTC->SSR);
 8001a3c:	4b32      	ldr	r3, [pc, #200]	@ (8001b08 <Generate_Depth_Variations+0x1f0>)
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a40:	4618      	mov	r0, r3
 8001a42:	f004 f973 	bl	8005d2c <srand>
	float randomAdjustment = (rand()%50 + 1)/100.0;
 8001a46:	f004 f99f 	bl	8005d88 <rand>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4b30      	ldr	r3, [pc, #192]	@ (8001b10 <Generate_Depth_Variations+0x1f8>)
 8001a4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001a52:	1119      	asrs	r1, r3, #4
 8001a54:	17d3      	asrs	r3, r2, #31
 8001a56:	1acb      	subs	r3, r1, r3
 8001a58:	2132      	movs	r1, #50	@ 0x32
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	3301      	adds	r3, #1
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd6e 	bl	8000544 <__aeabi_i2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b29      	ldr	r3, [pc, #164]	@ (8001b14 <Generate_Depth_Variations+0x1fc>)
 8001a6e:	f7fe fefd 	bl	800086c <__aeabi_ddiv>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f8c5 	bl	8000c08 <__aeabi_d2f>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	617b      	str	r3, [r7, #20]

	// Adjust currDepth based on comparison with depthTarget
	if (*currDepth > *depthTarget)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	ed93 7a00 	vldr	s14, [r3]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a96:	dd17      	ble.n	8001ac8 <Generate_Depth_Variations+0x1b0>
	{
		*currDepth -= randomAdjustment;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	ed93 7a00 	vldr	s14, [r3]
 8001a9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	edc3 7a00 	vstr	s15, [r3]
		// Ensure currDepth doesn't go below 0
		if(*currDepth < 0) *currDepth = 0;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aba:	d400      	bmi.n	8001abe <Generate_Depth_Variations+0x1a6>
	}
	else if (*currDepth < *depthTarget)
	{
		*currDepth += randomAdjustment;
	}
}
 8001abc:	e01a      	b.n	8001af4 <Generate_Depth_Variations+0x1dc>
		if(*currDepth < 0) *currDepth = 0;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
}
 8001ac6:	e015      	b.n	8001af4 <Generate_Depth_Variations+0x1dc>
	else if (*currDepth < *depthTarget)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	ed93 7a00 	vldr	s14, [r3]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d400      	bmi.n	8001ae0 <Generate_Depth_Variations+0x1c8>
}
 8001ade:	e009      	b.n	8001af4 <Generate_Depth_Variations+0x1dc>
		*currDepth += randomAdjustment;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	ed93 7a00 	vldr	s14, [r3]
 8001ae6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	edc3 7a00 	vstr	s15, [r3]
}
 8001af4:	bf00      	nop
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}
 8001afc:	f3af 8000 	nop.w
 8001b00:	33333333 	.word	0x33333333
 8001b04:	3fe33333 	.word	0x3fe33333
 8001b08:	40002800 	.word	0x40002800
 8001b0c:	4f000000 	.word	0x4f000000
 8001b10:	51eb851f 	.word	0x51eb851f
 8001b14:	40590000 	.word	0x40590000

08001b18 <HAL_UART_TxCpltCallback>:
 * @note   This example shows a simple way to report end of DMA Tx transfer, and
 *         you can add your own implementation.
 * @retval None
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001b20:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <HAL_UART_TxCpltCallback+0x1c>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	200003c0 	.word	0x200003c0

08001b38 <HAL_UART_RxCpltCallback>:
 * @note   This example shows a simple way to report end of DMA Rx transfer, and
 *         you can add your own implementation.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	UartReady = SET;
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <HAL_UART_RxCpltCallback+0x1c>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	701a      	strb	r2, [r3, #0]
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	200003c0 	.word	0x200003c0

08001b58 <HAL_UART_ErrorCallback>:
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	printf("ERROR : Callback\r\n");
 8001b60:	4832      	ldr	r0, [pc, #200]	@ (8001c2c <HAL_UART_ErrorCallback+0xd4>)
 8001b62:	f005 fcdf 	bl	8007524 <puts>
	// Get the specific error code using HAL_UART_GetError()
	uint32_t error_code = HAL_UART_GetError(UartHandle);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f003 fa30 	bl	8004fcc <HAL_UART_GetError>
 8001b6c:	60f8      	str	r0, [r7, #12]

	// Print informative message based on the error code
	switch (error_code) {
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	d83c      	bhi.n	8001bf0 <HAL_UART_ErrorCallback+0x98>
 8001b76:	a201      	add	r2, pc, #4	@ (adr r2, 8001b7c <HAL_UART_ErrorCallback+0x24>)
 8001b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7c:	08001bcd 	.word	0x08001bcd
 8001b80:	08001bc5 	.word	0x08001bc5
 8001b84:	08001bf1 	.word	0x08001bf1
 8001b88:	08001bbd 	.word	0x08001bbd
 8001b8c:	08001bf1 	.word	0x08001bf1
 8001b90:	08001bf1 	.word	0x08001bf1
 8001b94:	08001bf1 	.word	0x08001bf1
 8001b98:	08001bd5 	.word	0x08001bd5
 8001b9c:	08001bf1 	.word	0x08001bf1
 8001ba0:	08001bf1 	.word	0x08001bf1
 8001ba4:	08001bf1 	.word	0x08001bf1
 8001ba8:	08001bf1 	.word	0x08001bf1
 8001bac:	08001bf1 	.word	0x08001bf1
 8001bb0:	08001bf1 	.word	0x08001bf1
 8001bb4:	08001bf1 	.word	0x08001bf1
 8001bb8:	08001be9 	.word	0x08001be9
	case HAL_UART_ERROR_FE:
		printf("Error: Frame Error\r\n");
 8001bbc:	481c      	ldr	r0, [pc, #112]	@ (8001c30 <HAL_UART_ErrorCallback+0xd8>)
 8001bbe:	f005 fcb1 	bl	8007524 <puts>
		break;
 8001bc2:	e02e      	b.n	8001c22 <HAL_UART_ErrorCallback+0xca>
	case HAL_UART_ERROR_NE:
		printf("Error: Noise Error\r\n");
 8001bc4:	481b      	ldr	r0, [pc, #108]	@ (8001c34 <HAL_UART_ErrorCallback+0xdc>)
 8001bc6:	f005 fcad 	bl	8007524 <puts>

		break;
 8001bca:	e02a      	b.n	8001c22 <HAL_UART_ErrorCallback+0xca>
	case HAL_UART_ERROR_PE:
		printf("Error: Parity Error\r\n");
 8001bcc:	481a      	ldr	r0, [pc, #104]	@ (8001c38 <HAL_UART_ErrorCallback+0xe0>)
 8001bce:	f005 fca9 	bl	8007524 <puts>
		break;
 8001bd2:	e026      	b.n	8001c22 <HAL_UART_ErrorCallback+0xca>
		//	case HAL_UART_ERROR_BE:
		//		USART1_printf("Error: Break Error\r\n");
		//		break;
	case HAL_UART_ERROR_ORE:
		printf("Error: Overrun Error\r\n");
 8001bd4:	4819      	ldr	r0, [pc, #100]	@ (8001c3c <HAL_UART_ErrorCallback+0xe4>)
 8001bd6:	f005 fca5 	bl	8007524 <puts>
		HAL_UART_AbortReceive(&huart1);
 8001bda:	4819      	ldr	r0, [pc, #100]	@ (8001c40 <HAL_UART_ErrorCallback+0xe8>)
 8001bdc:	f002 fe3a 	bl	8004854 <HAL_UART_AbortReceive>
		HAL_UART_AbortTransmit(&huart1);
 8001be0:	4817      	ldr	r0, [pc, #92]	@ (8001c40 <HAL_UART_ErrorCallback+0xe8>)
 8001be2:	f002 fdcf 	bl	8004784 <HAL_UART_AbortTransmit>

		break;
 8001be6:	e01c      	b.n	8001c22 <HAL_UART_ErrorCallback+0xca>
	case HAL_UART_ERROR_DMA:
		printf("Error: DMA Transfer Error\r\n");
 8001be8:	4816      	ldr	r0, [pc, #88]	@ (8001c44 <HAL_UART_ErrorCallback+0xec>)
 8001bea:	f005 fc9b 	bl	8007524 <puts>
		break;
 8001bee:	e018      	b.n	8001c22 <HAL_UART_ErrorCallback+0xca>
		//	case HAL_UART_ERROR_TIMEOUT:
		//		USART1_printf("Error: Timeout Error\r\n");
		//		break;
	default:
		printf("Error: Unknown Error (%lu)\r\n", error_code);
 8001bf0:	68f9      	ldr	r1, [r7, #12]
 8001bf2:	4815      	ldr	r0, [pc, #84]	@ (8001c48 <HAL_UART_ErrorCallback+0xf0>)
 8001bf4:	f005 fc2e 	bl	8007454 <iprintf>
		// Additionally, check for specific error bits in the register (if applicable)
		if (READ_BIT(UartHandle->Instance->ISR, USART_ISR_RXNE) == RESET) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <HAL_UART_ErrorCallback+0xb4>
			printf("Possible cause: Receive Noise Error\r\n");
 8001c06:	4811      	ldr	r0, [pc, #68]	@ (8001c4c <HAL_UART_ErrorCallback+0xf4>)
 8001c08:	f005 fc8c 	bl	8007524 <puts>
		}
		if (READ_BIT(UartHandle->Instance->ISR, USART_ISR_TC) == RESET) {
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <HAL_UART_ErrorCallback+0xca>
			printf("Possible cause: Transmission Timeout\r\n");
 8001c1a:	480d      	ldr	r0, [pc, #52]	@ (8001c50 <HAL_UART_ErrorCallback+0xf8>)
 8001c1c:	f005 fc82 	bl	8007524 <puts>
		}
	}
	//Error_Handler();
}
 8001c20:	e7ff      	b.n	8001c22 <HAL_UART_ErrorCallback+0xca>
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	0800a154 	.word	0x0800a154
 8001c30:	0800a168 	.word	0x0800a168
 8001c34:	0800a17c 	.word	0x0800a17c
 8001c38:	0800a190 	.word	0x0800a190
 8001c3c:	0800a1a8 	.word	0x0800a1a8
 8001c40:	20000220 	.word	0x20000220
 8001c44:	0800a1c0 	.word	0x0800a1c0
 8001c48:	0800a1dc 	.word	0x0800a1dc
 8001c4c:	0800a1fc 	.word	0x0800a1fc
 8001c50:	0800a224 	.word	0x0800a224

08001c54 <__io_putchar>:
 * @return The character that was transmitted (always the same as the input).
 * @note This function likely uses the STM32 HAL to transmit a single byte
 *        through UART2. It's a low-level function for character output.
 */
int __io_putchar(int ch)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001c5c:	1d39      	adds	r1, r7, #4
 8001c5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c62:	2201      	movs	r2, #1
 8001c64:	4803      	ldr	r0, [pc, #12]	@ (8001c74 <__io_putchar+0x20>)
 8001c66:	f002 fb73 	bl	8004350 <HAL_UART_Transmit>
	return ch;
 8001c6a:	687b      	ldr	r3, [r7, #4]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200002a8 	.word	0x200002a8

08001c78 <__io_getchar>:
 * @note This function likely uses the STM32 HAL to receive a single byte
 *        through UART2. It's a low-level function for character input.
 *        Waits until a character is received before returning.
 */
int __io_getchar(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
	int ch = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
	while(!__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE));
 8001c82:	bf00      	nop
 8001c84:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <__io_getchar+0x34>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0320 	and.w	r3, r3, #32
 8001c8e:	2b20      	cmp	r3, #32
 8001c90:	d1f8      	bne.n	8001c84 <__io_getchar+0xc>
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001c92:	1d39      	adds	r1, r7, #4
 8001c94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4804      	ldr	r0, [pc, #16]	@ (8001cac <__io_getchar+0x34>)
 8001c9c:	f002 fbe1 	bl	8004462 <HAL_UART_Receive>
	return ch;
 8001ca0:	687b      	ldr	r3, [r7, #4]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200002a8 	.word	0x200002a8

08001cb0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <Error_Handler+0x8>

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <HAL_MspInit+0x44>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001d00 <HAL_MspInit+0x44>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cce:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <HAL_MspInit+0x44>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <HAL_MspInit+0x44>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cde:	4a08      	ldr	r2, [pc, #32]	@ (8001d00 <HAL_MspInit+0x44>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_MspInit+0x44>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000

08001d04 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b098      	sub	sp, #96	@ 0x60
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2254      	movs	r2, #84	@ 0x54
 8001d12:	2100      	movs	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f005 fd19 	bl	800774c <memset>
  if(hrtc->Instance==RTC)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d5c <HAL_RTC_MspInit+0x58>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d117      	bne.n	8001d54 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001d24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d28:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001d2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	4618      	mov	r0, r3
 8001d36:	f001 fea7 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001d40:	f7ff ffb6 	bl	8001cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d44:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_RTC_MspInit+0x5c>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d4a:	4a05      	ldr	r2, [pc, #20]	@ (8001d60 <HAL_RTC_MspInit+0x5c>)
 8001d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3760      	adds	r7, #96	@ 0x60
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40002800 	.word	0x40002800
 8001d60:	40021000 	.word	0x40021000

08001d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b0a0      	sub	sp, #128	@ 0x80
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d7c:	f107 0318 	add.w	r3, r7, #24
 8001d80:	2254      	movs	r2, #84	@ 0x54
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f005 fce1 	bl	800774c <memset>
  if(huart->Instance==USART1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a74      	ldr	r2, [pc, #464]	@ (8001f60 <HAL_UART_MspInit+0x1fc>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	f040 8093 	bne.w	8001ebc <HAL_UART_MspInit+0x158>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d96:	2301      	movs	r3, #1
 8001d98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9e:	f107 0318 	add.w	r3, r7, #24
 8001da2:	4618      	mov	r0, r3
 8001da4:	f001 fe70 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001dae:	f7ff ff7f 	bl	8001cb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001db2:	4b6c      	ldr	r3, [pc, #432]	@ (8001f64 <HAL_UART_MspInit+0x200>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db6:	4a6b      	ldr	r2, [pc, #428]	@ (8001f64 <HAL_UART_MspInit+0x200>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dbe:	4b69      	ldr	r3, [pc, #420]	@ (8001f64 <HAL_UART_MspInit+0x200>)
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dca:	4b66      	ldr	r3, [pc, #408]	@ (8001f64 <HAL_UART_MspInit+0x200>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dce:	4a65      	ldr	r2, [pc, #404]	@ (8001f64 <HAL_UART_MspInit+0x200>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dd6:	4b63      	ldr	r3, [pc, #396]	@ (8001f64 <HAL_UART_MspInit+0x200>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001de2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001de6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001df4:	2307      	movs	r3, #7
 8001df6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e02:	f000 fe13 	bl	8002a2c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001e06:	4b58      	ldr	r3, [pc, #352]	@ (8001f68 <HAL_UART_MspInit+0x204>)
 8001e08:	4a58      	ldr	r2, [pc, #352]	@ (8001f6c <HAL_UART_MspInit+0x208>)
 8001e0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8001e0c:	4b56      	ldr	r3, [pc, #344]	@ (8001f68 <HAL_UART_MspInit+0x204>)
 8001e0e:	2202      	movs	r2, #2
 8001e10:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e12:	4b55      	ldr	r3, [pc, #340]	@ (8001f68 <HAL_UART_MspInit+0x204>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e18:	4b53      	ldr	r3, [pc, #332]	@ (8001f68 <HAL_UART_MspInit+0x204>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e1e:	4b52      	ldr	r3, [pc, #328]	@ (8001f68 <HAL_UART_MspInit+0x204>)
 8001e20:	2280      	movs	r2, #128	@ 0x80
 8001e22:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e24:	4b50      	ldr	r3, [pc, #320]	@ (8001f68 <HAL_UART_MspInit+0x204>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8001f68 <HAL_UART_MspInit+0x204>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001e30:	4b4d      	ldr	r3, [pc, #308]	@ (8001f68 <HAL_UART_MspInit+0x204>)
 8001e32:	2220      	movs	r2, #32
 8001e34:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e36:	4b4c      	ldr	r3, [pc, #304]	@ (8001f68 <HAL_UART_MspInit+0x204>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e3c:	484a      	ldr	r0, [pc, #296]	@ (8001f68 <HAL_UART_MspInit+0x204>)
 8001e3e:	f000 fb73 	bl	8002528 <HAL_DMA_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8001e48:	f7ff ff32 	bl	8001cb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a46      	ldr	r2, [pc, #280]	@ (8001f68 <HAL_UART_MspInit+0x204>)
 8001e50:	675a      	str	r2, [r3, #116]	@ 0x74
 8001e52:	4a45      	ldr	r2, [pc, #276]	@ (8001f68 <HAL_UART_MspInit+0x204>)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001e58:	4b45      	ldr	r3, [pc, #276]	@ (8001f70 <HAL_UART_MspInit+0x20c>)
 8001e5a:	4a46      	ldr	r2, [pc, #280]	@ (8001f74 <HAL_UART_MspInit+0x210>)
 8001e5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8001e5e:	4b44      	ldr	r3, [pc, #272]	@ (8001f70 <HAL_UART_MspInit+0x20c>)
 8001e60:	2202      	movs	r2, #2
 8001e62:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e64:	4b42      	ldr	r3, [pc, #264]	@ (8001f70 <HAL_UART_MspInit+0x20c>)
 8001e66:	2210      	movs	r2, #16
 8001e68:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6a:	4b41      	ldr	r3, [pc, #260]	@ (8001f70 <HAL_UART_MspInit+0x20c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e70:	4b3f      	ldr	r3, [pc, #252]	@ (8001f70 <HAL_UART_MspInit+0x20c>)
 8001e72:	2280      	movs	r2, #128	@ 0x80
 8001e74:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e76:	4b3e      	ldr	r3, [pc, #248]	@ (8001f70 <HAL_UART_MspInit+0x20c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e7c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f70 <HAL_UART_MspInit+0x20c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e82:	4b3b      	ldr	r3, [pc, #236]	@ (8001f70 <HAL_UART_MspInit+0x20c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e88:	4b39      	ldr	r3, [pc, #228]	@ (8001f70 <HAL_UART_MspInit+0x20c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e8e:	4838      	ldr	r0, [pc, #224]	@ (8001f70 <HAL_UART_MspInit+0x20c>)
 8001e90:	f000 fb4a 	bl	8002528 <HAL_DMA_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001e9a:	f7ff ff09 	bl	8001cb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a33      	ldr	r2, [pc, #204]	@ (8001f70 <HAL_UART_MspInit+0x20c>)
 8001ea2:	671a      	str	r2, [r3, #112]	@ 0x70
 8001ea4:	4a32      	ldr	r2, [pc, #200]	@ (8001f70 <HAL_UART_MspInit+0x20c>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	2025      	movs	r0, #37	@ 0x25
 8001eb0:	f000 fb03 	bl	80024ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001eb4:	2025      	movs	r0, #37	@ 0x25
 8001eb6:	f000 fb1c 	bl	80024f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001eba:	e04d      	b.n	8001f58 <HAL_UART_MspInit+0x1f4>
  else if(huart->Instance==USART2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8001f78 <HAL_UART_MspInit+0x214>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d148      	bne.n	8001f58 <HAL_UART_MspInit+0x1f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ece:	f107 0318 	add.w	r3, r7, #24
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f001 fdd8 	bl	8003a88 <HAL_RCCEx_PeriphCLKConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8001ede:	f7ff fee7 	bl	8001cb0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ee2:	4b20      	ldr	r3, [pc, #128]	@ (8001f64 <HAL_UART_MspInit+0x200>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f64 <HAL_UART_MspInit+0x200>)
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eee:	4b1d      	ldr	r3, [pc, #116]	@ (8001f64 <HAL_UART_MspInit+0x200>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <HAL_UART_MspInit+0x200>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efe:	4a19      	ldr	r2, [pc, #100]	@ (8001f64 <HAL_UART_MspInit+0x200>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f06:	4b17      	ldr	r3, [pc, #92]	@ (8001f64 <HAL_UART_MspInit+0x200>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001f12:	2304      	movs	r3, #4
 8001f14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f22:	2307      	movs	r3, #7
 8001f24:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f30:	f000 fd7c 	bl	8002a2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001f34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001f46:	2303      	movs	r3, #3
 8001f48:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001f4a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f4e:	4619      	mov	r1, r3
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f54:	f000 fd6a 	bl	8002a2c <HAL_GPIO_Init>
}
 8001f58:	bf00      	nop
 8001f5a:	3780      	adds	r7, #128	@ 0x80
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40013800 	.word	0x40013800
 8001f64:	40021000 	.word	0x40021000
 8001f68:	20000330 	.word	0x20000330
 8001f6c:	40020058 	.word	0x40020058
 8001f70:	20000378 	.word	0x20000378
 8001f74:	40020044 	.word	0x40020044
 8001f78:	40004400 	.word	0x40004400

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <NMI_Handler+0x4>

08001f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <MemManage_Handler+0x4>

08001f94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <BusFault_Handler+0x4>

08001f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <UsageFault_Handler+0x4>

08001fa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fd2:	f000 f977 	bl	80022c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
	...

08001fdc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001fe0:	4802      	ldr	r0, [pc, #8]	@ (8001fec <DMA1_Channel4_IRQHandler+0x10>)
 8001fe2:	f000 fc38 	bl	8002856 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000378 	.word	0x20000378

08001ff0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <DMA1_Channel5_IRQHandler+0x10>)
 8001ff6:	f000 fc2e 	bl	8002856 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000330 	.word	0x20000330

08002004 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <USART1_IRQHandler+0x10>)
 800200a:	f002 fcd5 	bl	80049b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000220 	.word	0x20000220

08002018 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return 1;
 800201c:	2301      	movs	r3, #1
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <_kill>:

int _kill(int pid, int sig)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002032:	f005 fbef 	bl	8007814 <__errno>
 8002036:	4603      	mov	r3, r0
 8002038:	2216      	movs	r2, #22
 800203a:	601a      	str	r2, [r3, #0]
  return -1;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_exit>:

void _exit (int status)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002050:	f04f 31ff 	mov.w	r1, #4294967295
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ffe7 	bl	8002028 <_kill>
  while (1) {}    /* Make sure we hang here */
 800205a:	bf00      	nop
 800205c:	e7fd      	b.n	800205a <_exit+0x12>

0800205e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e00a      	b.n	8002086 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002070:	f7ff fe02 	bl	8001c78 <__io_getchar>
 8002074:	4601      	mov	r1, r0
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	60ba      	str	r2, [r7, #8]
 800207c:	b2ca      	uxtb	r2, r1
 800207e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	429a      	cmp	r2, r3
 800208c:	dbf0      	blt.n	8002070 <_read+0x12>
  }

  return len;
 800208e:	687b      	ldr	r3, [r7, #4]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	e009      	b.n	80020be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	60ba      	str	r2, [r7, #8]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff fdce 	bl	8001c54 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dbf1      	blt.n	80020aa <_write+0x12>
  }
  return len;
 80020c6:	687b      	ldr	r3, [r7, #4]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_close>:

int _close(int file)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020f8:	605a      	str	r2, [r3, #4]
  return 0;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_isatty>:

int _isatty(int file)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002110:	2301      	movs	r3, #1
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800211e:	b480      	push	{r7}
 8002120:	b085      	sub	sp, #20
 8002122:	af00      	add	r7, sp, #0
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002140:	4a14      	ldr	r2, [pc, #80]	@ (8002194 <_sbrk+0x5c>)
 8002142:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <_sbrk+0x60>)
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800214c:	4b13      	ldr	r3, [pc, #76]	@ (800219c <_sbrk+0x64>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <_sbrk+0x64>)
 8002156:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <_sbrk+0x68>)
 8002158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <_sbrk+0x64>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	429a      	cmp	r2, r3
 8002166:	d207      	bcs.n	8002178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002168:	f005 fb54 	bl	8007814 <__errno>
 800216c:	4603      	mov	r3, r0
 800216e:	220c      	movs	r2, #12
 8002170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002172:	f04f 33ff 	mov.w	r3, #4294967295
 8002176:	e009      	b.n	800218c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002178:	4b08      	ldr	r3, [pc, #32]	@ (800219c <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800217e:	4b07      	ldr	r3, [pc, #28]	@ (800219c <_sbrk+0x64>)
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	4a05      	ldr	r2, [pc, #20]	@ (800219c <_sbrk+0x64>)
 8002188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20010000 	.word	0x20010000
 8002198:	00000400 	.word	0x00000400
 800219c:	200005fc 	.word	0x200005fc
 80021a0:	20000750 	.word	0x20000750

080021a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <SystemInit+0x20>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ae:	4a05      	ldr	r2, [pc, #20]	@ (80021c4 <SystemInit+0x20>)
 80021b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002200 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021cc:	f7ff ffea 	bl	80021a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d0:	480c      	ldr	r0, [pc, #48]	@ (8002204 <LoopForever+0x6>)
  ldr r1, =_edata
 80021d2:	490d      	ldr	r1, [pc, #52]	@ (8002208 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021d4:	4a0d      	ldr	r2, [pc, #52]	@ (800220c <LoopForever+0xe>)
  movs r3, #0
 80021d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d8:	e002      	b.n	80021e0 <LoopCopyDataInit>

080021da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021de:	3304      	adds	r3, #4

080021e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e4:	d3f9      	bcc.n	80021da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002210 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002214 <LoopForever+0x16>)
  movs r3, #0
 80021ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ec:	e001      	b.n	80021f2 <LoopFillZerobss>

080021ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f0:	3204      	adds	r2, #4

080021f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f4:	d3fb      	bcc.n	80021ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021f6:	f005 fb13 	bl	8007820 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021fa:	f7fe ff03 	bl	8001004 <main>

080021fe <LoopForever>:

LoopForever:
    b LoopForever
 80021fe:	e7fe      	b.n	80021fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002200:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002208:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800220c:	0800a724 	.word	0x0800a724
  ldr r2, =_sbss
 8002210:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002214:	20000750 	.word	0x20000750

08002218 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002218:	e7fe      	b.n	8002218 <ADC1_IRQHandler>

0800221a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002224:	2003      	movs	r0, #3
 8002226:	f000 f93d 	bl	80024a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800222a:	200f      	movs	r0, #15
 800222c:	f000 f80e 	bl	800224c <HAL_InitTick>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	71fb      	strb	r3, [r7, #7]
 800223a:	e001      	b.n	8002240 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800223c:	f7ff fd3e 	bl	8001cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002240:	79fb      	ldrb	r3, [r7, #7]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002258:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <HAL_InitTick+0x6c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d023      	beq.n	80022a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002260:	4b16      	ldr	r3, [pc, #88]	@ (80022bc <HAL_InitTick+0x70>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b14      	ldr	r3, [pc, #80]	@ (80022b8 <HAL_InitTick+0x6c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	4619      	mov	r1, r3
 800226a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800226e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002272:	fbb2 f3f3 	udiv	r3, r2, r3
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f949 	bl	800250e <HAL_SYSTICK_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10f      	bne.n	80022a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b0f      	cmp	r3, #15
 8002286:	d809      	bhi.n	800229c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002288:	2200      	movs	r2, #0
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	f04f 30ff 	mov.w	r0, #4294967295
 8002290:	f000 f913 	bl	80024ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002294:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <HAL_InitTick+0x74>)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e007      	b.n	80022ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e004      	b.n	80022ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	e001      	b.n	80022ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000014 	.word	0x20000014
 80022bc:	2000000c 	.word	0x2000000c
 80022c0:	20000010 	.word	0x20000010

080022c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <HAL_IncTick+0x20>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_IncTick+0x24>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a04      	ldr	r2, [pc, #16]	@ (80022e8 <HAL_IncTick+0x24>)
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000014 	.word	0x20000014
 80022e8:	20000600 	.word	0x20000600

080022ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return uwTick;
 80022f0:	4b03      	ldr	r3, [pc, #12]	@ (8002300 <HAL_GetTick+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000600 	.word	0x20000600

08002304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002320:	4013      	ands	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800232c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002336:	4a04      	ldr	r2, [pc, #16]	@ (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60d3      	str	r3, [r2, #12]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002350:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <__NVIC_GetPriorityGrouping+0x18>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	f003 0307 	and.w	r3, r3, #7
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db0b      	blt.n	8002392 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	4907      	ldr	r1, [pc, #28]	@ (80023a0 <__NVIC_EnableIRQ+0x38>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	2001      	movs	r0, #1
 800238a:	fa00 f202 	lsl.w	r2, r0, r2
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000e100 	.word	0xe000e100

080023a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db0a      	blt.n	80023ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	490c      	ldr	r1, [pc, #48]	@ (80023f0 <__NVIC_SetPriority+0x4c>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	440b      	add	r3, r1
 80023c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023cc:	e00a      	b.n	80023e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4908      	ldr	r1, [pc, #32]	@ (80023f4 <__NVIC_SetPriority+0x50>)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3b04      	subs	r3, #4
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	440b      	add	r3, r1
 80023e2:	761a      	strb	r2, [r3, #24]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	@ 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f1c3 0307 	rsb	r3, r3, #7
 8002412:	2b04      	cmp	r3, #4
 8002414:	bf28      	it	cs
 8002416:	2304      	movcs	r3, #4
 8002418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3304      	adds	r3, #4
 800241e:	2b06      	cmp	r3, #6
 8002420:	d902      	bls.n	8002428 <NVIC_EncodePriority+0x30>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3b03      	subs	r3, #3
 8002426:	e000      	b.n	800242a <NVIC_EncodePriority+0x32>
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002440:	f04f 31ff 	mov.w	r1, #4294967295
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	43d9      	mvns	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	4313      	orrs	r3, r2
         );
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	@ 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002470:	d301      	bcc.n	8002476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002472:	2301      	movs	r3, #1
 8002474:	e00f      	b.n	8002496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002476:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <SysTick_Config+0x40>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247e:	210f      	movs	r1, #15
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f7ff ff8e 	bl	80023a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <SysTick_Config+0x40>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248e:	4b04      	ldr	r3, [pc, #16]	@ (80024a0 <SysTick_Config+0x40>)
 8002490:	2207      	movs	r2, #7
 8002492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	e000e010 	.word	0xe000e010

080024a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ff29 	bl	8002304 <__NVIC_SetPriorityGrouping>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024cc:	f7ff ff3e 	bl	800234c <__NVIC_GetPriorityGrouping>
 80024d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	6978      	ldr	r0, [r7, #20]
 80024d8:	f7ff ff8e 	bl	80023f8 <NVIC_EncodePriority>
 80024dc:	4602      	mov	r2, r0
 80024de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024e2:	4611      	mov	r1, r2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff5d 	bl	80023a4 <__NVIC_SetPriority>
}
 80024ea:	bf00      	nop
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff ff31 	bl	8002368 <__NVIC_EnableIRQ>
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ffa2 	bl	8002460 <SysTick_Config>
 800251c:	4603      	mov	r3, r0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e098      	b.n	800266c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	4b4d      	ldr	r3, [pc, #308]	@ (8002678 <HAL_DMA_Init+0x150>)
 8002542:	429a      	cmp	r2, r3
 8002544:	d80f      	bhi.n	8002566 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	461a      	mov	r2, r3
 800254c:	4b4b      	ldr	r3, [pc, #300]	@ (800267c <HAL_DMA_Init+0x154>)
 800254e:	4413      	add	r3, r2
 8002550:	4a4b      	ldr	r2, [pc, #300]	@ (8002680 <HAL_DMA_Init+0x158>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	009a      	lsls	r2, r3, #2
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a48      	ldr	r2, [pc, #288]	@ (8002684 <HAL_DMA_Init+0x15c>)
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
 8002564:	e00e      	b.n	8002584 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4b46      	ldr	r3, [pc, #280]	@ (8002688 <HAL_DMA_Init+0x160>)
 800256e:	4413      	add	r3, r2
 8002570:	4a43      	ldr	r2, [pc, #268]	@ (8002680 <HAL_DMA_Init+0x158>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	009a      	lsls	r2, r3, #2
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a42      	ldr	r2, [pc, #264]	@ (800268c <HAL_DMA_Init+0x164>)
 8002582:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800259a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800259e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1b      	ldr	r3, [r3, #32]
 80025c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025de:	d039      	beq.n	8002654 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e4:	4a27      	ldr	r2, [pc, #156]	@ (8002684 <HAL_DMA_Init+0x15c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d11a      	bne.n	8002620 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80025ea:	4b29      	ldr	r3, [pc, #164]	@ (8002690 <HAL_DMA_Init+0x168>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f003 031c 	and.w	r3, r3, #28
 80025f6:	210f      	movs	r1, #15
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	4924      	ldr	r1, [pc, #144]	@ (8002690 <HAL_DMA_Init+0x168>)
 8002600:	4013      	ands	r3, r2
 8002602:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002604:	4b22      	ldr	r3, [pc, #136]	@ (8002690 <HAL_DMA_Init+0x168>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002610:	f003 031c 	and.w	r3, r3, #28
 8002614:	fa01 f303 	lsl.w	r3, r1, r3
 8002618:	491d      	ldr	r1, [pc, #116]	@ (8002690 <HAL_DMA_Init+0x168>)
 800261a:	4313      	orrs	r3, r2
 800261c:	600b      	str	r3, [r1, #0]
 800261e:	e019      	b.n	8002654 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002620:	4b1c      	ldr	r3, [pc, #112]	@ (8002694 <HAL_DMA_Init+0x16c>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002628:	f003 031c 	and.w	r3, r3, #28
 800262c:	210f      	movs	r1, #15
 800262e:	fa01 f303 	lsl.w	r3, r1, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	4917      	ldr	r1, [pc, #92]	@ (8002694 <HAL_DMA_Init+0x16c>)
 8002636:	4013      	ands	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800263a:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <HAL_DMA_Init+0x16c>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002646:	f003 031c 	and.w	r3, r3, #28
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	4911      	ldr	r1, [pc, #68]	@ (8002694 <HAL_DMA_Init+0x16c>)
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40020407 	.word	0x40020407
 800267c:	bffdfff8 	.word	0xbffdfff8
 8002680:	cccccccd 	.word	0xcccccccd
 8002684:	40020000 	.word	0x40020000
 8002688:	bffdfbf8 	.word	0xbffdfbf8
 800268c:	40020400 	.word	0x40020400
 8002690:	400200a8 	.word	0x400200a8
 8002694:	400204a8 	.word	0x400204a8

08002698 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	607a      	str	r2, [r7, #4]
 80026a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d101      	bne.n	80026b8 <HAL_DMA_Start_IT+0x20>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e04b      	b.n	8002750 <HAL_DMA_Start_IT+0xb8>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d13a      	bne.n	8002742 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0201 	bic.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f96b 	bl	80029cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 020e 	orr.w	r2, r2, #14
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	e00f      	b.n	8002730 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0204 	bic.w	r2, r2, #4
 800271e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 020a 	orr.w	r2, r2, #10
 800272e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e005      	b.n	800274e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800274a:	2302      	movs	r3, #2
 800274c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800274e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d008      	beq.n	8002782 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2204      	movs	r2, #4
 8002774:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e022      	b.n	80027c8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 020e 	bic.w	r2, r2, #14
 8002790:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a6:	f003 021c 	and.w	r2, r3, #28
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f202 	lsl.w	r2, r1, r2
 80027b4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d005      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2204      	movs	r2, #4
 80027f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e029      	b.n	800284c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 020e 	bic.w	r2, r2, #14
 8002806:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281c:	f003 021c 	and.w	r2, r3, #28
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
    }
  }
  return status;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002872:	f003 031c 	and.w	r3, r3, #28
 8002876:	2204      	movs	r2, #4
 8002878:	409a      	lsls	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4013      	ands	r3, r2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d026      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x7a>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d021      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b00      	cmp	r3, #0
 8002898:	d107      	bne.n	80028aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 0204 	bic.w	r2, r2, #4
 80028a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f003 021c 	and.w	r2, r3, #28
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	2104      	movs	r1, #4
 80028b8:	fa01 f202 	lsl.w	r2, r1, r2
 80028bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d071      	beq.n	80029aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028ce:	e06c      	b.n	80029aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d4:	f003 031c 	and.w	r3, r3, #28
 80028d8:	2202      	movs	r2, #2
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d02e      	beq.n	8002942 <HAL_DMA_IRQHandler+0xec>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d029      	beq.n	8002942 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10b      	bne.n	8002914 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 020a 	bic.w	r2, r2, #10
 800290a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002918:	f003 021c 	and.w	r2, r3, #28
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002920:	2102      	movs	r1, #2
 8002922:	fa01 f202 	lsl.w	r2, r1, r2
 8002926:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	2b00      	cmp	r3, #0
 8002936:	d038      	beq.n	80029aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002940:	e033      	b.n	80029aa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002946:	f003 031c 	and.w	r3, r3, #28
 800294a:	2208      	movs	r2, #8
 800294c:	409a      	lsls	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4013      	ands	r3, r2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d02a      	beq.n	80029ac <HAL_DMA_IRQHandler+0x156>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d025      	beq.n	80029ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 020e 	bic.w	r2, r2, #14
 800296e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002974:	f003 021c 	and.w	r2, r3, #28
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297c:	2101      	movs	r1, #1
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029aa:	bf00      	nop
 80029ac:	bf00      	nop
}
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	f003 021c 	and.w	r2, r3, #28
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	2101      	movs	r1, #1
 80029e8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d108      	bne.n	8002a10 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a0e:	e007      	b.n	8002a20 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68ba      	ldr	r2, [r7, #8]
 8002a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	60da      	str	r2, [r3, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3a:	e148      	b.n	8002cce <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2101      	movs	r1, #1
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 813a 	beq.w	8002cc8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d005      	beq.n	8002a6c <HAL_GPIO_Init+0x40>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d130      	bne.n	8002ace <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	2203      	movs	r2, #3
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	091b      	lsrs	r3, r3, #4
 8002ab8:	f003 0201 	and.w	r2, r3, #1
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d017      	beq.n	8002b0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d123      	bne.n	8002b5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	08da      	lsrs	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3208      	adds	r2, #8
 8002b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	220f      	movs	r2, #15
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	08da      	lsrs	r2, r3, #3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3208      	adds	r2, #8
 8002b58:	6939      	ldr	r1, [r7, #16]
 8002b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	2203      	movs	r2, #3
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	4013      	ands	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0203 	and.w	r2, r3, #3
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8094 	beq.w	8002cc8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba0:	4b52      	ldr	r3, [pc, #328]	@ (8002cec <HAL_GPIO_Init+0x2c0>)
 8002ba2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ba4:	4a51      	ldr	r2, [pc, #324]	@ (8002cec <HAL_GPIO_Init+0x2c0>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bac:	4b4f      	ldr	r3, [pc, #316]	@ (8002cec <HAL_GPIO_Init+0x2c0>)
 8002bae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bb8:	4a4d      	ldr	r2, [pc, #308]	@ (8002cf0 <HAL_GPIO_Init+0x2c4>)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	089b      	lsrs	r3, r3, #2
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	220f      	movs	r2, #15
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002be2:	d00d      	beq.n	8002c00 <HAL_GPIO_Init+0x1d4>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a43      	ldr	r2, [pc, #268]	@ (8002cf4 <HAL_GPIO_Init+0x2c8>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d007      	beq.n	8002bfc <HAL_GPIO_Init+0x1d0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a42      	ldr	r2, [pc, #264]	@ (8002cf8 <HAL_GPIO_Init+0x2cc>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d101      	bne.n	8002bf8 <HAL_GPIO_Init+0x1cc>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e004      	b.n	8002c02 <HAL_GPIO_Init+0x1d6>
 8002bf8:	2307      	movs	r3, #7
 8002bfa:	e002      	b.n	8002c02 <HAL_GPIO_Init+0x1d6>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_GPIO_Init+0x1d6>
 8002c00:	2300      	movs	r3, #0
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	f002 0203 	and.w	r2, r2, #3
 8002c08:	0092      	lsls	r2, r2, #2
 8002c0a:	4093      	lsls	r3, r2
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c12:	4937      	ldr	r1, [pc, #220]	@ (8002cf0 <HAL_GPIO_Init+0x2c4>)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c20:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c44:	4a2d      	ldr	r2, [pc, #180]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4013      	ands	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c6e:	4a23      	ldr	r2, [pc, #140]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c74:	4b21      	ldr	r3, [pc, #132]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	4013      	ands	r3, r2
 8002c82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c98:	4a18      	ldr	r2, [pc, #96]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c9e:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4013      	ands	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cc2:	4a0e      	ldr	r2, [pc, #56]	@ (8002cfc <HAL_GPIO_Init+0x2d0>)
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f47f aeaf 	bne.w	8002a3c <HAL_GPIO_Init+0x10>
  }
}
 8002cde:	bf00      	nop
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	48000400 	.word	0x48000400
 8002cf8:	48000800 	.word	0x48000800
 8002cfc:	40010400 	.word	0x40010400

08002d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d34:	4b05      	ldr	r3, [pc, #20]	@ (8002d4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a04      	ldr	r2, [pc, #16]	@ (8002d4c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40007000 	.word	0x40007000

08002d50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d54:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40007000 	.word	0x40007000

08002d6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d7a:	d130      	bne.n	8002dde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d7c:	4b23      	ldr	r3, [pc, #140]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d88:	d038      	beq.n	8002dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d8a:	4b20      	ldr	r3, [pc, #128]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d92:	4a1e      	ldr	r2, [pc, #120]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2232      	movs	r2, #50	@ 0x32
 8002da0:	fb02 f303 	mul.w	r3, r2, r3
 8002da4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	0c9b      	lsrs	r3, r3, #18
 8002dac:	3301      	adds	r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002db0:	e002      	b.n	8002db8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002db8:	4b14      	ldr	r3, [pc, #80]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc4:	d102      	bne.n	8002dcc <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f2      	bne.n	8002db2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd8:	d110      	bne.n	8002dfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e00f      	b.n	8002dfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dde:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002de6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dea:	d007      	beq.n	8002dfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002dec:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002df4:	4a05      	ldr	r2, [pc, #20]	@ (8002e0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40007000 	.word	0x40007000
 8002e10:	2000000c 	.word	0x2000000c
 8002e14:	431bde83 	.word	0x431bde83

08002e18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d102      	bne.n	8002e2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f000 bc02 	b.w	8003630 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e2c:	4b96      	ldr	r3, [pc, #600]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e36:	4b94      	ldr	r3, [pc, #592]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0310 	and.w	r3, r3, #16
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80e4 	beq.w	8003016 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d007      	beq.n	8002e64 <HAL_RCC_OscConfig+0x4c>
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b0c      	cmp	r3, #12
 8002e58:	f040 808b 	bne.w	8002f72 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 8087 	bne.w	8002f72 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e64:	4b88      	ldr	r3, [pc, #544]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_OscConfig+0x64>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e3d9      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1a      	ldr	r2, [r3, #32]
 8002e80:	4b81      	ldr	r3, [pc, #516]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d004      	beq.n	8002e96 <HAL_RCC_OscConfig+0x7e>
 8002e8c:	4b7e      	ldr	r3, [pc, #504]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e94:	e005      	b.n	8002ea2 <HAL_RCC_OscConfig+0x8a>
 8002e96:	4b7c      	ldr	r3, [pc, #496]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e9c:	091b      	lsrs	r3, r3, #4
 8002e9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d223      	bcs.n	8002eee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fd8c 	bl	80039c8 <RCC_SetFlashLatencyFromMSIRange>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e3ba      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eba:	4b73      	ldr	r3, [pc, #460]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a72      	ldr	r2, [pc, #456]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	f043 0308 	orr.w	r3, r3, #8
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b70      	ldr	r3, [pc, #448]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	496d      	ldr	r1, [pc, #436]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ed8:	4b6b      	ldr	r3, [pc, #428]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	021b      	lsls	r3, r3, #8
 8002ee6:	4968      	ldr	r1, [pc, #416]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
 8002eec:	e025      	b.n	8002f3a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eee:	4b66      	ldr	r3, [pc, #408]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a65      	ldr	r2, [pc, #404]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	f043 0308 	orr.w	r3, r3, #8
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b63      	ldr	r3, [pc, #396]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4960      	ldr	r1, [pc, #384]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	021b      	lsls	r3, r3, #8
 8002f1a:	495b      	ldr	r1, [pc, #364]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fd4c 	bl	80039c8 <RCC_SetFlashLatencyFromMSIRange>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e37a      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f3a:	f000 fc81 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	4b51      	ldr	r3, [pc, #324]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	4950      	ldr	r1, [pc, #320]	@ (800308c <HAL_RCC_OscConfig+0x274>)
 8002f4c:	5ccb      	ldrb	r3, [r1, r3]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	4a4e      	ldr	r2, [pc, #312]	@ (8003090 <HAL_RCC_OscConfig+0x278>)
 8002f58:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003094 <HAL_RCC_OscConfig+0x27c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff f974 	bl	800224c <HAL_InitTick>
 8002f64:	4603      	mov	r3, r0
 8002f66:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d052      	beq.n	8003014 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	e35e      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d032      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f7a:	4b43      	ldr	r3, [pc, #268]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a42      	ldr	r2, [pc, #264]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f86:	f7ff f9b1 	bl	80022ec <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f8e:	f7ff f9ad 	bl	80022ec <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e347      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fa0:	4b39      	ldr	r3, [pc, #228]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fac:	4b36      	ldr	r3, [pc, #216]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a35      	ldr	r2, [pc, #212]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fb2:	f043 0308 	orr.w	r3, r3, #8
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b33      	ldr	r3, [pc, #204]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4930      	ldr	r1, [pc, #192]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fca:	4b2f      	ldr	r3, [pc, #188]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	492b      	ldr	r1, [pc, #172]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	604b      	str	r3, [r1, #4]
 8002fde:	e01a      	b.n	8003016 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fe0:	4b29      	ldr	r3, [pc, #164]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a28      	ldr	r2, [pc, #160]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fec:	f7ff f97e 	bl	80022ec <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff4:	f7ff f97a 	bl	80022ec <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e314      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003006:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x1dc>
 8003012:	e000      	b.n	8003016 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003014:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0301 	and.w	r3, r3, #1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d073      	beq.n	800310a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2b08      	cmp	r3, #8
 8003026:	d005      	beq.n	8003034 <HAL_RCC_OscConfig+0x21c>
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d10e      	bne.n	800304c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b03      	cmp	r3, #3
 8003032:	d10b      	bne.n	800304c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	4b14      	ldr	r3, [pc, #80]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d063      	beq.n	8003108 <HAL_RCC_OscConfig+0x2f0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d15f      	bne.n	8003108 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e2f1      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x24c>
 8003056:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a0b      	ldr	r2, [pc, #44]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e025      	b.n	80030b0 <HAL_RCC_OscConfig+0x298>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800306c:	d114      	bne.n	8003098 <HAL_RCC_OscConfig+0x280>
 800306e:	4b06      	ldr	r3, [pc, #24]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a05      	ldr	r2, [pc, #20]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b03      	ldr	r3, [pc, #12]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a02      	ldr	r2, [pc, #8]	@ (8003088 <HAL_RCC_OscConfig+0x270>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e013      	b.n	80030b0 <HAL_RCC_OscConfig+0x298>
 8003088:	40021000 	.word	0x40021000
 800308c:	0800a24c 	.word	0x0800a24c
 8003090:	2000000c 	.word	0x2000000c
 8003094:	20000010 	.word	0x20000010
 8003098:	4ba0      	ldr	r3, [pc, #640]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a9f      	ldr	r2, [pc, #636]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800309e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b9d      	ldr	r3, [pc, #628]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a9c      	ldr	r2, [pc, #624]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80030aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7ff f918 	bl	80022ec <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7ff f914 	bl	80022ec <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	@ 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e2ae      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d2:	4b92      	ldr	r3, [pc, #584]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x2a8>
 80030de:	e014      	b.n	800310a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7ff f904 	bl	80022ec <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e8:	f7ff f900 	bl	80022ec <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b64      	cmp	r3, #100	@ 0x64
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e29a      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030fa:	4b88      	ldr	r3, [pc, #544]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x2d0>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d060      	beq.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d005      	beq.n	8003128 <HAL_RCC_OscConfig+0x310>
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d119      	bne.n	8003156 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b02      	cmp	r3, #2
 8003126:	d116      	bne.n	8003156 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003128:	4b7c      	ldr	r3, [pc, #496]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d005      	beq.n	8003140 <HAL_RCC_OscConfig+0x328>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e277      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003140:	4b76      	ldr	r3, [pc, #472]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	061b      	lsls	r3, r3, #24
 800314e:	4973      	ldr	r1, [pc, #460]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003150:	4313      	orrs	r3, r2
 8003152:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003154:	e040      	b.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d023      	beq.n	80031a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800315e:	4b6f      	ldr	r3, [pc, #444]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6e      	ldr	r2, [pc, #440]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800316a:	f7ff f8bf 	bl	80022ec <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003172:	f7ff f8bb 	bl	80022ec <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e255      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003184:	4b65      	ldr	r3, [pc, #404]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003190:	4b62      	ldr	r3, [pc, #392]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	061b      	lsls	r3, r3, #24
 800319e:	495f      	ldr	r1, [pc, #380]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
 80031a4:	e018      	b.n	80031d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a6:	4b5d      	ldr	r3, [pc, #372]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a5c      	ldr	r2, [pc, #368]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80031ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b2:	f7ff f89b 	bl	80022ec <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ba:	f7ff f897 	bl	80022ec <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e231      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031cc:	4b53      	ldr	r3, [pc, #332]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d03c      	beq.n	800325e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01c      	beq.n	8003226 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ec:	4b4b      	ldr	r3, [pc, #300]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80031ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031f2:	4a4a      	ldr	r2, [pc, #296]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7ff f876 	bl	80022ec <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003204:	f7ff f872 	bl	80022ec <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e20c      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003216:	4b41      	ldr	r3, [pc, #260]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ef      	beq.n	8003204 <HAL_RCC_OscConfig+0x3ec>
 8003224:	e01b      	b.n	800325e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003226:	4b3d      	ldr	r3, [pc, #244]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800322c:	4a3b      	ldr	r2, [pc, #236]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003236:	f7ff f859 	bl	80022ec <HAL_GetTick>
 800323a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800323c:	e008      	b.n	8003250 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800323e:	f7ff f855 	bl	80022ec <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e1ef      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003250:	4b32      	ldr	r3, [pc, #200]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003252:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ef      	bne.n	800323e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80a6 	beq.w	80033b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326c:	2300      	movs	r3, #0
 800326e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003270:	4b2a      	ldr	r3, [pc, #168]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10d      	bne.n	8003298 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327c:	4b27      	ldr	r3, [pc, #156]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	4a26      	ldr	r2, [pc, #152]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003286:	6593      	str	r3, [r2, #88]	@ 0x58
 8003288:	4b24      	ldr	r3, [pc, #144]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003294:	2301      	movs	r3, #1
 8003296:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003298:	4b21      	ldr	r3, [pc, #132]	@ (8003320 <HAL_RCC_OscConfig+0x508>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d118      	bne.n	80032d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003320 <HAL_RCC_OscConfig+0x508>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003320 <HAL_RCC_OscConfig+0x508>)
 80032aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b0:	f7ff f81c 	bl	80022ec <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b8:	f7ff f818 	bl	80022ec <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1b2      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ca:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <HAL_RCC_OscConfig+0x508>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0f0      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d108      	bne.n	80032f0 <HAL_RCC_OscConfig+0x4d8>
 80032de:	4b0f      	ldr	r3, [pc, #60]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e4:	4a0d      	ldr	r2, [pc, #52]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032ee:	e029      	b.n	8003344 <HAL_RCC_OscConfig+0x52c>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	d115      	bne.n	8003324 <HAL_RCC_OscConfig+0x50c>
 80032f8:	4b08      	ldr	r3, [pc, #32]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fe:	4a07      	ldr	r2, [pc, #28]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003300:	f043 0304 	orr.w	r3, r3, #4
 8003304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003308:	4b04      	ldr	r3, [pc, #16]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330e:	4a03      	ldr	r2, [pc, #12]	@ (800331c <HAL_RCC_OscConfig+0x504>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003318:	e014      	b.n	8003344 <HAL_RCC_OscConfig+0x52c>
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	40007000 	.word	0x40007000
 8003324:	4b9a      	ldr	r3, [pc, #616]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332a:	4a99      	ldr	r2, [pc, #612]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003334:	4b96      	ldr	r3, [pc, #600]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800333a:	4a95      	ldr	r2, [pc, #596]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d016      	beq.n	800337a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe ffce 	bl	80022ec <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7fe ffca 	bl	80022ec <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e162      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800336a:	4b89      	ldr	r3, [pc, #548]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ed      	beq.n	8003354 <HAL_RCC_OscConfig+0x53c>
 8003378:	e015      	b.n	80033a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fe ffb7 	bl	80022ec <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fe ffb3 	bl	80022ec <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e14b      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003398:	4b7d      	ldr	r3, [pc, #500]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1ed      	bne.n	8003382 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033a6:	7ffb      	ldrb	r3, [r7, #31]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d105      	bne.n	80033b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ac:	4b78      	ldr	r3, [pc, #480]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b0:	4a77      	ldr	r2, [pc, #476]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 80033b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d03c      	beq.n	800343e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01c      	beq.n	8003406 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033cc:	4b70      	ldr	r3, [pc, #448]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 80033ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fe ff86 	bl	80022ec <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e4:	f7fe ff82 	bl	80022ec <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e11c      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033f6:	4b66      	ldr	r3, [pc, #408]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 80033f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ef      	beq.n	80033e4 <HAL_RCC_OscConfig+0x5cc>
 8003404:	e01b      	b.n	800343e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003406:	4b62      	ldr	r3, [pc, #392]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 8003408:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800340c:	4a60      	ldr	r2, [pc, #384]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fe ff69 	bl	80022ec <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800341e:	f7fe ff65 	bl	80022ec <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0ff      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003430:	4b57      	ldr	r3, [pc, #348]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 8003432:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1ef      	bne.n	800341e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80f3 	beq.w	800362e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800344c:	2b02      	cmp	r3, #2
 800344e:	f040 80c9 	bne.w	80035e4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003452:	4b4f      	ldr	r3, [pc, #316]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0203 	and.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003462:	429a      	cmp	r2, r3
 8003464:	d12c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003470:	3b01      	subs	r3, #1
 8003472:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d123      	bne.n	80034c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003482:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d11b      	bne.n	80034c0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003492:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003494:	429a      	cmp	r2, r3
 8003496:	d113      	bne.n	80034c0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	3b01      	subs	r3, #1
 80034a6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d109      	bne.n	80034c0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	3b01      	subs	r3, #1
 80034ba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034bc:	429a      	cmp	r2, r3
 80034be:	d06b      	beq.n	8003598 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	2b0c      	cmp	r3, #12
 80034c4:	d062      	beq.n	800358c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034c6:	4b32      	ldr	r3, [pc, #200]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e0ac      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a2d      	ldr	r2, [pc, #180]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 80034dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034e0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e2:	f7fe ff03 	bl	80022ec <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fe feff 	bl	80022ec <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e099      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034fc:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1f0      	bne.n	80034ea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003508:	4b21      	ldr	r3, [pc, #132]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <HAL_RCC_OscConfig+0x77c>)
 800350e:	4013      	ands	r3, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003518:	3a01      	subs	r2, #1
 800351a:	0112      	lsls	r2, r2, #4
 800351c:	4311      	orrs	r1, r2
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003522:	0212      	lsls	r2, r2, #8
 8003524:	4311      	orrs	r1, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800352a:	0852      	lsrs	r2, r2, #1
 800352c:	3a01      	subs	r2, #1
 800352e:	0552      	lsls	r2, r2, #21
 8003530:	4311      	orrs	r1, r2
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003536:	0852      	lsrs	r2, r2, #1
 8003538:	3a01      	subs	r2, #1
 800353a:	0652      	lsls	r2, r2, #25
 800353c:	4311      	orrs	r1, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003542:	06d2      	lsls	r2, r2, #27
 8003544:	430a      	orrs	r2, r1
 8003546:	4912      	ldr	r1, [pc, #72]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 8003548:	4313      	orrs	r3, r2
 800354a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800354c:	4b10      	ldr	r3, [pc, #64]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0f      	ldr	r2, [pc, #60]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 8003552:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003556:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003558:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a0c      	ldr	r2, [pc, #48]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 800355e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003562:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003564:	f7fe fec2 	bl	80022ec <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356c:	f7fe febe 	bl	80022ec <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e058      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357e:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <HAL_RCC_OscConfig+0x778>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800358a:	e050      	b.n	800362e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e04f      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
 8003590:	40021000 	.word	0x40021000
 8003594:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003598:	4b27      	ldr	r3, [pc, #156]	@ (8003638 <HAL_RCC_OscConfig+0x820>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d144      	bne.n	800362e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80035a4:	4b24      	ldr	r3, [pc, #144]	@ (8003638 <HAL_RCC_OscConfig+0x820>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a23      	ldr	r2, [pc, #140]	@ (8003638 <HAL_RCC_OscConfig+0x820>)
 80035aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035b0:	4b21      	ldr	r3, [pc, #132]	@ (8003638 <HAL_RCC_OscConfig+0x820>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	4a20      	ldr	r2, [pc, #128]	@ (8003638 <HAL_RCC_OscConfig+0x820>)
 80035b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035bc:	f7fe fe96 	bl	80022ec <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c4:	f7fe fe92 	bl	80022ec <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e02c      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035d6:	4b18      	ldr	r3, [pc, #96]	@ (8003638 <HAL_RCC_OscConfig+0x820>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x7ac>
 80035e2:	e024      	b.n	800362e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b0c      	cmp	r3, #12
 80035e8:	d01f      	beq.n	800362a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b13      	ldr	r3, [pc, #76]	@ (8003638 <HAL_RCC_OscConfig+0x820>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a12      	ldr	r2, [pc, #72]	@ (8003638 <HAL_RCC_OscConfig+0x820>)
 80035f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fe fe79 	bl	80022ec <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	e008      	b.n	8003610 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035fe:	f7fe fe75 	bl	80022ec <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e00f      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003610:	4b09      	ldr	r3, [pc, #36]	@ (8003638 <HAL_RCC_OscConfig+0x820>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1f0      	bne.n	80035fe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800361c:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <HAL_RCC_OscConfig+0x820>)
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	4905      	ldr	r1, [pc, #20]	@ (8003638 <HAL_RCC_OscConfig+0x820>)
 8003622:	4b06      	ldr	r3, [pc, #24]	@ (800363c <HAL_RCC_OscConfig+0x824>)
 8003624:	4013      	ands	r3, r2
 8003626:	60cb      	str	r3, [r1, #12]
 8003628:	e001      	b.n	800362e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3720      	adds	r7, #32
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	40021000 	.word	0x40021000
 800363c:	feeefffc 	.word	0xfeeefffc

08003640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0e7      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b75      	ldr	r3, [pc, #468]	@ (800382c <HAL_RCC_ClockConfig+0x1ec>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d910      	bls.n	8003684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b72      	ldr	r3, [pc, #456]	@ (800382c <HAL_RCC_ClockConfig+0x1ec>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 0207 	bic.w	r2, r3, #7
 800366a:	4970      	ldr	r1, [pc, #448]	@ (800382c <HAL_RCC_ClockConfig+0x1ec>)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	4313      	orrs	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	4b6e      	ldr	r3, [pc, #440]	@ (800382c <HAL_RCC_ClockConfig+0x1ec>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	683a      	ldr	r2, [r7, #0]
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0cf      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d010      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	4b66      	ldr	r3, [pc, #408]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800369c:	429a      	cmp	r2, r3
 800369e:	d908      	bls.n	80036b2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a0:	4b63      	ldr	r3, [pc, #396]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	4960      	ldr	r1, [pc, #384]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d04c      	beq.n	8003758 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036c6:	4b5a      	ldr	r3, [pc, #360]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d121      	bne.n	8003716 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0a6      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036de:	4b54      	ldr	r3, [pc, #336]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d115      	bne.n	8003716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e09a      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e08e      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003706:	4b4a      	ldr	r3, [pc, #296]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e086      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003716:	4b46      	ldr	r3, [pc, #280]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 0203 	bic.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4943      	ldr	r1, [pc, #268]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003728:	f7fe fde0 	bl	80022ec <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fe fddc 	bl	80022ec <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e06e      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	4b3a      	ldr	r3, [pc, #232]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 020c 	and.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	429a      	cmp	r2, r3
 8003756:	d1eb      	bne.n	8003730 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d010      	beq.n	8003786 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	4b31      	ldr	r3, [pc, #196]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003770:	429a      	cmp	r2, r3
 8003772:	d208      	bcs.n	8003786 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003774:	4b2e      	ldr	r3, [pc, #184]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	492b      	ldr	r1, [pc, #172]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003786:	4b29      	ldr	r3, [pc, #164]	@ (800382c <HAL_RCC_ClockConfig+0x1ec>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	429a      	cmp	r2, r3
 8003792:	d210      	bcs.n	80037b6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003794:	4b25      	ldr	r3, [pc, #148]	@ (800382c <HAL_RCC_ClockConfig+0x1ec>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f023 0207 	bic.w	r2, r3, #7
 800379c:	4923      	ldr	r1, [pc, #140]	@ (800382c <HAL_RCC_ClockConfig+0x1ec>)
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a4:	4b21      	ldr	r3, [pc, #132]	@ (800382c <HAL_RCC_ClockConfig+0x1ec>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d001      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e036      	b.n	8003824 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	4918      	ldr	r1, [pc, #96]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d009      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037e0:	4b13      	ldr	r3, [pc, #76]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4910      	ldr	r1, [pc, #64]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037f4:	f000 f824 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003830 <HAL_RCC_ClockConfig+0x1f0>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	490b      	ldr	r1, [pc, #44]	@ (8003834 <HAL_RCC_ClockConfig+0x1f4>)
 8003806:	5ccb      	ldrb	r3, [r1, r3]
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
 8003810:	4a09      	ldr	r2, [pc, #36]	@ (8003838 <HAL_RCC_ClockConfig+0x1f8>)
 8003812:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003814:	4b09      	ldr	r3, [pc, #36]	@ (800383c <HAL_RCC_ClockConfig+0x1fc>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe fd17 	bl	800224c <HAL_InitTick>
 800381e:	4603      	mov	r3, r0
 8003820:	72fb      	strb	r3, [r7, #11]

  return status;
 8003822:	7afb      	ldrb	r3, [r7, #11]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40022000 	.word	0x40022000
 8003830:	40021000 	.word	0x40021000
 8003834:	0800a24c 	.word	0x0800a24c
 8003838:	2000000c 	.word	0x2000000c
 800383c:	20000010 	.word	0x20000010

08003840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	@ 0x24
 8003844:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800384e:	4b3e      	ldr	r3, [pc, #248]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003858:	4b3b      	ldr	r3, [pc, #236]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0x34>
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d121      	bne.n	80038b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d11e      	bne.n	80038b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003874:	4b34      	ldr	r3, [pc, #208]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d107      	bne.n	8003890 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003880:	4b31      	ldr	r3, [pc, #196]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003886:	0a1b      	lsrs	r3, r3, #8
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	61fb      	str	r3, [r7, #28]
 800388e:	e005      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003890:	4b2d      	ldr	r3, [pc, #180]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800389c:	4a2b      	ldr	r2, [pc, #172]	@ (800394c <HAL_RCC_GetSysClockFreq+0x10c>)
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10d      	bne.n	80038c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d102      	bne.n	80038be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038b8:	4b25      	ldr	r3, [pc, #148]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	e004      	b.n	80038c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d101      	bne.n	80038c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038c4:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x114>)
 80038c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b0c      	cmp	r3, #12
 80038cc:	d134      	bne.n	8003938 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d003      	beq.n	80038e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d003      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0xac>
 80038e4:	e005      	b.n	80038f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003950 <HAL_RCC_GetSysClockFreq+0x110>)
 80038e8:	617b      	str	r3, [r7, #20]
      break;
 80038ea:	e005      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038ec:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x114>)
 80038ee:	617b      	str	r3, [r7, #20]
      break;
 80038f0:	e002      	b.n	80038f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	617b      	str	r3, [r7, #20]
      break;
 80038f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f8:	4b13      	ldr	r3, [pc, #76]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	3301      	adds	r3, #1
 8003904:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003906:	4b10      	ldr	r3, [pc, #64]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	0a1b      	lsrs	r3, r3, #8
 800390c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	fb03 f202 	mul.w	r2, r3, r2
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	fbb2 f3f3 	udiv	r3, r2, r3
 800391c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800391e:	4b0a      	ldr	r3, [pc, #40]	@ (8003948 <HAL_RCC_GetSysClockFreq+0x108>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	0e5b      	lsrs	r3, r3, #25
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	3301      	adds	r3, #1
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	fbb2 f3f3 	udiv	r3, r2, r3
 8003936:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003938:	69bb      	ldr	r3, [r7, #24]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	@ 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40021000 	.word	0x40021000
 800394c:	0800a264 	.word	0x0800a264
 8003950:	00f42400 	.word	0x00f42400
 8003954:	007a1200 	.word	0x007a1200

08003958 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800395c:	4b03      	ldr	r3, [pc, #12]	@ (800396c <HAL_RCC_GetHCLKFreq+0x14>)
 800395e:	681b      	ldr	r3, [r3, #0]
}
 8003960:	4618      	mov	r0, r3
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	2000000c 	.word	0x2000000c

08003970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003974:	f7ff fff0 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0a1b      	lsrs	r3, r3, #8
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4904      	ldr	r1, [pc, #16]	@ (8003998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000
 8003998:	0800a25c 	.word	0x0800a25c

0800399c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039a0:	f7ff ffda 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b06      	ldr	r3, [pc, #24]	@ (80039c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0adb      	lsrs	r3, r3, #11
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4904      	ldr	r1, [pc, #16]	@ (80039c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039bc:	4618      	mov	r0, r3
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	40021000 	.word	0x40021000
 80039c4:	0800a25c 	.word	0x0800a25c

080039c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039d0:	2300      	movs	r3, #0
 80039d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039e0:	f7ff f9b6 	bl	8002d50 <HAL_PWREx_GetVoltageRange>
 80039e4:	6178      	str	r0, [r7, #20]
 80039e6:	e014      	b.n	8003a12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	4b25      	ldr	r3, [pc, #148]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ec:	4a24      	ldr	r2, [pc, #144]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80039f4:	4b22      	ldr	r3, [pc, #136]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a00:	f7ff f9a6 	bl	8002d50 <HAL_PWREx_GetVoltageRange>
 8003a04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003a06:	4b1e      	ldr	r3, [pc, #120]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a18:	d10b      	bne.n	8003a32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b80      	cmp	r3, #128	@ 0x80
 8003a1e:	d919      	bls.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a24:	d902      	bls.n	8003a2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a26:	2302      	movs	r3, #2
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	e013      	b.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	e010      	b.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b80      	cmp	r3, #128	@ 0x80
 8003a36:	d902      	bls.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a38:	2303      	movs	r3, #3
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e00a      	b.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b80      	cmp	r3, #128	@ 0x80
 8003a42:	d102      	bne.n	8003a4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a44:	2302      	movs	r3, #2
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	e004      	b.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b70      	cmp	r3, #112	@ 0x70
 8003a4e:	d101      	bne.n	8003a54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a50:	2301      	movs	r3, #1
 8003a52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a54:	4b0b      	ldr	r3, [pc, #44]	@ (8003a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f023 0207 	bic.w	r2, r3, #7
 8003a5c:	4909      	ldr	r1, [pc, #36]	@ (8003a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a64:	4b07      	ldr	r3, [pc, #28]	@ (8003a84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d001      	beq.n	8003a76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40022000 	.word	0x40022000

08003a88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a90:	2300      	movs	r3, #0
 8003a92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a94:	2300      	movs	r3, #0
 8003a96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d031      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003aac:	d01a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003aae:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003ab2:	d814      	bhi.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d009      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ab8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003abc:	d10f      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003abe:	4b5d      	ldr	r3, [pc, #372]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4a5c      	ldr	r2, [pc, #368]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003aca:	e00c      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f9de 	bl	8003e94 <RCCEx_PLLSAI1_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003adc:	e003      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	74fb      	strb	r3, [r7, #19]
      break;
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003ae4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae6:	7cfb      	ldrb	r3, [r7, #19]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10b      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aec:	4b51      	ldr	r3, [pc, #324]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afa:	494e      	ldr	r1, [pc, #312]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b02:	e001      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b04:	7cfb      	ldrb	r3, [r7, #19]
 8003b06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 809e 	beq.w	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b1a:	4b46      	ldr	r3, [pc, #280]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00d      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b30:	4b40      	ldr	r3, [pc, #256]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b34:	4a3f      	ldr	r2, [pc, #252]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b3c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a39      	ldr	r2, [pc, #228]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b58:	f7fe fbc8 	bl	80022ec <HAL_GetTick>
 8003b5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b5e:	e009      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b60:	f7fe fbc4 	bl	80022ec <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d902      	bls.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	74fb      	strb	r3, [r7, #19]
        break;
 8003b72:	e005      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b74:	4b30      	ldr	r3, [pc, #192]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0ef      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003b80:	7cfb      	ldrb	r3, [r7, #19]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d15a      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b86:	4b2b      	ldr	r3, [pc, #172]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d01e      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d019      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ba2:	4b24      	ldr	r3, [pc, #144]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bae:	4b21      	ldr	r3, [pc, #132]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bce:	4a19      	ldr	r2, [pc, #100]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d016      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003be0:	f7fe fb84 	bl	80022ec <HAL_GetTick>
 8003be4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be6:	e00b      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be8:	f7fe fb80 	bl	80022ec <HAL_GetTick>
 8003bec:	4602      	mov	r2, r0
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d902      	bls.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	74fb      	strb	r3, [r7, #19]
            break;
 8003bfe:	e006      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c00:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0ec      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c14:	4b07      	ldr	r3, [pc, #28]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c22:	4904      	ldr	r1, [pc, #16]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c2a:	e009      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c2c:	7cfb      	ldrb	r3, [r7, #19]
 8003c2e:	74bb      	strb	r3, [r7, #18]
 8003c30:	e006      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	7cfb      	ldrb	r3, [r7, #19]
 8003c3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c40:	7c7b      	ldrb	r3, [r7, #17]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d105      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c46:	4b8a      	ldr	r3, [pc, #552]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4a:	4a89      	ldr	r2, [pc, #548]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c5e:	4b84      	ldr	r3, [pc, #528]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c64:	f023 0203 	bic.w	r2, r3, #3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	4980      	ldr	r1, [pc, #512]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c80:	4b7b      	ldr	r3, [pc, #492]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c86:	f023 020c 	bic.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8e:	4978      	ldr	r1, [pc, #480]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ca2:	4b73      	ldr	r3, [pc, #460]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb0:	496f      	ldr	r1, [pc, #444]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc4:	4b6a      	ldr	r3, [pc, #424]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cca:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd2:	4967      	ldr	r1, [pc, #412]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ce6:	4b62      	ldr	r3, [pc, #392]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cec:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cf4:	495e      	ldr	r1, [pc, #376]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d08:	4b59      	ldr	r3, [pc, #356]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d16:	4956      	ldr	r1, [pc, #344]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d2a:	4b51      	ldr	r3, [pc, #324]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d38:	494d      	ldr	r1, [pc, #308]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d028      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d4c:	4b48      	ldr	r3, [pc, #288]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	4945      	ldr	r1, [pc, #276]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d6a:	d106      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d6c:	4b40      	ldr	r3, [pc, #256]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4a3f      	ldr	r2, [pc, #252]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d76:	60d3      	str	r3, [r2, #12]
 8003d78:	e011      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d82:	d10c      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	2101      	movs	r1, #1
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f882 	bl	8003e94 <RCCEx_PLLSAI1_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d94:	7cfb      	ldrb	r3, [r7, #19]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003d9a:	7cfb      	ldrb	r3, [r7, #19]
 8003d9c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d028      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003daa:	4b31      	ldr	r3, [pc, #196]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db8:	492d      	ldr	r1, [pc, #180]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dc8:	d106      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dca:	4b29      	ldr	r3, [pc, #164]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	4a28      	ldr	r2, [pc, #160]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dd4:	60d3      	str	r3, [r2, #12]
 8003dd6:	e011      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ddc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3304      	adds	r3, #4
 8003de6:	2101      	movs	r1, #1
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 f853 	bl	8003e94 <RCCEx_PLLSAI1_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003df2:	7cfb      	ldrb	r3, [r7, #19]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003df8:	7cfb      	ldrb	r3, [r7, #19]
 8003dfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01c      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e08:	4b19      	ldr	r3, [pc, #100]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e16:	4916      	ldr	r1, [pc, #88]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e26:	d10c      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 f830 	bl	8003e94 <RCCEx_PLLSAI1_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e38:	7cfb      	ldrb	r3, [r7, #19]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003e3e:	7cfb      	ldrb	r3, [r7, #19]
 8003e40:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e4e:	4b08      	ldr	r3, [pc, #32]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e54:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e5c:	4904      	ldr	r1, [pc, #16]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e64:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000

08003e74 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a04      	ldr	r2, [pc, #16]	@ (8003e90 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e7e:	f043 0304 	orr.w	r3, r3, #4
 8003e82:	6013      	str	r3, [r2, #0]
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40021000 	.word	0x40021000

08003e94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ea2:	4b74      	ldr	r3, [pc, #464]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d018      	beq.n	8003ee0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003eae:	4b71      	ldr	r3, [pc, #452]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0203 	and.w	r2, r3, #3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d10d      	bne.n	8003eda <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ec6:	4b6b      	ldr	r3, [pc, #428]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	f003 0307 	and.w	r3, r3, #7
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d047      	beq.n	8003f6a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
 8003ede:	e044      	b.n	8003f6a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d018      	beq.n	8003f1a <RCCEx_PLLSAI1_Config+0x86>
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d825      	bhi.n	8003f38 <RCCEx_PLLSAI1_Config+0xa4>
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d002      	beq.n	8003ef6 <RCCEx_PLLSAI1_Config+0x62>
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d009      	beq.n	8003f08 <RCCEx_PLLSAI1_Config+0x74>
 8003ef4:	e020      	b.n	8003f38 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d11d      	bne.n	8003f3e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f06:	e01a      	b.n	8003f3e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f08:	4b5a      	ldr	r3, [pc, #360]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d116      	bne.n	8003f42 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f18:	e013      	b.n	8003f42 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f1a:	4b56      	ldr	r3, [pc, #344]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f26:	4b53      	ldr	r3, [pc, #332]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f36:	e006      	b.n	8003f46 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f3c:	e004      	b.n	8003f48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f3e:	bf00      	nop
 8003f40:	e002      	b.n	8003f48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f46:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10d      	bne.n	8003f6a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f4e:	4b49      	ldr	r3, [pc, #292]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6819      	ldr	r1, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	430b      	orrs	r3, r1
 8003f64:	4943      	ldr	r1, [pc, #268]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d17c      	bne.n	800406a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f70:	4b40      	ldr	r3, [pc, #256]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a3f      	ldr	r2, [pc, #252]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f7c:	f7fe f9b6 	bl	80022ec <HAL_GetTick>
 8003f80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f82:	e009      	b.n	8003f98 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f84:	f7fe f9b2 	bl	80022ec <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d902      	bls.n	8003f98 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	73fb      	strb	r3, [r7, #15]
        break;
 8003f96:	e005      	b.n	8003fa4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f98:	4b36      	ldr	r3, [pc, #216]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1ef      	bne.n	8003f84 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d15f      	bne.n	800406a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d110      	bne.n	8003fd2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fb0:	4b30      	ldr	r3, [pc, #192]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003fb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6892      	ldr	r2, [r2, #8]
 8003fc0:	0211      	lsls	r1, r2, #8
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	68d2      	ldr	r2, [r2, #12]
 8003fc6:	06d2      	lsls	r2, r2, #27
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	492a      	ldr	r1, [pc, #168]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	610b      	str	r3, [r1, #16]
 8003fd0:	e027      	b.n	8004022 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d112      	bne.n	8003ffe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fd8:	4b26      	ldr	r3, [pc, #152]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003fe0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6892      	ldr	r2, [r2, #8]
 8003fe8:	0211      	lsls	r1, r2, #8
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6912      	ldr	r2, [r2, #16]
 8003fee:	0852      	lsrs	r2, r2, #1
 8003ff0:	3a01      	subs	r2, #1
 8003ff2:	0552      	lsls	r2, r2, #21
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	491f      	ldr	r1, [pc, #124]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	610b      	str	r3, [r1, #16]
 8003ffc:	e011      	b.n	8004022 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004006:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6892      	ldr	r2, [r2, #8]
 800400e:	0211      	lsls	r1, r2, #8
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6952      	ldr	r2, [r2, #20]
 8004014:	0852      	lsrs	r2, r2, #1
 8004016:	3a01      	subs	r2, #1
 8004018:	0652      	lsls	r2, r2, #25
 800401a:	430a      	orrs	r2, r1
 800401c:	4915      	ldr	r1, [pc, #84]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 800401e:	4313      	orrs	r3, r2
 8004020:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004022:	4b14      	ldr	r3, [pc, #80]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a13      	ldr	r2, [pc, #76]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004028:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800402c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402e:	f7fe f95d 	bl	80022ec <HAL_GetTick>
 8004032:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004034:	e009      	b.n	800404a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004036:	f7fe f959 	bl	80022ec <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d902      	bls.n	800404a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	73fb      	strb	r3, [r7, #15]
          break;
 8004048:	e005      	b.n	8004056 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800404a:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0ef      	beq.n	8004036 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d106      	bne.n	800406a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800405c:	4b05      	ldr	r3, [pc, #20]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	4903      	ldr	r1, [pc, #12]	@ (8004074 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004066:	4313      	orrs	r3, r2
 8004068:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	40021000 	.word	0x40021000

08004078 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d079      	beq.n	800417e <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f7fd fe30 	bl	8001d04 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d058      	beq.n	800416c <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	22ca      	movs	r2, #202	@ 0xca
 80040c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2253      	movs	r2, #83	@ 0x53
 80040c8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f880 	bl	80041d0 <RTC_EnterInitMode>
 80040d0:	4603      	mov	r3, r0
 80040d2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d127      	bne.n	800412a <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80040e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ec:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6899      	ldr	r1, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	431a      	orrs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	68d2      	ldr	r2, [r2, #12]
 8004114:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6919      	ldr	r1, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	041a      	lsls	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f884 	bl	8004238 <RTC_ExitInitMode>
 8004130:	4603      	mov	r3, r0
 8004132:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d113      	bne.n	8004162 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0203 	bic.w	r2, r2, #3
 8004148:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69da      	ldr	r2, [r3, #28]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	22ff      	movs	r2, #255	@ 0xff
 8004168:	625a      	str	r2, [r3, #36]	@ 0x24
 800416a:	e001      	b.n	8004170 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800416c:	2300      	movs	r3, #0
 800416e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004170:	7bfb      	ldrb	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d103      	bne.n	800417e <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 800417e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0d      	ldr	r2, [pc, #52]	@ (80041cc <HAL_RTC_WaitForSynchro+0x44>)
 8004196:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004198:	f7fe f8a8 	bl	80022ec <HAL_GetTick>
 800419c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800419e:	e009      	b.n	80041b4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041a0:	f7fe f8a4 	bl	80022ec <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041ae:	d901      	bls.n	80041b4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e007      	b.n	80041c4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0ee      	beq.n	80041a0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	0003ff5f 	.word	0x0003ff5f

080041d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d120      	bne.n	800422c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f04f 32ff 	mov.w	r2, #4294967295
 80041f2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80041f4:	f7fe f87a 	bl	80022ec <HAL_GetTick>
 80041f8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041fa:	e00d      	b.n	8004218 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80041fc:	f7fe f876 	bl	80022ec <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800420a:	d905      	bls.n	8004218 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2203      	movs	r2, #3
 8004214:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d102      	bne.n	800422c <RTC_EnterInitMode+0x5c>
 8004226:	7bfb      	ldrb	r3, [r7, #15]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d1e7      	bne.n	80041fc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004244:	4b1a      	ldr	r3, [pc, #104]	@ (80042b0 <RTC_ExitInitMode+0x78>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a19      	ldr	r2, [pc, #100]	@ (80042b0 <RTC_ExitInitMode+0x78>)
 800424a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800424e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004250:	4b17      	ldr	r3, [pc, #92]	@ (80042b0 <RTC_ExitInitMode+0x78>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0320 	and.w	r3, r3, #32
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10c      	bne.n	8004276 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7ff ff93 	bl	8004188 <HAL_RTC_WaitForSynchro>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01e      	beq.n	80042a6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2203      	movs	r2, #3
 800426c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	73fb      	strb	r3, [r7, #15]
 8004274:	e017      	b.n	80042a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004276:	4b0e      	ldr	r3, [pc, #56]	@ (80042b0 <RTC_ExitInitMode+0x78>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	4a0d      	ldr	r2, [pc, #52]	@ (80042b0 <RTC_ExitInitMode+0x78>)
 800427c:	f023 0320 	bic.w	r3, r3, #32
 8004280:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff ff80 	bl	8004188 <HAL_RTC_WaitForSynchro>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d005      	beq.n	800429a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2203      	movs	r2, #3
 8004292:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800429a:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <RTC_ExitInitMode+0x78>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	4a04      	ldr	r2, [pc, #16]	@ (80042b0 <RTC_ExitInitMode+0x78>)
 80042a0:	f043 0320 	orr.w	r3, r3, #32
 80042a4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40002800 	.word	0x40002800

080042b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e040      	b.n	8004348 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fd fd44 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2224      	movs	r2, #36	@ 0x24
 80042e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f001 f8a0 	bl	8005440 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fe71 	bl	8004fe8 <UART_SetConfig>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e01b      	b.n	8004348 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800431e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800432e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f001 f91f 	bl	8005584 <UART_CheckIdleState>
 8004346:	4603      	mov	r3, r0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	@ 0x28
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004364:	2b20      	cmp	r3, #32
 8004366:	d177      	bne.n	8004458 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_UART_Transmit+0x24>
 800436e:	88fb      	ldrh	r3, [r7, #6]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e070      	b.n	800445a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2221      	movs	r2, #33	@ 0x21
 8004384:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004386:	f7fd ffb1 	bl	80022ec <HAL_GetTick>
 800438a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	88fa      	ldrh	r2, [r7, #6]
 8004390:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	88fa      	ldrh	r2, [r7, #6]
 8004398:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a4:	d108      	bne.n	80043b8 <HAL_UART_Transmit+0x68>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d104      	bne.n	80043b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	61bb      	str	r3, [r7, #24]
 80043b6:	e003      	b.n	80043c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043c0:	e02f      	b.n	8004422 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2200      	movs	r2, #0
 80043ca:	2180      	movs	r1, #128	@ 0x80
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f001 f981 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d004      	beq.n	80043e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e03b      	b.n	800445a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10b      	bne.n	8004400 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	881a      	ldrh	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f4:	b292      	uxth	r2, r2
 80043f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	3302      	adds	r3, #2
 80043fc:	61bb      	str	r3, [r7, #24]
 80043fe:	e007      	b.n	8004410 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3301      	adds	r3, #1
 800440e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1c9      	bne.n	80043c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	2140      	movs	r1, #64	@ 0x40
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f001 f94b 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d004      	beq.n	800444e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e005      	b.n	800445a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	e000      	b.n	800445a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
  }
}
 800445a:	4618      	mov	r0, r3
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b08a      	sub	sp, #40	@ 0x28
 8004466:	af02      	add	r7, sp, #8
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	4613      	mov	r3, r2
 8004470:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004478:	2b20      	cmp	r3, #32
 800447a:	f040 80b6 	bne.w	80045ea <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <HAL_UART_Receive+0x28>
 8004484:	88fb      	ldrh	r3, [r7, #6]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e0ae      	b.n	80045ec <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2222      	movs	r2, #34	@ 0x22
 800449a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044a4:	f7fd ff22 	bl	80022ec <HAL_GetTick>
 80044a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	88fa      	ldrh	r2, [r7, #6]
 80044ae:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	88fa      	ldrh	r2, [r7, #6]
 80044b6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c2:	d10e      	bne.n	80044e2 <HAL_UART_Receive+0x80>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <HAL_UART_Receive+0x76>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80044d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044d6:	e02d      	b.n	8004534 <HAL_UART_Receive+0xd2>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	22ff      	movs	r2, #255	@ 0xff
 80044dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044e0:	e028      	b.n	8004534 <HAL_UART_Receive+0xd2>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10d      	bne.n	8004506 <HAL_UART_Receive+0xa4>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d104      	bne.n	80044fc <HAL_UART_Receive+0x9a>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	22ff      	movs	r2, #255	@ 0xff
 80044f6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80044fa:	e01b      	b.n	8004534 <HAL_UART_Receive+0xd2>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	227f      	movs	r2, #127	@ 0x7f
 8004500:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004504:	e016      	b.n	8004534 <HAL_UART_Receive+0xd2>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800450e:	d10d      	bne.n	800452c <HAL_UART_Receive+0xca>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <HAL_UART_Receive+0xc0>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	227f      	movs	r2, #127	@ 0x7f
 800451c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004520:	e008      	b.n	8004534 <HAL_UART_Receive+0xd2>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	223f      	movs	r2, #63	@ 0x3f
 8004526:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800452a:	e003      	b.n	8004534 <HAL_UART_Receive+0xd2>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800453a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004544:	d108      	bne.n	8004558 <HAL_UART_Receive+0xf6>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d104      	bne.n	8004558 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	e003      	b.n	8004560 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004560:	e037      	b.n	80045d2 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2200      	movs	r2, #0
 800456a:	2120      	movs	r1, #32
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f001 f8b1 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e033      	b.n	80045ec <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10c      	bne.n	80045a4 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004590:	b29a      	uxth	r2, r3
 8004592:	8a7b      	ldrh	r3, [r7, #18]
 8004594:	4013      	ands	r3, r2
 8004596:	b29a      	uxth	r2, r3
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	3302      	adds	r3, #2
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e00d      	b.n	80045c0 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	8a7b      	ldrh	r3, [r7, #18]
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	4013      	ands	r3, r2
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	3301      	adds	r3, #1
 80045be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80045d8:	b29b      	uxth	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1c1      	bne.n	8004562 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e000      	b.n	80045ec <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
  }
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	@ 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	4613      	mov	r3, r2
 8004600:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004606:	2b20      	cmp	r3, #32
 8004608:	d165      	bne.n	80046d6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d002      	beq.n	8004616 <HAL_UART_Transmit_DMA+0x22>
 8004610:	88fb      	ldrh	r3, [r7, #6]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e05e      	b.n	80046d8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	88fa      	ldrh	r2, [r7, #6]
 8004624:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	88fa      	ldrh	r2, [r7, #6]
 800462c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2221      	movs	r2, #33	@ 0x21
 800463c:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004642:	2b00      	cmp	r3, #0
 8004644:	d027      	beq.n	8004696 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464a:	4a25      	ldr	r2, [pc, #148]	@ (80046e0 <HAL_UART_Transmit_DMA+0xec>)
 800464c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004652:	4a24      	ldr	r2, [pc, #144]	@ (80046e4 <HAL_UART_Transmit_DMA+0xf0>)
 8004654:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465a:	4a23      	ldr	r2, [pc, #140]	@ (80046e8 <HAL_UART_Transmit_DMA+0xf4>)
 800465c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	2200      	movs	r2, #0
 8004664:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800466e:	4619      	mov	r1, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3328      	adds	r3, #40	@ 0x28
 8004676:	461a      	mov	r2, r3
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	f7fe f80d 	bl	8002698 <HAL_DMA_Start_IT>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2210      	movs	r2, #16
 8004688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2220      	movs	r2, #32
 8004690:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e020      	b.n	80046d8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2240      	movs	r2, #64	@ 0x40
 800469c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3308      	adds	r3, #8
 80046a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	613b      	str	r3, [r7, #16]
   return(result);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3308      	adds	r3, #8
 80046bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046be:	623a      	str	r2, [r7, #32]
 80046c0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c2:	69f9      	ldr	r1, [r7, #28]
 80046c4:	6a3a      	ldr	r2, [r7, #32]
 80046c6:	e841 2300 	strex	r3, r2, [r1]
 80046ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1e5      	bne.n	800469e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e000      	b.n	80046d8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
  }
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3728      	adds	r7, #40	@ 0x28
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	080059f9 	.word	0x080059f9
 80046e4:	08005a93 	.word	0x08005a93
 80046e8:	08005c19 	.word	0x08005c19

080046ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	@ 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004700:	2b20      	cmp	r3, #32
 8004702:	d137      	bne.n	8004774 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_UART_Receive_DMA+0x24>
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e030      	b.n	8004776 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a18      	ldr	r2, [pc, #96]	@ (8004780 <HAL_UART_Receive_DMA+0x94>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d01f      	beq.n	8004764 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d018      	beq.n	8004764 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	613b      	str	r3, [r7, #16]
   return(result);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004746:	627b      	str	r3, [r7, #36]	@ 0x24
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	69f9      	ldr	r1, [r7, #28]
 8004756:	6a3a      	ldr	r2, [r7, #32]
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	61bb      	str	r3, [r7, #24]
   return(result);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e6      	bne.n	8004732 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	461a      	mov	r2, r3
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f001 f81a 	bl	80057a4 <UART_Start_Receive_DMA>
 8004770:	4603      	mov	r3, r0
 8004772:	e000      	b.n	8004776 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004774:	2302      	movs	r3, #2
  }
}
 8004776:	4618      	mov	r0, r3
 8004778:	3728      	adds	r7, #40	@ 0x28
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40008000 	.word	0x40008000

08004784 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08e      	sub	sp, #56	@ 0x38
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Disable TCIE, TXEIE and TXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	6a3b      	ldr	r3, [r7, #32]
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	61fb      	str	r3, [r7, #28]
   return(result);
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80047a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ac:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e6      	bne.n	800478c <HAL_UART_AbortTransmit+0x8>
#endif /* USART_CR1_FIFOEN */

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c8:	2b80      	cmp	r3, #128	@ 0x80
 80047ca:	d137      	bne.n	800483c <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3308      	adds	r3, #8
 80047d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	60bb      	str	r3, [r7, #8]
   return(result);
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3308      	adds	r3, #8
 80047ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ec:	61ba      	str	r2, [r7, #24]
 80047ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6979      	ldr	r1, [r7, #20]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	613b      	str	r3, [r7, #16]
   return(result);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004804:	2b00      	cmp	r3, #0
 8004806:	d019      	beq.n	800483c <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480c:	2200      	movs	r2, #0
 800480e:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004814:	4618      	mov	r0, r3
 8004816:	f7fd ff9f 	bl	8002758 <HAL_DMA_Abort>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00d      	beq.n	800483c <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004824:	4618      	mov	r0, r3
 8004826:	f7fe f8c5 	bl	80029b4 <HAL_DMA_GetError>
 800482a:	4603      	mov	r3, r0
 800482c:	2b20      	cmp	r3, #32
 800482e:	d105      	bne.n	800483c <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2210      	movs	r2, #16
 8004834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e007      	b.n	800484c <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3738      	adds	r7, #56	@ 0x38
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b09a      	sub	sp, #104	@ 0x68
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800486a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800486c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004870:	667b      	str	r3, [r7, #100]	@ 0x64
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	461a      	mov	r2, r3
 8004878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800487a:	657b      	str	r3, [r7, #84]	@ 0x54
 800487c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004880:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004888:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e6      	bne.n	800485c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3308      	adds	r3, #8
 8004894:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3308      	adds	r3, #8
 80048ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80048ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80048b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1e5      	bne.n	800488e <HAL_UART_AbortReceive+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d118      	bne.n	80048fc <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	f023 0310 	bic.w	r3, r3, #16
 80048de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e6      	bne.n	80048ca <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004906:	2b40      	cmp	r3, #64	@ 0x40
 8004908:	d137      	bne.n	800497a <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3308      	adds	r3, #8
 8004910:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	60bb      	str	r3, [r7, #8]
   return(result);
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004920:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3308      	adds	r3, #8
 8004928:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800492a:	61ba      	str	r2, [r7, #24]
 800492c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	6979      	ldr	r1, [r7, #20]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	613b      	str	r3, [r7, #16]
   return(result);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e5      	bne.n	800490a <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004942:	2b00      	cmp	r3, #0
 8004944:	d019      	beq.n	800497a <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800494a:	2200      	movs	r2, #0
 800494c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004952:	4618      	mov	r0, r3
 8004954:	f7fd ff00 	bl	8002758 <HAL_DMA_Abort>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00d      	beq.n	800497a <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe f826 	bl	80029b4 <HAL_DMA_GetError>
 8004968:	4603      	mov	r3, r0
 800496a:	2b20      	cmp	r3, #32
 800496c:	d105      	bne.n	800497a <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2210      	movs	r2, #16
 8004972:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e019      	b.n	80049ae <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	220f      	movs	r2, #15
 8004988:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	8b1b      	ldrh	r3, [r3, #24]
 8004990:	b29a      	uxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0208 	orr.w	r2, r2, #8
 800499a:	b292      	uxth	r2, r2
 800499c:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3768      	adds	r7, #104	@ 0x68
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b0ba      	sub	sp, #232	@ 0xe8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80049de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80049e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80049e6:	4013      	ands	r3, r2
 80049e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80049ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d115      	bne.n	8004a20 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80049f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00f      	beq.n	8004a20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d009      	beq.n	8004a20 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 82ae 	beq.w	8004f72 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	4798      	blx	r3
      }
      return;
 8004a1e:	e2a8      	b.n	8004f72 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	f000 8117 	beq.w	8004c58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004a3a:	4b85      	ldr	r3, [pc, #532]	@ (8004c50 <HAL_UART_IRQHandler+0x298>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 810a 	beq.w	8004c58 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d011      	beq.n	8004a74 <HAL_UART_IRQHandler+0xbc>
 8004a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00b      	beq.n	8004a74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a6a:	f043 0201 	orr.w	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d011      	beq.n	8004aa4 <HAL_UART_IRQHandler+0xec>
 8004a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00b      	beq.n	8004aa4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2202      	movs	r2, #2
 8004a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a9a:	f043 0204 	orr.w	r2, r3, #4
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d011      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x11c>
 8004ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00b      	beq.n	8004ad4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2204      	movs	r2, #4
 8004ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aca:	f043 0202 	orr.w	r2, r3, #2
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d017      	beq.n	8004b10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d105      	bne.n	8004af8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004af0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00b      	beq.n	8004b10 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2208      	movs	r2, #8
 8004afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b06:	f043 0208 	orr.w	r2, r3, #8
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d012      	beq.n	8004b42 <HAL_UART_IRQHandler+0x18a>
 8004b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00c      	beq.n	8004b42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b38:	f043 0220 	orr.w	r2, r3, #32
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8214 	beq.w	8004f76 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00d      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b8a:	2b40      	cmp	r3, #64	@ 0x40
 8004b8c:	d005      	beq.n	8004b9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d04f      	beq.n	8004c3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fec8 	bl	8005930 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004baa:	2b40      	cmp	r3, #64	@ 0x40
 8004bac:	d141      	bne.n	8004c32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004bda:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004bde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1d9      	bne.n	8004bae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d013      	beq.n	8004c2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c06:	4a13      	ldr	r2, [pc, #76]	@ (8004c54 <HAL_UART_IRQHandler+0x29c>)
 8004c08:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fd fde0 	bl	80027d4 <HAL_DMA_Abort_IT>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d017      	beq.n	8004c4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004c24:	4610      	mov	r0, r2
 8004c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c28:	e00f      	b.n	8004c4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc ff94 	bl	8001b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c30:	e00b      	b.n	8004c4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7fc ff90 	bl	8001b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c38:	e007      	b.n	8004c4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7fc ff8c 	bl	8001b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004c48:	e195      	b.n	8004f76 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4a:	bf00      	nop
    return;
 8004c4c:	e193      	b.n	8004f76 <HAL_UART_IRQHandler+0x5be>
 8004c4e:	bf00      	nop
 8004c50:	04000120 	.word	0x04000120
 8004c54:	08005c97 	.word	0x08005c97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	f040 814e 	bne.w	8004efe <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f000 8147 	beq.w	8004efe <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8140 	beq.w	8004efe <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2210      	movs	r2, #16
 8004c84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c90:	2b40      	cmp	r3, #64	@ 0x40
 8004c92:	f040 80b8 	bne.w	8004e06 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ca2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 8167 	beq.w	8004f7a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	f080 815f 	bcs.w	8004f7a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cc2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 8086 	bne.w	8004de4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004d02:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004d06:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1da      	bne.n	8004cd8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3308      	adds	r3, #8
 8004d28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d2c:	e853 3f00 	ldrex	r3, [r3]
 8004d30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3308      	adds	r3, #8
 8004d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e1      	bne.n	8004d22 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	3308      	adds	r3, #8
 8004d64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d68:	e853 3f00 	ldrex	r3, [r3]
 8004d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3308      	adds	r3, #8
 8004d7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e3      	bne.n	8004d5e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004db4:	f023 0310 	bic.w	r3, r3, #16
 8004db8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004dc6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dc8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004dcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004dd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e4      	bne.n	8004da4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd fcba 	bl	8002758 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f8d8 	bl	8004fb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e04:	e0b9      	b.n	8004f7a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80ab 	beq.w	8004f7e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80a6 	beq.w	8004f7e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004e54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e56:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e4      	bne.n	8004e32 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	e853 3f00 	ldrex	r3, [r3]
 8004e76:	623b      	str	r3, [r7, #32]
   return(result);
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	f023 0301 	bic.w	r3, r3, #1
 8004e7e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3308      	adds	r3, #8
 8004e88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e94:	e841 2300 	strex	r3, r2, [r1]
 8004e98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1e3      	bne.n	8004e68 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f023 0310 	bic.w	r3, r3, #16
 8004ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	69b9      	ldr	r1, [r7, #24]
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1e4      	bne.n	8004eb4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2202      	movs	r2, #2
 8004eee:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f85c 	bl	8004fb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004efc:	e03f      	b.n	8004f7e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00e      	beq.n	8004f28 <HAL_UART_IRQHandler+0x570>
 8004f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d008      	beq.n	8004f28 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004f1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 fef8 	bl	8005d16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f26:	e02d      	b.n	8004f84 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00e      	beq.n	8004f52 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01c      	beq.n	8004f82 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	4798      	blx	r3
    }
    return;
 8004f50:	e017      	b.n	8004f82 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d012      	beq.n	8004f84 <HAL_UART_IRQHandler+0x5cc>
 8004f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fea9 	bl	8005cc2 <UART_EndTransmit_IT>
    return;
 8004f70:	e008      	b.n	8004f84 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004f72:	bf00      	nop
 8004f74:	e006      	b.n	8004f84 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004f76:	bf00      	nop
 8004f78:	e004      	b.n	8004f84 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004f7a:	bf00      	nop
 8004f7c:	e002      	b.n	8004f84 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004f7e:	bf00      	nop
 8004f80:	e000      	b.n	8004f84 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004f82:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004f84:	37e8      	adds	r7, #232	@ 0xe8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop

08004f8c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fe8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fec:	b08a      	sub	sp, #40	@ 0x28
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	431a      	orrs	r2, r3
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	431a      	orrs	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	4313      	orrs	r3, r2
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4bb4      	ldr	r3, [pc, #720]	@ (80052e8 <UART_SetConfig+0x300>)
 8005018:	4013      	ands	r3, r2
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005020:	430b      	orrs	r3, r1
 8005022:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4aa9      	ldr	r2, [pc, #676]	@ (80052ec <UART_SetConfig+0x304>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005050:	4313      	orrs	r3, r2
 8005052:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005064:	430a      	orrs	r2, r1
 8005066:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4aa0      	ldr	r2, [pc, #640]	@ (80052f0 <UART_SetConfig+0x308>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d126      	bne.n	80050c0 <UART_SetConfig+0xd8>
 8005072:	4ba0      	ldr	r3, [pc, #640]	@ (80052f4 <UART_SetConfig+0x30c>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	2b03      	cmp	r3, #3
 800507e:	d81b      	bhi.n	80050b8 <UART_SetConfig+0xd0>
 8005080:	a201      	add	r2, pc, #4	@ (adr r2, 8005088 <UART_SetConfig+0xa0>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	08005099 	.word	0x08005099
 800508c:	080050a9 	.word	0x080050a9
 8005090:	080050a1 	.word	0x080050a1
 8005094:	080050b1 	.word	0x080050b1
 8005098:	2301      	movs	r3, #1
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509e:	e080      	b.n	80051a2 <UART_SetConfig+0x1ba>
 80050a0:	2302      	movs	r3, #2
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a6:	e07c      	b.n	80051a2 <UART_SetConfig+0x1ba>
 80050a8:	2304      	movs	r3, #4
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ae:	e078      	b.n	80051a2 <UART_SetConfig+0x1ba>
 80050b0:	2308      	movs	r3, #8
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b6:	e074      	b.n	80051a2 <UART_SetConfig+0x1ba>
 80050b8:	2310      	movs	r3, #16
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050be:	e070      	b.n	80051a2 <UART_SetConfig+0x1ba>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a8c      	ldr	r2, [pc, #560]	@ (80052f8 <UART_SetConfig+0x310>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d138      	bne.n	800513c <UART_SetConfig+0x154>
 80050ca:	4b8a      	ldr	r3, [pc, #552]	@ (80052f4 <UART_SetConfig+0x30c>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d0:	f003 030c 	and.w	r3, r3, #12
 80050d4:	2b0c      	cmp	r3, #12
 80050d6:	d82d      	bhi.n	8005134 <UART_SetConfig+0x14c>
 80050d8:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <UART_SetConfig+0xf8>)
 80050da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050de:	bf00      	nop
 80050e0:	08005115 	.word	0x08005115
 80050e4:	08005135 	.word	0x08005135
 80050e8:	08005135 	.word	0x08005135
 80050ec:	08005135 	.word	0x08005135
 80050f0:	08005125 	.word	0x08005125
 80050f4:	08005135 	.word	0x08005135
 80050f8:	08005135 	.word	0x08005135
 80050fc:	08005135 	.word	0x08005135
 8005100:	0800511d 	.word	0x0800511d
 8005104:	08005135 	.word	0x08005135
 8005108:	08005135 	.word	0x08005135
 800510c:	08005135 	.word	0x08005135
 8005110:	0800512d 	.word	0x0800512d
 8005114:	2300      	movs	r3, #0
 8005116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800511a:	e042      	b.n	80051a2 <UART_SetConfig+0x1ba>
 800511c:	2302      	movs	r3, #2
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005122:	e03e      	b.n	80051a2 <UART_SetConfig+0x1ba>
 8005124:	2304      	movs	r3, #4
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800512a:	e03a      	b.n	80051a2 <UART_SetConfig+0x1ba>
 800512c:	2308      	movs	r3, #8
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005132:	e036      	b.n	80051a2 <UART_SetConfig+0x1ba>
 8005134:	2310      	movs	r3, #16
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513a:	e032      	b.n	80051a2 <UART_SetConfig+0x1ba>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a6a      	ldr	r2, [pc, #424]	@ (80052ec <UART_SetConfig+0x304>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d12a      	bne.n	800519c <UART_SetConfig+0x1b4>
 8005146:	4b6b      	ldr	r3, [pc, #428]	@ (80052f4 <UART_SetConfig+0x30c>)
 8005148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800514c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005150:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005154:	d01a      	beq.n	800518c <UART_SetConfig+0x1a4>
 8005156:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800515a:	d81b      	bhi.n	8005194 <UART_SetConfig+0x1ac>
 800515c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005160:	d00c      	beq.n	800517c <UART_SetConfig+0x194>
 8005162:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005166:	d815      	bhi.n	8005194 <UART_SetConfig+0x1ac>
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <UART_SetConfig+0x18c>
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005170:	d008      	beq.n	8005184 <UART_SetConfig+0x19c>
 8005172:	e00f      	b.n	8005194 <UART_SetConfig+0x1ac>
 8005174:	2300      	movs	r3, #0
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800517a:	e012      	b.n	80051a2 <UART_SetConfig+0x1ba>
 800517c:	2302      	movs	r3, #2
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005182:	e00e      	b.n	80051a2 <UART_SetConfig+0x1ba>
 8005184:	2304      	movs	r3, #4
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800518a:	e00a      	b.n	80051a2 <UART_SetConfig+0x1ba>
 800518c:	2308      	movs	r3, #8
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005192:	e006      	b.n	80051a2 <UART_SetConfig+0x1ba>
 8005194:	2310      	movs	r3, #16
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800519a:	e002      	b.n	80051a2 <UART_SetConfig+0x1ba>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a51      	ldr	r2, [pc, #324]	@ (80052ec <UART_SetConfig+0x304>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d17a      	bne.n	80052a2 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d824      	bhi.n	80051fe <UART_SetConfig+0x216>
 80051b4:	a201      	add	r2, pc, #4	@ (adr r2, 80051bc <UART_SetConfig+0x1d4>)
 80051b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ba:	bf00      	nop
 80051bc:	080051e1 	.word	0x080051e1
 80051c0:	080051ff 	.word	0x080051ff
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	080051ff 	.word	0x080051ff
 80051cc:	080051ef 	.word	0x080051ef
 80051d0:	080051ff 	.word	0x080051ff
 80051d4:	080051ff 	.word	0x080051ff
 80051d8:	080051ff 	.word	0x080051ff
 80051dc:	080051f7 	.word	0x080051f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e0:	f7fe fbc6 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 80051e4:	61f8      	str	r0, [r7, #28]
        break;
 80051e6:	e010      	b.n	800520a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e8:	4b44      	ldr	r3, [pc, #272]	@ (80052fc <UART_SetConfig+0x314>)
 80051ea:	61fb      	str	r3, [r7, #28]
        break;
 80051ec:	e00d      	b.n	800520a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051ee:	f7fe fb27 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80051f2:	61f8      	str	r0, [r7, #28]
        break;
 80051f4:	e009      	b.n	800520a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051fa:	61fb      	str	r3, [r7, #28]
        break;
 80051fc:	e005      	b.n	800520a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005208:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8107 	beq.w	8005420 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	4413      	add	r3, r2
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	429a      	cmp	r2, r3
 8005220:	d305      	bcc.n	800522e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005228:	69fa      	ldr	r2, [r7, #28]
 800522a:	429a      	cmp	r2, r3
 800522c:	d903      	bls.n	8005236 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005234:	e0f4      	b.n	8005420 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	2200      	movs	r2, #0
 800523a:	461c      	mov	r4, r3
 800523c:	4615      	mov	r5, r2
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	022b      	lsls	r3, r5, #8
 8005248:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800524c:	0222      	lsls	r2, r4, #8
 800524e:	68f9      	ldr	r1, [r7, #12]
 8005250:	6849      	ldr	r1, [r1, #4]
 8005252:	0849      	lsrs	r1, r1, #1
 8005254:	2000      	movs	r0, #0
 8005256:	4688      	mov	r8, r1
 8005258:	4681      	mov	r9, r0
 800525a:	eb12 0a08 	adds.w	sl, r2, r8
 800525e:	eb43 0b09 	adc.w	fp, r3, r9
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005270:	4650      	mov	r0, sl
 8005272:	4659      	mov	r1, fp
 8005274:	f7fb fd18 	bl	8000ca8 <__aeabi_uldivmod>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4613      	mov	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005286:	d308      	bcc.n	800529a <UART_SetConfig+0x2b2>
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800528e:	d204      	bcs.n	800529a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	60da      	str	r2, [r3, #12]
 8005298:	e0c2      	b.n	8005420 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052a0:	e0be      	b.n	8005420 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052aa:	d16a      	bne.n	8005382 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80052ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d834      	bhi.n	800531e <UART_SetConfig+0x336>
 80052b4:	a201      	add	r2, pc, #4	@ (adr r2, 80052bc <UART_SetConfig+0x2d4>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	080052e1 	.word	0x080052e1
 80052c0:	08005301 	.word	0x08005301
 80052c4:	08005309 	.word	0x08005309
 80052c8:	0800531f 	.word	0x0800531f
 80052cc:	0800530f 	.word	0x0800530f
 80052d0:	0800531f 	.word	0x0800531f
 80052d4:	0800531f 	.word	0x0800531f
 80052d8:	0800531f 	.word	0x0800531f
 80052dc:	08005317 	.word	0x08005317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e0:	f7fe fb46 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 80052e4:	61f8      	str	r0, [r7, #28]
        break;
 80052e6:	e020      	b.n	800532a <UART_SetConfig+0x342>
 80052e8:	efff69f3 	.word	0xefff69f3
 80052ec:	40008000 	.word	0x40008000
 80052f0:	40013800 	.word	0x40013800
 80052f4:	40021000 	.word	0x40021000
 80052f8:	40004400 	.word	0x40004400
 80052fc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005300:	f7fe fb4c 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8005304:	61f8      	str	r0, [r7, #28]
        break;
 8005306:	e010      	b.n	800532a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005308:	4b4c      	ldr	r3, [pc, #304]	@ (800543c <UART_SetConfig+0x454>)
 800530a:	61fb      	str	r3, [r7, #28]
        break;
 800530c:	e00d      	b.n	800532a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800530e:	f7fe fa97 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 8005312:	61f8      	str	r0, [r7, #28]
        break;
 8005314:	e009      	b.n	800532a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800531a:	61fb      	str	r3, [r7, #28]
        break;
 800531c:	e005      	b.n	800532a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d077      	beq.n	8005420 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	005a      	lsls	r2, r3, #1
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	085b      	lsrs	r3, r3, #1
 800533a:	441a      	add	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	fbb2 f3f3 	udiv	r3, r2, r3
 8005344:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	2b0f      	cmp	r3, #15
 800534a:	d916      	bls.n	800537a <UART_SetConfig+0x392>
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005352:	d212      	bcs.n	800537a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	b29b      	uxth	r3, r3
 8005358:	f023 030f 	bic.w	r3, r3, #15
 800535c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	085b      	lsrs	r3, r3, #1
 8005362:	b29b      	uxth	r3, r3
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	b29a      	uxth	r2, r3
 800536a:	8afb      	ldrh	r3, [r7, #22]
 800536c:	4313      	orrs	r3, r2
 800536e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	8afa      	ldrh	r2, [r7, #22]
 8005376:	60da      	str	r2, [r3, #12]
 8005378:	e052      	b.n	8005420 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005380:	e04e      	b.n	8005420 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005382:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005386:	2b08      	cmp	r3, #8
 8005388:	d827      	bhi.n	80053da <UART_SetConfig+0x3f2>
 800538a:	a201      	add	r2, pc, #4	@ (adr r2, 8005390 <UART_SetConfig+0x3a8>)
 800538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	080053db 	.word	0x080053db
 80053a0:	080053cb 	.word	0x080053cb
 80053a4:	080053db 	.word	0x080053db
 80053a8:	080053db 	.word	0x080053db
 80053ac:	080053db 	.word	0x080053db
 80053b0:	080053d3 	.word	0x080053d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053b4:	f7fe fadc 	bl	8003970 <HAL_RCC_GetPCLK1Freq>
 80053b8:	61f8      	str	r0, [r7, #28]
        break;
 80053ba:	e014      	b.n	80053e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053bc:	f7fe faee 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 80053c0:	61f8      	str	r0, [r7, #28]
        break;
 80053c2:	e010      	b.n	80053e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c4:	4b1d      	ldr	r3, [pc, #116]	@ (800543c <UART_SetConfig+0x454>)
 80053c6:	61fb      	str	r3, [r7, #28]
        break;
 80053c8:	e00d      	b.n	80053e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ca:	f7fe fa39 	bl	8003840 <HAL_RCC_GetSysClockFreq>
 80053ce:	61f8      	str	r0, [r7, #28]
        break;
 80053d0:	e009      	b.n	80053e6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053d6:	61fb      	str	r3, [r7, #28]
        break;
 80053d8:	e005      	b.n	80053e6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053e4:	bf00      	nop
    }

    if (pclk != 0U)
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d019      	beq.n	8005420 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	085a      	lsrs	r2, r3, #1
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	441a      	add	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	2b0f      	cmp	r3, #15
 8005404:	d909      	bls.n	800541a <UART_SetConfig+0x432>
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800540c:	d205      	bcs.n	800541a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	b29a      	uxth	r2, r3
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	e002      	b.n	8005420 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2200      	movs	r2, #0
 8005424:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800542c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005430:	4618      	mov	r0, r3
 8005432:	3728      	adds	r7, #40	@ 0x28
 8005434:	46bd      	mov	sp, r7
 8005436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800543a:	bf00      	nop
 800543c:	00f42400 	.word	0x00f42400

08005440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00a      	beq.n	80054d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800551c:	2b00      	cmp	r3, #0
 800551e:	d01a      	beq.n	8005556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800553e:	d10a      	bne.n	8005556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	605a      	str	r2, [r3, #4]
  }
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b098      	sub	sp, #96	@ 0x60
 8005588:	af02      	add	r7, sp, #8
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005594:	f7fc feaa 	bl	80022ec <HAL_GetTick>
 8005598:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d12e      	bne.n	8005606 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b0:	2200      	movs	r2, #0
 80055b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f88c 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d021      	beq.n	8005606 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	e853 3f00 	ldrex	r3, [r3]
 80055ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	461a      	mov	r2, r3
 80055de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80055e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e6      	bne.n	80055c2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2220      	movs	r2, #32
 80055f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e062      	b.n	80056cc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b04      	cmp	r3, #4
 8005612:	d149      	bne.n	80056a8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005614:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561c:	2200      	movs	r2, #0
 800561e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f856 	bl	80056d4 <UART_WaitOnFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d03c      	beq.n	80056a8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	623b      	str	r3, [r7, #32]
   return(result);
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800564c:	633b      	str	r3, [r7, #48]	@ 0x30
 800564e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800565a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e6      	bne.n	800562e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3308      	adds	r3, #8
 8005666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0301 	bic.w	r3, r3, #1
 8005676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3308      	adds	r3, #8
 800567e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005680:	61fa      	str	r2, [r7, #28]
 8005682:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	69b9      	ldr	r1, [r7, #24]
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	617b      	str	r3, [r7, #20]
   return(result);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e5      	bne.n	8005660 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e011      	b.n	80056cc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3758      	adds	r7, #88	@ 0x58
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	603b      	str	r3, [r7, #0]
 80056e0:	4613      	mov	r3, r2
 80056e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e4:	e049      	b.n	800577a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d045      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ee:	f7fc fdfd 	bl	80022ec <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d302      	bcc.n	8005704 <UART_WaitOnFlagUntilTimeout+0x30>
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e048      	b.n	800579a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b00      	cmp	r3, #0
 8005714:	d031      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b08      	cmp	r3, #8
 8005722:	d110      	bne.n	8005746 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2208      	movs	r2, #8
 800572a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 f8ff 	bl	8005930 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2208      	movs	r2, #8
 8005736:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e029      	b.n	800579a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005754:	d111      	bne.n	800577a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800575e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f8e5 	bl	8005930 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e00f      	b.n	800579a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	4013      	ands	r3, r2
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	429a      	cmp	r2, r3
 8005788:	bf0c      	ite	eq
 800578a:	2301      	moveq	r3, #1
 800578c:	2300      	movne	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	461a      	mov	r2, r3
 8005792:	79fb      	ldrb	r3, [r7, #7]
 8005794:	429a      	cmp	r2, r3
 8005796:	d0a6      	beq.n	80056e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
	...

080057a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b096      	sub	sp, #88	@ 0x58
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	4613      	mov	r3, r2
 80057b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2222      	movs	r2, #34	@ 0x22
 80057cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d028      	beq.n	800582a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057dc:	4a3e      	ldr	r2, [pc, #248]	@ (80058d8 <UART_Start_Receive_DMA+0x134>)
 80057de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057e4:	4a3d      	ldr	r2, [pc, #244]	@ (80058dc <UART_Start_Receive_DMA+0x138>)
 80057e6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ec:	4a3c      	ldr	r2, [pc, #240]	@ (80058e0 <UART_Start_Receive_DMA+0x13c>)
 80057ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057f4:	2200      	movs	r2, #0
 80057f6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3324      	adds	r3, #36	@ 0x24
 8005802:	4619      	mov	r1, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005808:	461a      	mov	r2, r3
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	f7fc ff44 	bl	8002698 <HAL_DMA_Start_IT>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d009      	beq.n	800582a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2210      	movs	r2, #16
 800581a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2220      	movs	r2, #32
 8005822:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e051      	b.n	80058ce <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d018      	beq.n	8005864 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005846:	657b      	str	r3, [r7, #84]	@ 0x54
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005850:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005852:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005856:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800585e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e6      	bne.n	8005832 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3308      	adds	r3, #8
 800586a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005876:	f043 0301 	orr.w	r3, r3, #1
 800587a:	653b      	str	r3, [r7, #80]	@ 0x50
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
 8005882:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005884:	637a      	str	r2, [r7, #52]	@ 0x34
 8005886:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800588a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e5      	bne.n	8005864 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3308      	adds	r3, #8
 800589e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	613b      	str	r3, [r7, #16]
   return(result);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3308      	adds	r3, #8
 80058b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058b8:	623a      	str	r2, [r7, #32]
 80058ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	69f9      	ldr	r1, [r7, #28]
 80058be:	6a3a      	ldr	r2, [r7, #32]
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e5      	bne.n	8005898 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3758      	adds	r7, #88	@ 0x58
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	08005aaf 	.word	0x08005aaf
 80058dc:	08005bdb 	.word	0x08005bdb
 80058e0:	08005c19 	.word	0x08005c19

080058e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b089      	sub	sp, #36	@ 0x24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	e853 3f00 	ldrex	r3, [r3]
 80058f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	61bb      	str	r3, [r7, #24]
 800590c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	6979      	ldr	r1, [r7, #20]
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	e841 2300 	strex	r3, r2, [r1]
 8005916:	613b      	str	r3, [r7, #16]
   return(result);
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d1e6      	bne.n	80058ec <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005924:	bf00      	nop
 8005926:	3724      	adds	r7, #36	@ 0x24
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005930:	b480      	push	{r7}
 8005932:	b095      	sub	sp, #84	@ 0x54
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005948:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800594c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	461a      	mov	r2, r3
 8005954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005956:	643b      	str	r3, [r7, #64]	@ 0x40
 8005958:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800595c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e6      	bne.n	8005938 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3308      	adds	r3, #8
 8005970:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	61fb      	str	r3, [r7, #28]
   return(result);
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f023 0301 	bic.w	r3, r3, #1
 8005980:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3308      	adds	r3, #8
 8005988:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800598a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800598c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005990:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e5      	bne.n	800596a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d118      	bne.n	80059d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f023 0310 	bic.w	r3, r3, #16
 80059ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6979      	ldr	r1, [r7, #20]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	613b      	str	r3, [r7, #16]
   return(result);
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e6      	bne.n	80059a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80059ec:	bf00      	nop
 80059ee:	3754      	adds	r7, #84	@ 0x54
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b090      	sub	sp, #64	@ 0x40
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a04:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d137      	bne.n	8005a84 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3308      	adds	r3, #8
 8005a22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005a3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e5      	bne.n	8005a1c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	69b9      	ldr	r1, [r7, #24]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	e841 2300 	strex	r3, r2, [r1]
 8005a7a:	617b      	str	r3, [r7, #20]
   return(result);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1e6      	bne.n	8005a50 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005a82:	e002      	b.n	8005a8a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005a84:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005a86:	f7fc f847 	bl	8001b18 <HAL_UART_TxCpltCallback>
}
 8005a8a:	bf00      	nop
 8005a8c:	3740      	adds	r7, #64	@ 0x40
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a9e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f7ff fa73 	bl	8004f8c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aa6:	bf00      	nop
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b09c      	sub	sp, #112	@ 0x70
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0320 	and.w	r3, r3, #32
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d171      	bne.n	8005bae <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005aca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005acc:	2200      	movs	r2, #0
 8005ace:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ae0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ae2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ae6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	461a      	mov	r2, r3
 8005aee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005af0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005af2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005af6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e6      	bne.n	8005ad2 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3308      	adds	r3, #8
 8005b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b16:	f023 0301 	bic.w	r3, r3, #1
 8005b1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3308      	adds	r3, #8
 8005b22:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005b24:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b26:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e5      	bne.n	8005b04 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	623b      	str	r3, [r7, #32]
   return(result);
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3308      	adds	r3, #8
 8005b56:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005b58:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b60:	e841 2300 	strex	r3, r2, [r1]
 8005b64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1e5      	bne.n	8005b38 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d118      	bne.n	8005bae <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	e853 3f00 	ldrex	r3, [r3]
 8005b88:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f023 0310 	bic.w	r3, r3, #16
 8005b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9e:	69b9      	ldr	r1, [r7, #24]
 8005ba0:	69fa      	ldr	r2, [r7, #28]
 8005ba2:	e841 2300 	strex	r3, r2, [r1]
 8005ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1e6      	bne.n	8005b7c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d107      	bne.n	8005bcc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bbe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005bc6:	f7ff f9f5 	bl	8004fb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005bca:	e002      	b.n	8005bd2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005bcc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005bce:	f7fb ffb3 	bl	8001b38 <HAL_UART_RxCpltCallback>
}
 8005bd2:	bf00      	nop
 8005bd4:	3770      	adds	r7, #112	@ 0x70
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d109      	bne.n	8005c0a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005bfc:	085b      	lsrs	r3, r3, #1
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	4619      	mov	r1, r3
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f7ff f9d6 	bl	8004fb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c08:	e002      	b.n	8005c10 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f7ff f9c8 	bl	8004fa0 <HAL_UART_RxHalfCpltCallback>
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c24:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c2a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c32:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3e:	2b80      	cmp	r3, #128	@ 0x80
 8005c40:	d109      	bne.n	8005c56 <UART_DMAError+0x3e>
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b21      	cmp	r3, #33	@ 0x21
 8005c46:	d106      	bne.n	8005c56 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005c50:	6978      	ldr	r0, [r7, #20]
 8005c52:	f7ff fe47 	bl	80058e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c60:	2b40      	cmp	r3, #64	@ 0x40
 8005c62:	d109      	bne.n	8005c78 <UART_DMAError+0x60>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b22      	cmp	r3, #34	@ 0x22
 8005c68:	d106      	bne.n	8005c78 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005c72:	6978      	ldr	r0, [r7, #20]
 8005c74:	f7ff fe5c 	bl	8005930 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c7e:	f043 0210 	orr.w	r2, r3, #16
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c88:	6978      	ldr	r0, [r7, #20]
 8005c8a:	f7fb ff65 	bl	8001b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c8e:	bf00      	nop
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7fb ff4f 	bl	8001b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b088      	sub	sp, #32
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cde:	61fb      	str	r3, [r7, #28]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6979      	ldr	r1, [r7, #20]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e6      	bne.n	8005cca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7fb ff05 	bl	8001b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d0e:	bf00      	nop
 8005d10:	3720      	adds	r7, #32
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <srand>:
 8005d2c:	b538      	push	{r3, r4, r5, lr}
 8005d2e:	4b10      	ldr	r3, [pc, #64]	@ (8005d70 <srand+0x44>)
 8005d30:	681d      	ldr	r5, [r3, #0]
 8005d32:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005d34:	4604      	mov	r4, r0
 8005d36:	b9b3      	cbnz	r3, 8005d66 <srand+0x3a>
 8005d38:	2018      	movs	r0, #24
 8005d3a:	f002 ffa1 	bl	8008c80 <malloc>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6328      	str	r0, [r5, #48]	@ 0x30
 8005d42:	b920      	cbnz	r0, 8005d4e <srand+0x22>
 8005d44:	4b0b      	ldr	r3, [pc, #44]	@ (8005d74 <srand+0x48>)
 8005d46:	480c      	ldr	r0, [pc, #48]	@ (8005d78 <srand+0x4c>)
 8005d48:	2146      	movs	r1, #70	@ 0x46
 8005d4a:	f001 fda9 	bl	80078a0 <__assert_func>
 8005d4e:	490b      	ldr	r1, [pc, #44]	@ (8005d7c <srand+0x50>)
 8005d50:	4b0b      	ldr	r3, [pc, #44]	@ (8005d80 <srand+0x54>)
 8005d52:	e9c0 1300 	strd	r1, r3, [r0]
 8005d56:	4b0b      	ldr	r3, [pc, #44]	@ (8005d84 <srand+0x58>)
 8005d58:	6083      	str	r3, [r0, #8]
 8005d5a:	230b      	movs	r3, #11
 8005d5c:	8183      	strh	r3, [r0, #12]
 8005d5e:	2100      	movs	r1, #0
 8005d60:	2001      	movs	r0, #1
 8005d62:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005d66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005d68:	2200      	movs	r2, #0
 8005d6a:	611c      	str	r4, [r3, #16]
 8005d6c:	615a      	str	r2, [r3, #20]
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	20000190 	.word	0x20000190
 8005d74:	0800a294 	.word	0x0800a294
 8005d78:	0800a2ab 	.word	0x0800a2ab
 8005d7c:	abcd330e 	.word	0xabcd330e
 8005d80:	e66d1234 	.word	0xe66d1234
 8005d84:	0005deec 	.word	0x0005deec

08005d88 <rand>:
 8005d88:	4b16      	ldr	r3, [pc, #88]	@ (8005de4 <rand+0x5c>)
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	681c      	ldr	r4, [r3, #0]
 8005d8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005d90:	b9b3      	cbnz	r3, 8005dc0 <rand+0x38>
 8005d92:	2018      	movs	r0, #24
 8005d94:	f002 ff74 	bl	8008c80 <malloc>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	6320      	str	r0, [r4, #48]	@ 0x30
 8005d9c:	b920      	cbnz	r0, 8005da8 <rand+0x20>
 8005d9e:	4b12      	ldr	r3, [pc, #72]	@ (8005de8 <rand+0x60>)
 8005da0:	4812      	ldr	r0, [pc, #72]	@ (8005dec <rand+0x64>)
 8005da2:	2152      	movs	r1, #82	@ 0x52
 8005da4:	f001 fd7c 	bl	80078a0 <__assert_func>
 8005da8:	4911      	ldr	r1, [pc, #68]	@ (8005df0 <rand+0x68>)
 8005daa:	4b12      	ldr	r3, [pc, #72]	@ (8005df4 <rand+0x6c>)
 8005dac:	e9c0 1300 	strd	r1, r3, [r0]
 8005db0:	4b11      	ldr	r3, [pc, #68]	@ (8005df8 <rand+0x70>)
 8005db2:	6083      	str	r3, [r0, #8]
 8005db4:	230b      	movs	r3, #11
 8005db6:	8183      	strh	r3, [r0, #12]
 8005db8:	2100      	movs	r1, #0
 8005dba:	2001      	movs	r0, #1
 8005dbc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005dc0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005dc2:	480e      	ldr	r0, [pc, #56]	@ (8005dfc <rand+0x74>)
 8005dc4:	690b      	ldr	r3, [r1, #16]
 8005dc6:	694c      	ldr	r4, [r1, #20]
 8005dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8005e00 <rand+0x78>)
 8005dca:	4358      	muls	r0, r3
 8005dcc:	fb02 0004 	mla	r0, r2, r4, r0
 8005dd0:	fba3 3202 	umull	r3, r2, r3, r2
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	eb40 0002 	adc.w	r0, r0, r2
 8005dda:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005dde:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005de2:	bd10      	pop	{r4, pc}
 8005de4:	20000190 	.word	0x20000190
 8005de8:	0800a294 	.word	0x0800a294
 8005dec:	0800a2ab 	.word	0x0800a2ab
 8005df0:	abcd330e 	.word	0xabcd330e
 8005df4:	e66d1234 	.word	0xe66d1234
 8005df8:	0005deec 	.word	0x0005deec
 8005dfc:	5851f42d 	.word	0x5851f42d
 8005e00:	4c957f2d 	.word	0x4c957f2d

08005e04 <sulp>:
 8005e04:	b570      	push	{r4, r5, r6, lr}
 8005e06:	4604      	mov	r4, r0
 8005e08:	460d      	mov	r5, r1
 8005e0a:	ec45 4b10 	vmov	d0, r4, r5
 8005e0e:	4616      	mov	r6, r2
 8005e10:	f003 fb72 	bl	80094f8 <__ulp>
 8005e14:	ec51 0b10 	vmov	r0, r1, d0
 8005e18:	b17e      	cbz	r6, 8005e3a <sulp+0x36>
 8005e1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005e1e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	dd09      	ble.n	8005e3a <sulp+0x36>
 8005e26:	051b      	lsls	r3, r3, #20
 8005e28:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005e2c:	2400      	movs	r4, #0
 8005e2e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005e32:	4622      	mov	r2, r4
 8005e34:	462b      	mov	r3, r5
 8005e36:	f7fa fbef 	bl	8000618 <__aeabi_dmul>
 8005e3a:	ec41 0b10 	vmov	d0, r0, r1
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}

08005e40 <_strtod_l>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	b09f      	sub	sp, #124	@ 0x7c
 8005e46:	460c      	mov	r4, r1
 8005e48:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	921a      	str	r2, [sp, #104]	@ 0x68
 8005e4e:	9005      	str	r0, [sp, #20]
 8005e50:	f04f 0a00 	mov.w	sl, #0
 8005e54:	f04f 0b00 	mov.w	fp, #0
 8005e58:	460a      	mov	r2, r1
 8005e5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005e5c:	7811      	ldrb	r1, [r2, #0]
 8005e5e:	292b      	cmp	r1, #43	@ 0x2b
 8005e60:	d04a      	beq.n	8005ef8 <_strtod_l+0xb8>
 8005e62:	d838      	bhi.n	8005ed6 <_strtod_l+0x96>
 8005e64:	290d      	cmp	r1, #13
 8005e66:	d832      	bhi.n	8005ece <_strtod_l+0x8e>
 8005e68:	2908      	cmp	r1, #8
 8005e6a:	d832      	bhi.n	8005ed2 <_strtod_l+0x92>
 8005e6c:	2900      	cmp	r1, #0
 8005e6e:	d03b      	beq.n	8005ee8 <_strtod_l+0xa8>
 8005e70:	2200      	movs	r2, #0
 8005e72:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005e74:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005e76:	782a      	ldrb	r2, [r5, #0]
 8005e78:	2a30      	cmp	r2, #48	@ 0x30
 8005e7a:	f040 80b3 	bne.w	8005fe4 <_strtod_l+0x1a4>
 8005e7e:	786a      	ldrb	r2, [r5, #1]
 8005e80:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005e84:	2a58      	cmp	r2, #88	@ 0x58
 8005e86:	d16e      	bne.n	8005f66 <_strtod_l+0x126>
 8005e88:	9302      	str	r3, [sp, #8]
 8005e8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	ab1a      	add	r3, sp, #104	@ 0x68
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	4a8e      	ldr	r2, [pc, #568]	@ (80060cc <_strtod_l+0x28c>)
 8005e94:	9805      	ldr	r0, [sp, #20]
 8005e96:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005e98:	a919      	add	r1, sp, #100	@ 0x64
 8005e9a:	f002 fc1f 	bl	80086dc <__gethex>
 8005e9e:	f010 060f 	ands.w	r6, r0, #15
 8005ea2:	4604      	mov	r4, r0
 8005ea4:	d005      	beq.n	8005eb2 <_strtod_l+0x72>
 8005ea6:	2e06      	cmp	r6, #6
 8005ea8:	d128      	bne.n	8005efc <_strtod_l+0xbc>
 8005eaa:	3501      	adds	r5, #1
 8005eac:	2300      	movs	r3, #0
 8005eae:	9519      	str	r5, [sp, #100]	@ 0x64
 8005eb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eb2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f040 858e 	bne.w	80069d6 <_strtod_l+0xb96>
 8005eba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ebc:	b1cb      	cbz	r3, 8005ef2 <_strtod_l+0xb2>
 8005ebe:	4652      	mov	r2, sl
 8005ec0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005ec4:	ec43 2b10 	vmov	d0, r2, r3
 8005ec8:	b01f      	add	sp, #124	@ 0x7c
 8005eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ece:	2920      	cmp	r1, #32
 8005ed0:	d1ce      	bne.n	8005e70 <_strtod_l+0x30>
 8005ed2:	3201      	adds	r2, #1
 8005ed4:	e7c1      	b.n	8005e5a <_strtod_l+0x1a>
 8005ed6:	292d      	cmp	r1, #45	@ 0x2d
 8005ed8:	d1ca      	bne.n	8005e70 <_strtod_l+0x30>
 8005eda:	2101      	movs	r1, #1
 8005edc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005ede:	1c51      	adds	r1, r2, #1
 8005ee0:	9119      	str	r1, [sp, #100]	@ 0x64
 8005ee2:	7852      	ldrb	r2, [r2, #1]
 8005ee4:	2a00      	cmp	r2, #0
 8005ee6:	d1c5      	bne.n	8005e74 <_strtod_l+0x34>
 8005ee8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005eea:	9419      	str	r4, [sp, #100]	@ 0x64
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 8570 	bne.w	80069d2 <_strtod_l+0xb92>
 8005ef2:	4652      	mov	r2, sl
 8005ef4:	465b      	mov	r3, fp
 8005ef6:	e7e5      	b.n	8005ec4 <_strtod_l+0x84>
 8005ef8:	2100      	movs	r1, #0
 8005efa:	e7ef      	b.n	8005edc <_strtod_l+0x9c>
 8005efc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005efe:	b13a      	cbz	r2, 8005f10 <_strtod_l+0xd0>
 8005f00:	2135      	movs	r1, #53	@ 0x35
 8005f02:	a81c      	add	r0, sp, #112	@ 0x70
 8005f04:	f003 fbf2 	bl	80096ec <__copybits>
 8005f08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f0a:	9805      	ldr	r0, [sp, #20]
 8005f0c:	f002 ffc0 	bl	8008e90 <_Bfree>
 8005f10:	3e01      	subs	r6, #1
 8005f12:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005f14:	2e04      	cmp	r6, #4
 8005f16:	d806      	bhi.n	8005f26 <_strtod_l+0xe6>
 8005f18:	e8df f006 	tbb	[pc, r6]
 8005f1c:	201d0314 	.word	0x201d0314
 8005f20:	14          	.byte	0x14
 8005f21:	00          	.byte	0x00
 8005f22:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005f26:	05e1      	lsls	r1, r4, #23
 8005f28:	bf48      	it	mi
 8005f2a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005f2e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f32:	0d1b      	lsrs	r3, r3, #20
 8005f34:	051b      	lsls	r3, r3, #20
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1bb      	bne.n	8005eb2 <_strtod_l+0x72>
 8005f3a:	f001 fc6b 	bl	8007814 <__errno>
 8005f3e:	2322      	movs	r3, #34	@ 0x22
 8005f40:	6003      	str	r3, [r0, #0]
 8005f42:	e7b6      	b.n	8005eb2 <_strtod_l+0x72>
 8005f44:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005f48:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005f4c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005f50:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005f54:	e7e7      	b.n	8005f26 <_strtod_l+0xe6>
 8005f56:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80060d4 <_strtod_l+0x294>
 8005f5a:	e7e4      	b.n	8005f26 <_strtod_l+0xe6>
 8005f5c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005f60:	f04f 3aff 	mov.w	sl, #4294967295
 8005f64:	e7df      	b.n	8005f26 <_strtod_l+0xe6>
 8005f66:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f68:	1c5a      	adds	r2, r3, #1
 8005f6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b30      	cmp	r3, #48	@ 0x30
 8005f70:	d0f9      	beq.n	8005f66 <_strtod_l+0x126>
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d09d      	beq.n	8005eb2 <_strtod_l+0x72>
 8005f76:	2301      	movs	r3, #1
 8005f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f7c:	930c      	str	r3, [sp, #48]	@ 0x30
 8005f7e:	2300      	movs	r3, #0
 8005f80:	9308      	str	r3, [sp, #32]
 8005f82:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f84:	461f      	mov	r7, r3
 8005f86:	220a      	movs	r2, #10
 8005f88:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005f8a:	7805      	ldrb	r5, [r0, #0]
 8005f8c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005f90:	b2d9      	uxtb	r1, r3
 8005f92:	2909      	cmp	r1, #9
 8005f94:	d928      	bls.n	8005fe8 <_strtod_l+0x1a8>
 8005f96:	494e      	ldr	r1, [pc, #312]	@ (80060d0 <_strtod_l+0x290>)
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f001 fbdf 	bl	800775c <strncmp>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d032      	beq.n	8006008 <_strtod_l+0x1c8>
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	462a      	mov	r2, r5
 8005fa6:	4681      	mov	r9, r0
 8005fa8:	463d      	mov	r5, r7
 8005faa:	4603      	mov	r3, r0
 8005fac:	2a65      	cmp	r2, #101	@ 0x65
 8005fae:	d001      	beq.n	8005fb4 <_strtod_l+0x174>
 8005fb0:	2a45      	cmp	r2, #69	@ 0x45
 8005fb2:	d114      	bne.n	8005fde <_strtod_l+0x19e>
 8005fb4:	b91d      	cbnz	r5, 8005fbe <_strtod_l+0x17e>
 8005fb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fb8:	4302      	orrs	r2, r0
 8005fba:	d095      	beq.n	8005ee8 <_strtod_l+0xa8>
 8005fbc:	2500      	movs	r5, #0
 8005fbe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005fc0:	1c62      	adds	r2, r4, #1
 8005fc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005fc4:	7862      	ldrb	r2, [r4, #1]
 8005fc6:	2a2b      	cmp	r2, #43	@ 0x2b
 8005fc8:	d077      	beq.n	80060ba <_strtod_l+0x27a>
 8005fca:	2a2d      	cmp	r2, #45	@ 0x2d
 8005fcc:	d07b      	beq.n	80060c6 <_strtod_l+0x286>
 8005fce:	f04f 0c00 	mov.w	ip, #0
 8005fd2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005fd6:	2909      	cmp	r1, #9
 8005fd8:	f240 8082 	bls.w	80060e0 <_strtod_l+0x2a0>
 8005fdc:	9419      	str	r4, [sp, #100]	@ 0x64
 8005fde:	f04f 0800 	mov.w	r8, #0
 8005fe2:	e0a2      	b.n	800612a <_strtod_l+0x2ea>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e7c7      	b.n	8005f78 <_strtod_l+0x138>
 8005fe8:	2f08      	cmp	r7, #8
 8005fea:	bfd5      	itete	le
 8005fec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005fee:	9908      	ldrgt	r1, [sp, #32]
 8005ff0:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ff4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005ff8:	f100 0001 	add.w	r0, r0, #1
 8005ffc:	bfd4      	ite	le
 8005ffe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006000:	9308      	strgt	r3, [sp, #32]
 8006002:	3701      	adds	r7, #1
 8006004:	9019      	str	r0, [sp, #100]	@ 0x64
 8006006:	e7bf      	b.n	8005f88 <_strtod_l+0x148>
 8006008:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	9219      	str	r2, [sp, #100]	@ 0x64
 800600e:	785a      	ldrb	r2, [r3, #1]
 8006010:	b37f      	cbz	r7, 8006072 <_strtod_l+0x232>
 8006012:	4681      	mov	r9, r0
 8006014:	463d      	mov	r5, r7
 8006016:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800601a:	2b09      	cmp	r3, #9
 800601c:	d912      	bls.n	8006044 <_strtod_l+0x204>
 800601e:	2301      	movs	r3, #1
 8006020:	e7c4      	b.n	8005fac <_strtod_l+0x16c>
 8006022:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006024:	1c5a      	adds	r2, r3, #1
 8006026:	9219      	str	r2, [sp, #100]	@ 0x64
 8006028:	785a      	ldrb	r2, [r3, #1]
 800602a:	3001      	adds	r0, #1
 800602c:	2a30      	cmp	r2, #48	@ 0x30
 800602e:	d0f8      	beq.n	8006022 <_strtod_l+0x1e2>
 8006030:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006034:	2b08      	cmp	r3, #8
 8006036:	f200 84d3 	bhi.w	80069e0 <_strtod_l+0xba0>
 800603a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800603c:	930c      	str	r3, [sp, #48]	@ 0x30
 800603e:	4681      	mov	r9, r0
 8006040:	2000      	movs	r0, #0
 8006042:	4605      	mov	r5, r0
 8006044:	3a30      	subs	r2, #48	@ 0x30
 8006046:	f100 0301 	add.w	r3, r0, #1
 800604a:	d02a      	beq.n	80060a2 <_strtod_l+0x262>
 800604c:	4499      	add	r9, r3
 800604e:	eb00 0c05 	add.w	ip, r0, r5
 8006052:	462b      	mov	r3, r5
 8006054:	210a      	movs	r1, #10
 8006056:	4563      	cmp	r3, ip
 8006058:	d10d      	bne.n	8006076 <_strtod_l+0x236>
 800605a:	1c69      	adds	r1, r5, #1
 800605c:	4401      	add	r1, r0
 800605e:	4428      	add	r0, r5
 8006060:	2808      	cmp	r0, #8
 8006062:	dc16      	bgt.n	8006092 <_strtod_l+0x252>
 8006064:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006066:	230a      	movs	r3, #10
 8006068:	fb03 2300 	mla	r3, r3, r0, r2
 800606c:	930a      	str	r3, [sp, #40]	@ 0x28
 800606e:	2300      	movs	r3, #0
 8006070:	e018      	b.n	80060a4 <_strtod_l+0x264>
 8006072:	4638      	mov	r0, r7
 8006074:	e7da      	b.n	800602c <_strtod_l+0x1ec>
 8006076:	2b08      	cmp	r3, #8
 8006078:	f103 0301 	add.w	r3, r3, #1
 800607c:	dc03      	bgt.n	8006086 <_strtod_l+0x246>
 800607e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006080:	434e      	muls	r6, r1
 8006082:	960a      	str	r6, [sp, #40]	@ 0x28
 8006084:	e7e7      	b.n	8006056 <_strtod_l+0x216>
 8006086:	2b10      	cmp	r3, #16
 8006088:	bfde      	ittt	le
 800608a:	9e08      	ldrle	r6, [sp, #32]
 800608c:	434e      	mulle	r6, r1
 800608e:	9608      	strle	r6, [sp, #32]
 8006090:	e7e1      	b.n	8006056 <_strtod_l+0x216>
 8006092:	280f      	cmp	r0, #15
 8006094:	dceb      	bgt.n	800606e <_strtod_l+0x22e>
 8006096:	9808      	ldr	r0, [sp, #32]
 8006098:	230a      	movs	r3, #10
 800609a:	fb03 2300 	mla	r3, r3, r0, r2
 800609e:	9308      	str	r3, [sp, #32]
 80060a0:	e7e5      	b.n	800606e <_strtod_l+0x22e>
 80060a2:	4629      	mov	r1, r5
 80060a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80060a6:	1c50      	adds	r0, r2, #1
 80060a8:	9019      	str	r0, [sp, #100]	@ 0x64
 80060aa:	7852      	ldrb	r2, [r2, #1]
 80060ac:	4618      	mov	r0, r3
 80060ae:	460d      	mov	r5, r1
 80060b0:	e7b1      	b.n	8006016 <_strtod_l+0x1d6>
 80060b2:	f04f 0900 	mov.w	r9, #0
 80060b6:	2301      	movs	r3, #1
 80060b8:	e77d      	b.n	8005fb6 <_strtod_l+0x176>
 80060ba:	f04f 0c00 	mov.w	ip, #0
 80060be:	1ca2      	adds	r2, r4, #2
 80060c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80060c2:	78a2      	ldrb	r2, [r4, #2]
 80060c4:	e785      	b.n	8005fd2 <_strtod_l+0x192>
 80060c6:	f04f 0c01 	mov.w	ip, #1
 80060ca:	e7f8      	b.n	80060be <_strtod_l+0x27e>
 80060cc:	0800a31c 	.word	0x0800a31c
 80060d0:	0800a303 	.word	0x0800a303
 80060d4:	7ff00000 	.word	0x7ff00000
 80060d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80060da:	1c51      	adds	r1, r2, #1
 80060dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80060de:	7852      	ldrb	r2, [r2, #1]
 80060e0:	2a30      	cmp	r2, #48	@ 0x30
 80060e2:	d0f9      	beq.n	80060d8 <_strtod_l+0x298>
 80060e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80060e8:	2908      	cmp	r1, #8
 80060ea:	f63f af78 	bhi.w	8005fde <_strtod_l+0x19e>
 80060ee:	3a30      	subs	r2, #48	@ 0x30
 80060f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80060f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80060f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80060f6:	f04f 080a 	mov.w	r8, #10
 80060fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80060fc:	1c56      	adds	r6, r2, #1
 80060fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8006100:	7852      	ldrb	r2, [r2, #1]
 8006102:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006106:	f1be 0f09 	cmp.w	lr, #9
 800610a:	d939      	bls.n	8006180 <_strtod_l+0x340>
 800610c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800610e:	1a76      	subs	r6, r6, r1
 8006110:	2e08      	cmp	r6, #8
 8006112:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006116:	dc03      	bgt.n	8006120 <_strtod_l+0x2e0>
 8006118:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800611a:	4588      	cmp	r8, r1
 800611c:	bfa8      	it	ge
 800611e:	4688      	movge	r8, r1
 8006120:	f1bc 0f00 	cmp.w	ip, #0
 8006124:	d001      	beq.n	800612a <_strtod_l+0x2ea>
 8006126:	f1c8 0800 	rsb	r8, r8, #0
 800612a:	2d00      	cmp	r5, #0
 800612c:	d14e      	bne.n	80061cc <_strtod_l+0x38c>
 800612e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006130:	4308      	orrs	r0, r1
 8006132:	f47f aebe 	bne.w	8005eb2 <_strtod_l+0x72>
 8006136:	2b00      	cmp	r3, #0
 8006138:	f47f aed6 	bne.w	8005ee8 <_strtod_l+0xa8>
 800613c:	2a69      	cmp	r2, #105	@ 0x69
 800613e:	d028      	beq.n	8006192 <_strtod_l+0x352>
 8006140:	dc25      	bgt.n	800618e <_strtod_l+0x34e>
 8006142:	2a49      	cmp	r2, #73	@ 0x49
 8006144:	d025      	beq.n	8006192 <_strtod_l+0x352>
 8006146:	2a4e      	cmp	r2, #78	@ 0x4e
 8006148:	f47f aece 	bne.w	8005ee8 <_strtod_l+0xa8>
 800614c:	499b      	ldr	r1, [pc, #620]	@ (80063bc <_strtod_l+0x57c>)
 800614e:	a819      	add	r0, sp, #100	@ 0x64
 8006150:	f002 fce6 	bl	8008b20 <__match>
 8006154:	2800      	cmp	r0, #0
 8006156:	f43f aec7 	beq.w	8005ee8 <_strtod_l+0xa8>
 800615a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b28      	cmp	r3, #40	@ 0x28
 8006160:	d12e      	bne.n	80061c0 <_strtod_l+0x380>
 8006162:	4997      	ldr	r1, [pc, #604]	@ (80063c0 <_strtod_l+0x580>)
 8006164:	aa1c      	add	r2, sp, #112	@ 0x70
 8006166:	a819      	add	r0, sp, #100	@ 0x64
 8006168:	f002 fcee 	bl	8008b48 <__hexnan>
 800616c:	2805      	cmp	r0, #5
 800616e:	d127      	bne.n	80061c0 <_strtod_l+0x380>
 8006170:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006172:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006176:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800617a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800617e:	e698      	b.n	8005eb2 <_strtod_l+0x72>
 8006180:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006182:	fb08 2101 	mla	r1, r8, r1, r2
 8006186:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800618a:	920e      	str	r2, [sp, #56]	@ 0x38
 800618c:	e7b5      	b.n	80060fa <_strtod_l+0x2ba>
 800618e:	2a6e      	cmp	r2, #110	@ 0x6e
 8006190:	e7da      	b.n	8006148 <_strtod_l+0x308>
 8006192:	498c      	ldr	r1, [pc, #560]	@ (80063c4 <_strtod_l+0x584>)
 8006194:	a819      	add	r0, sp, #100	@ 0x64
 8006196:	f002 fcc3 	bl	8008b20 <__match>
 800619a:	2800      	cmp	r0, #0
 800619c:	f43f aea4 	beq.w	8005ee8 <_strtod_l+0xa8>
 80061a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061a2:	4989      	ldr	r1, [pc, #548]	@ (80063c8 <_strtod_l+0x588>)
 80061a4:	3b01      	subs	r3, #1
 80061a6:	a819      	add	r0, sp, #100	@ 0x64
 80061a8:	9319      	str	r3, [sp, #100]	@ 0x64
 80061aa:	f002 fcb9 	bl	8008b20 <__match>
 80061ae:	b910      	cbnz	r0, 80061b6 <_strtod_l+0x376>
 80061b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80061b2:	3301      	adds	r3, #1
 80061b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80061b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80063d8 <_strtod_l+0x598>
 80061ba:	f04f 0a00 	mov.w	sl, #0
 80061be:	e678      	b.n	8005eb2 <_strtod_l+0x72>
 80061c0:	4882      	ldr	r0, [pc, #520]	@ (80063cc <_strtod_l+0x58c>)
 80061c2:	f001 fb65 	bl	8007890 <nan>
 80061c6:	ec5b ab10 	vmov	sl, fp, d0
 80061ca:	e672      	b.n	8005eb2 <_strtod_l+0x72>
 80061cc:	eba8 0309 	sub.w	r3, r8, r9
 80061d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80061d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80061d4:	2f00      	cmp	r7, #0
 80061d6:	bf08      	it	eq
 80061d8:	462f      	moveq	r7, r5
 80061da:	2d10      	cmp	r5, #16
 80061dc:	462c      	mov	r4, r5
 80061de:	bfa8      	it	ge
 80061e0:	2410      	movge	r4, #16
 80061e2:	f7fa f99f 	bl	8000524 <__aeabi_ui2d>
 80061e6:	2d09      	cmp	r5, #9
 80061e8:	4682      	mov	sl, r0
 80061ea:	468b      	mov	fp, r1
 80061ec:	dc13      	bgt.n	8006216 <_strtod_l+0x3d6>
 80061ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f43f ae5e 	beq.w	8005eb2 <_strtod_l+0x72>
 80061f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061f8:	dd78      	ble.n	80062ec <_strtod_l+0x4ac>
 80061fa:	2b16      	cmp	r3, #22
 80061fc:	dc5f      	bgt.n	80062be <_strtod_l+0x47e>
 80061fe:	4974      	ldr	r1, [pc, #464]	@ (80063d0 <_strtod_l+0x590>)
 8006200:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006208:	4652      	mov	r2, sl
 800620a:	465b      	mov	r3, fp
 800620c:	f7fa fa04 	bl	8000618 <__aeabi_dmul>
 8006210:	4682      	mov	sl, r0
 8006212:	468b      	mov	fp, r1
 8006214:	e64d      	b.n	8005eb2 <_strtod_l+0x72>
 8006216:	4b6e      	ldr	r3, [pc, #440]	@ (80063d0 <_strtod_l+0x590>)
 8006218:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800621c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006220:	f7fa f9fa 	bl	8000618 <__aeabi_dmul>
 8006224:	4682      	mov	sl, r0
 8006226:	9808      	ldr	r0, [sp, #32]
 8006228:	468b      	mov	fp, r1
 800622a:	f7fa f97b 	bl	8000524 <__aeabi_ui2d>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4650      	mov	r0, sl
 8006234:	4659      	mov	r1, fp
 8006236:	f7fa f839 	bl	80002ac <__adddf3>
 800623a:	2d0f      	cmp	r5, #15
 800623c:	4682      	mov	sl, r0
 800623e:	468b      	mov	fp, r1
 8006240:	ddd5      	ble.n	80061ee <_strtod_l+0x3ae>
 8006242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006244:	1b2c      	subs	r4, r5, r4
 8006246:	441c      	add	r4, r3
 8006248:	2c00      	cmp	r4, #0
 800624a:	f340 8096 	ble.w	800637a <_strtod_l+0x53a>
 800624e:	f014 030f 	ands.w	r3, r4, #15
 8006252:	d00a      	beq.n	800626a <_strtod_l+0x42a>
 8006254:	495e      	ldr	r1, [pc, #376]	@ (80063d0 <_strtod_l+0x590>)
 8006256:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800625a:	4652      	mov	r2, sl
 800625c:	465b      	mov	r3, fp
 800625e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006262:	f7fa f9d9 	bl	8000618 <__aeabi_dmul>
 8006266:	4682      	mov	sl, r0
 8006268:	468b      	mov	fp, r1
 800626a:	f034 040f 	bics.w	r4, r4, #15
 800626e:	d073      	beq.n	8006358 <_strtod_l+0x518>
 8006270:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006274:	dd48      	ble.n	8006308 <_strtod_l+0x4c8>
 8006276:	2400      	movs	r4, #0
 8006278:	46a0      	mov	r8, r4
 800627a:	940a      	str	r4, [sp, #40]	@ 0x28
 800627c:	46a1      	mov	r9, r4
 800627e:	9a05      	ldr	r2, [sp, #20]
 8006280:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80063d8 <_strtod_l+0x598>
 8006284:	2322      	movs	r3, #34	@ 0x22
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	f04f 0a00 	mov.w	sl, #0
 800628c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800628e:	2b00      	cmp	r3, #0
 8006290:	f43f ae0f 	beq.w	8005eb2 <_strtod_l+0x72>
 8006294:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006296:	9805      	ldr	r0, [sp, #20]
 8006298:	f002 fdfa 	bl	8008e90 <_Bfree>
 800629c:	9805      	ldr	r0, [sp, #20]
 800629e:	4649      	mov	r1, r9
 80062a0:	f002 fdf6 	bl	8008e90 <_Bfree>
 80062a4:	9805      	ldr	r0, [sp, #20]
 80062a6:	4641      	mov	r1, r8
 80062a8:	f002 fdf2 	bl	8008e90 <_Bfree>
 80062ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80062ae:	9805      	ldr	r0, [sp, #20]
 80062b0:	f002 fdee 	bl	8008e90 <_Bfree>
 80062b4:	9805      	ldr	r0, [sp, #20]
 80062b6:	4621      	mov	r1, r4
 80062b8:	f002 fdea 	bl	8008e90 <_Bfree>
 80062bc:	e5f9      	b.n	8005eb2 <_strtod_l+0x72>
 80062be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80062c4:	4293      	cmp	r3, r2
 80062c6:	dbbc      	blt.n	8006242 <_strtod_l+0x402>
 80062c8:	4c41      	ldr	r4, [pc, #260]	@ (80063d0 <_strtod_l+0x590>)
 80062ca:	f1c5 050f 	rsb	r5, r5, #15
 80062ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80062d2:	4652      	mov	r2, sl
 80062d4:	465b      	mov	r3, fp
 80062d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062da:	f7fa f99d 	bl	8000618 <__aeabi_dmul>
 80062de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062e0:	1b5d      	subs	r5, r3, r5
 80062e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80062e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80062ea:	e78f      	b.n	800620c <_strtod_l+0x3cc>
 80062ec:	3316      	adds	r3, #22
 80062ee:	dba8      	blt.n	8006242 <_strtod_l+0x402>
 80062f0:	4b37      	ldr	r3, [pc, #220]	@ (80063d0 <_strtod_l+0x590>)
 80062f2:	eba9 0808 	sub.w	r8, r9, r8
 80062f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80062fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80062fe:	4650      	mov	r0, sl
 8006300:	4659      	mov	r1, fp
 8006302:	f7fa fab3 	bl	800086c <__aeabi_ddiv>
 8006306:	e783      	b.n	8006210 <_strtod_l+0x3d0>
 8006308:	4b32      	ldr	r3, [pc, #200]	@ (80063d4 <_strtod_l+0x594>)
 800630a:	9308      	str	r3, [sp, #32]
 800630c:	2300      	movs	r3, #0
 800630e:	1124      	asrs	r4, r4, #4
 8006310:	4650      	mov	r0, sl
 8006312:	4659      	mov	r1, fp
 8006314:	461e      	mov	r6, r3
 8006316:	2c01      	cmp	r4, #1
 8006318:	dc21      	bgt.n	800635e <_strtod_l+0x51e>
 800631a:	b10b      	cbz	r3, 8006320 <_strtod_l+0x4e0>
 800631c:	4682      	mov	sl, r0
 800631e:	468b      	mov	fp, r1
 8006320:	492c      	ldr	r1, [pc, #176]	@ (80063d4 <_strtod_l+0x594>)
 8006322:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006326:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800632a:	4652      	mov	r2, sl
 800632c:	465b      	mov	r3, fp
 800632e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006332:	f7fa f971 	bl	8000618 <__aeabi_dmul>
 8006336:	4b28      	ldr	r3, [pc, #160]	@ (80063d8 <_strtod_l+0x598>)
 8006338:	460a      	mov	r2, r1
 800633a:	400b      	ands	r3, r1
 800633c:	4927      	ldr	r1, [pc, #156]	@ (80063dc <_strtod_l+0x59c>)
 800633e:	428b      	cmp	r3, r1
 8006340:	4682      	mov	sl, r0
 8006342:	d898      	bhi.n	8006276 <_strtod_l+0x436>
 8006344:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006348:	428b      	cmp	r3, r1
 800634a:	bf86      	itte	hi
 800634c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80063e0 <_strtod_l+0x5a0>
 8006350:	f04f 3aff 	movhi.w	sl, #4294967295
 8006354:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006358:	2300      	movs	r3, #0
 800635a:	9308      	str	r3, [sp, #32]
 800635c:	e07a      	b.n	8006454 <_strtod_l+0x614>
 800635e:	07e2      	lsls	r2, r4, #31
 8006360:	d505      	bpl.n	800636e <_strtod_l+0x52e>
 8006362:	9b08      	ldr	r3, [sp, #32]
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	f7fa f956 	bl	8000618 <__aeabi_dmul>
 800636c:	2301      	movs	r3, #1
 800636e:	9a08      	ldr	r2, [sp, #32]
 8006370:	3208      	adds	r2, #8
 8006372:	3601      	adds	r6, #1
 8006374:	1064      	asrs	r4, r4, #1
 8006376:	9208      	str	r2, [sp, #32]
 8006378:	e7cd      	b.n	8006316 <_strtod_l+0x4d6>
 800637a:	d0ed      	beq.n	8006358 <_strtod_l+0x518>
 800637c:	4264      	negs	r4, r4
 800637e:	f014 020f 	ands.w	r2, r4, #15
 8006382:	d00a      	beq.n	800639a <_strtod_l+0x55a>
 8006384:	4b12      	ldr	r3, [pc, #72]	@ (80063d0 <_strtod_l+0x590>)
 8006386:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800638a:	4650      	mov	r0, sl
 800638c:	4659      	mov	r1, fp
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f7fa fa6b 	bl	800086c <__aeabi_ddiv>
 8006396:	4682      	mov	sl, r0
 8006398:	468b      	mov	fp, r1
 800639a:	1124      	asrs	r4, r4, #4
 800639c:	d0dc      	beq.n	8006358 <_strtod_l+0x518>
 800639e:	2c1f      	cmp	r4, #31
 80063a0:	dd20      	ble.n	80063e4 <_strtod_l+0x5a4>
 80063a2:	2400      	movs	r4, #0
 80063a4:	46a0      	mov	r8, r4
 80063a6:	940a      	str	r4, [sp, #40]	@ 0x28
 80063a8:	46a1      	mov	r9, r4
 80063aa:	9a05      	ldr	r2, [sp, #20]
 80063ac:	2322      	movs	r3, #34	@ 0x22
 80063ae:	f04f 0a00 	mov.w	sl, #0
 80063b2:	f04f 0b00 	mov.w	fp, #0
 80063b6:	6013      	str	r3, [r2, #0]
 80063b8:	e768      	b.n	800628c <_strtod_l+0x44c>
 80063ba:	bf00      	nop
 80063bc:	0800a365 	.word	0x0800a365
 80063c0:	0800a308 	.word	0x0800a308
 80063c4:	0800a35d 	.word	0x0800a35d
 80063c8:	0800a3d3 	.word	0x0800a3d3
 80063cc:	0800a3cf 	.word	0x0800a3cf
 80063d0:	0800a538 	.word	0x0800a538
 80063d4:	0800a510 	.word	0x0800a510
 80063d8:	7ff00000 	.word	0x7ff00000
 80063dc:	7ca00000 	.word	0x7ca00000
 80063e0:	7fefffff 	.word	0x7fefffff
 80063e4:	f014 0310 	ands.w	r3, r4, #16
 80063e8:	bf18      	it	ne
 80063ea:	236a      	movne	r3, #106	@ 0x6a
 80063ec:	4ea9      	ldr	r6, [pc, #676]	@ (8006694 <_strtod_l+0x854>)
 80063ee:	9308      	str	r3, [sp, #32]
 80063f0:	4650      	mov	r0, sl
 80063f2:	4659      	mov	r1, fp
 80063f4:	2300      	movs	r3, #0
 80063f6:	07e2      	lsls	r2, r4, #31
 80063f8:	d504      	bpl.n	8006404 <_strtod_l+0x5c4>
 80063fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063fe:	f7fa f90b 	bl	8000618 <__aeabi_dmul>
 8006402:	2301      	movs	r3, #1
 8006404:	1064      	asrs	r4, r4, #1
 8006406:	f106 0608 	add.w	r6, r6, #8
 800640a:	d1f4      	bne.n	80063f6 <_strtod_l+0x5b6>
 800640c:	b10b      	cbz	r3, 8006412 <_strtod_l+0x5d2>
 800640e:	4682      	mov	sl, r0
 8006410:	468b      	mov	fp, r1
 8006412:	9b08      	ldr	r3, [sp, #32]
 8006414:	b1b3      	cbz	r3, 8006444 <_strtod_l+0x604>
 8006416:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800641a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800641e:	2b00      	cmp	r3, #0
 8006420:	4659      	mov	r1, fp
 8006422:	dd0f      	ble.n	8006444 <_strtod_l+0x604>
 8006424:	2b1f      	cmp	r3, #31
 8006426:	dd55      	ble.n	80064d4 <_strtod_l+0x694>
 8006428:	2b34      	cmp	r3, #52	@ 0x34
 800642a:	bfde      	ittt	le
 800642c:	f04f 33ff 	movle.w	r3, #4294967295
 8006430:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006434:	4093      	lslle	r3, r2
 8006436:	f04f 0a00 	mov.w	sl, #0
 800643a:	bfcc      	ite	gt
 800643c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006440:	ea03 0b01 	andle.w	fp, r3, r1
 8006444:	2200      	movs	r2, #0
 8006446:	2300      	movs	r3, #0
 8006448:	4650      	mov	r0, sl
 800644a:	4659      	mov	r1, fp
 800644c:	f7fa fb4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006450:	2800      	cmp	r0, #0
 8006452:	d1a6      	bne.n	80063a2 <_strtod_l+0x562>
 8006454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800645a:	9805      	ldr	r0, [sp, #20]
 800645c:	462b      	mov	r3, r5
 800645e:	463a      	mov	r2, r7
 8006460:	f002 fd7e 	bl	8008f60 <__s2b>
 8006464:	900a      	str	r0, [sp, #40]	@ 0x28
 8006466:	2800      	cmp	r0, #0
 8006468:	f43f af05 	beq.w	8006276 <_strtod_l+0x436>
 800646c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800646e:	2a00      	cmp	r2, #0
 8006470:	eba9 0308 	sub.w	r3, r9, r8
 8006474:	bfa8      	it	ge
 8006476:	2300      	movge	r3, #0
 8006478:	9312      	str	r3, [sp, #72]	@ 0x48
 800647a:	2400      	movs	r4, #0
 800647c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006480:	9316      	str	r3, [sp, #88]	@ 0x58
 8006482:	46a0      	mov	r8, r4
 8006484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006486:	9805      	ldr	r0, [sp, #20]
 8006488:	6859      	ldr	r1, [r3, #4]
 800648a:	f002 fcc1 	bl	8008e10 <_Balloc>
 800648e:	4681      	mov	r9, r0
 8006490:	2800      	cmp	r0, #0
 8006492:	f43f aef4 	beq.w	800627e <_strtod_l+0x43e>
 8006496:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	3202      	adds	r2, #2
 800649c:	f103 010c 	add.w	r1, r3, #12
 80064a0:	0092      	lsls	r2, r2, #2
 80064a2:	300c      	adds	r0, #12
 80064a4:	f001 f9e3 	bl	800786e <memcpy>
 80064a8:	ec4b ab10 	vmov	d0, sl, fp
 80064ac:	9805      	ldr	r0, [sp, #20]
 80064ae:	aa1c      	add	r2, sp, #112	@ 0x70
 80064b0:	a91b      	add	r1, sp, #108	@ 0x6c
 80064b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80064b6:	f003 f88f 	bl	80095d8 <__d2b>
 80064ba:	901a      	str	r0, [sp, #104]	@ 0x68
 80064bc:	2800      	cmp	r0, #0
 80064be:	f43f aede 	beq.w	800627e <_strtod_l+0x43e>
 80064c2:	9805      	ldr	r0, [sp, #20]
 80064c4:	2101      	movs	r1, #1
 80064c6:	f002 fde1 	bl	800908c <__i2b>
 80064ca:	4680      	mov	r8, r0
 80064cc:	b948      	cbnz	r0, 80064e2 <_strtod_l+0x6a2>
 80064ce:	f04f 0800 	mov.w	r8, #0
 80064d2:	e6d4      	b.n	800627e <_strtod_l+0x43e>
 80064d4:	f04f 32ff 	mov.w	r2, #4294967295
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	ea03 0a0a 	and.w	sl, r3, sl
 80064e0:	e7b0      	b.n	8006444 <_strtod_l+0x604>
 80064e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80064e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	bfab      	itete	ge
 80064ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80064ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80064ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80064f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80064f2:	bfac      	ite	ge
 80064f4:	18ef      	addge	r7, r5, r3
 80064f6:	1b5e      	sublt	r6, r3, r5
 80064f8:	9b08      	ldr	r3, [sp, #32]
 80064fa:	1aed      	subs	r5, r5, r3
 80064fc:	4415      	add	r5, r2
 80064fe:	4b66      	ldr	r3, [pc, #408]	@ (8006698 <_strtod_l+0x858>)
 8006500:	3d01      	subs	r5, #1
 8006502:	429d      	cmp	r5, r3
 8006504:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006508:	da50      	bge.n	80065ac <_strtod_l+0x76c>
 800650a:	1b5b      	subs	r3, r3, r5
 800650c:	2b1f      	cmp	r3, #31
 800650e:	eba2 0203 	sub.w	r2, r2, r3
 8006512:	f04f 0101 	mov.w	r1, #1
 8006516:	dc3d      	bgt.n	8006594 <_strtod_l+0x754>
 8006518:	fa01 f303 	lsl.w	r3, r1, r3
 800651c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800651e:	2300      	movs	r3, #0
 8006520:	9310      	str	r3, [sp, #64]	@ 0x40
 8006522:	18bd      	adds	r5, r7, r2
 8006524:	9b08      	ldr	r3, [sp, #32]
 8006526:	42af      	cmp	r7, r5
 8006528:	4416      	add	r6, r2
 800652a:	441e      	add	r6, r3
 800652c:	463b      	mov	r3, r7
 800652e:	bfa8      	it	ge
 8006530:	462b      	movge	r3, r5
 8006532:	42b3      	cmp	r3, r6
 8006534:	bfa8      	it	ge
 8006536:	4633      	movge	r3, r6
 8006538:	2b00      	cmp	r3, #0
 800653a:	bfc2      	ittt	gt
 800653c:	1aed      	subgt	r5, r5, r3
 800653e:	1af6      	subgt	r6, r6, r3
 8006540:	1aff      	subgt	r7, r7, r3
 8006542:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006544:	2b00      	cmp	r3, #0
 8006546:	dd16      	ble.n	8006576 <_strtod_l+0x736>
 8006548:	4641      	mov	r1, r8
 800654a:	9805      	ldr	r0, [sp, #20]
 800654c:	461a      	mov	r2, r3
 800654e:	f002 fe5d 	bl	800920c <__pow5mult>
 8006552:	4680      	mov	r8, r0
 8006554:	2800      	cmp	r0, #0
 8006556:	d0ba      	beq.n	80064ce <_strtod_l+0x68e>
 8006558:	4601      	mov	r1, r0
 800655a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800655c:	9805      	ldr	r0, [sp, #20]
 800655e:	f002 fdab 	bl	80090b8 <__multiply>
 8006562:	900e      	str	r0, [sp, #56]	@ 0x38
 8006564:	2800      	cmp	r0, #0
 8006566:	f43f ae8a 	beq.w	800627e <_strtod_l+0x43e>
 800656a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800656c:	9805      	ldr	r0, [sp, #20]
 800656e:	f002 fc8f 	bl	8008e90 <_Bfree>
 8006572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006574:	931a      	str	r3, [sp, #104]	@ 0x68
 8006576:	2d00      	cmp	r5, #0
 8006578:	dc1d      	bgt.n	80065b6 <_strtod_l+0x776>
 800657a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	dd23      	ble.n	80065c8 <_strtod_l+0x788>
 8006580:	4649      	mov	r1, r9
 8006582:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006584:	9805      	ldr	r0, [sp, #20]
 8006586:	f002 fe41 	bl	800920c <__pow5mult>
 800658a:	4681      	mov	r9, r0
 800658c:	b9e0      	cbnz	r0, 80065c8 <_strtod_l+0x788>
 800658e:	f04f 0900 	mov.w	r9, #0
 8006592:	e674      	b.n	800627e <_strtod_l+0x43e>
 8006594:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006598:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800659c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80065a0:	35e2      	adds	r5, #226	@ 0xe2
 80065a2:	fa01 f305 	lsl.w	r3, r1, r5
 80065a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80065a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80065aa:	e7ba      	b.n	8006522 <_strtod_l+0x6e2>
 80065ac:	2300      	movs	r3, #0
 80065ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80065b0:	2301      	movs	r3, #1
 80065b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065b4:	e7b5      	b.n	8006522 <_strtod_l+0x6e2>
 80065b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065b8:	9805      	ldr	r0, [sp, #20]
 80065ba:	462a      	mov	r2, r5
 80065bc:	f002 fe80 	bl	80092c0 <__lshift>
 80065c0:	901a      	str	r0, [sp, #104]	@ 0x68
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d1d9      	bne.n	800657a <_strtod_l+0x73a>
 80065c6:	e65a      	b.n	800627e <_strtod_l+0x43e>
 80065c8:	2e00      	cmp	r6, #0
 80065ca:	dd07      	ble.n	80065dc <_strtod_l+0x79c>
 80065cc:	4649      	mov	r1, r9
 80065ce:	9805      	ldr	r0, [sp, #20]
 80065d0:	4632      	mov	r2, r6
 80065d2:	f002 fe75 	bl	80092c0 <__lshift>
 80065d6:	4681      	mov	r9, r0
 80065d8:	2800      	cmp	r0, #0
 80065da:	d0d8      	beq.n	800658e <_strtod_l+0x74e>
 80065dc:	2f00      	cmp	r7, #0
 80065de:	dd08      	ble.n	80065f2 <_strtod_l+0x7b2>
 80065e0:	4641      	mov	r1, r8
 80065e2:	9805      	ldr	r0, [sp, #20]
 80065e4:	463a      	mov	r2, r7
 80065e6:	f002 fe6b 	bl	80092c0 <__lshift>
 80065ea:	4680      	mov	r8, r0
 80065ec:	2800      	cmp	r0, #0
 80065ee:	f43f ae46 	beq.w	800627e <_strtod_l+0x43e>
 80065f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80065f4:	9805      	ldr	r0, [sp, #20]
 80065f6:	464a      	mov	r2, r9
 80065f8:	f002 feea 	bl	80093d0 <__mdiff>
 80065fc:	4604      	mov	r4, r0
 80065fe:	2800      	cmp	r0, #0
 8006600:	f43f ae3d 	beq.w	800627e <_strtod_l+0x43e>
 8006604:	68c3      	ldr	r3, [r0, #12]
 8006606:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006608:	2300      	movs	r3, #0
 800660a:	60c3      	str	r3, [r0, #12]
 800660c:	4641      	mov	r1, r8
 800660e:	f002 fec3 	bl	8009398 <__mcmp>
 8006612:	2800      	cmp	r0, #0
 8006614:	da46      	bge.n	80066a4 <_strtod_l+0x864>
 8006616:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006618:	ea53 030a 	orrs.w	r3, r3, sl
 800661c:	d16c      	bne.n	80066f8 <_strtod_l+0x8b8>
 800661e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006622:	2b00      	cmp	r3, #0
 8006624:	d168      	bne.n	80066f8 <_strtod_l+0x8b8>
 8006626:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800662a:	0d1b      	lsrs	r3, r3, #20
 800662c:	051b      	lsls	r3, r3, #20
 800662e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006632:	d961      	bls.n	80066f8 <_strtod_l+0x8b8>
 8006634:	6963      	ldr	r3, [r4, #20]
 8006636:	b913      	cbnz	r3, 800663e <_strtod_l+0x7fe>
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	2b01      	cmp	r3, #1
 800663c:	dd5c      	ble.n	80066f8 <_strtod_l+0x8b8>
 800663e:	4621      	mov	r1, r4
 8006640:	2201      	movs	r2, #1
 8006642:	9805      	ldr	r0, [sp, #20]
 8006644:	f002 fe3c 	bl	80092c0 <__lshift>
 8006648:	4641      	mov	r1, r8
 800664a:	4604      	mov	r4, r0
 800664c:	f002 fea4 	bl	8009398 <__mcmp>
 8006650:	2800      	cmp	r0, #0
 8006652:	dd51      	ble.n	80066f8 <_strtod_l+0x8b8>
 8006654:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006658:	9a08      	ldr	r2, [sp, #32]
 800665a:	0d1b      	lsrs	r3, r3, #20
 800665c:	051b      	lsls	r3, r3, #20
 800665e:	2a00      	cmp	r2, #0
 8006660:	d06b      	beq.n	800673a <_strtod_l+0x8fa>
 8006662:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006666:	d868      	bhi.n	800673a <_strtod_l+0x8fa>
 8006668:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800666c:	f67f ae9d 	bls.w	80063aa <_strtod_l+0x56a>
 8006670:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <_strtod_l+0x85c>)
 8006672:	4650      	mov	r0, sl
 8006674:	4659      	mov	r1, fp
 8006676:	2200      	movs	r2, #0
 8006678:	f7f9 ffce 	bl	8000618 <__aeabi_dmul>
 800667c:	4b08      	ldr	r3, [pc, #32]	@ (80066a0 <_strtod_l+0x860>)
 800667e:	400b      	ands	r3, r1
 8006680:	4682      	mov	sl, r0
 8006682:	468b      	mov	fp, r1
 8006684:	2b00      	cmp	r3, #0
 8006686:	f47f ae05 	bne.w	8006294 <_strtod_l+0x454>
 800668a:	9a05      	ldr	r2, [sp, #20]
 800668c:	2322      	movs	r3, #34	@ 0x22
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	e600      	b.n	8006294 <_strtod_l+0x454>
 8006692:	bf00      	nop
 8006694:	0800a330 	.word	0x0800a330
 8006698:	fffffc02 	.word	0xfffffc02
 800669c:	39500000 	.word	0x39500000
 80066a0:	7ff00000 	.word	0x7ff00000
 80066a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80066a8:	d165      	bne.n	8006776 <_strtod_l+0x936>
 80066aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80066ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066b0:	b35a      	cbz	r2, 800670a <_strtod_l+0x8ca>
 80066b2:	4a9f      	ldr	r2, [pc, #636]	@ (8006930 <_strtod_l+0xaf0>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d12b      	bne.n	8006710 <_strtod_l+0x8d0>
 80066b8:	9b08      	ldr	r3, [sp, #32]
 80066ba:	4651      	mov	r1, sl
 80066bc:	b303      	cbz	r3, 8006700 <_strtod_l+0x8c0>
 80066be:	4b9d      	ldr	r3, [pc, #628]	@ (8006934 <_strtod_l+0xaf4>)
 80066c0:	465a      	mov	r2, fp
 80066c2:	4013      	ands	r3, r2
 80066c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80066c8:	f04f 32ff 	mov.w	r2, #4294967295
 80066cc:	d81b      	bhi.n	8006706 <_strtod_l+0x8c6>
 80066ce:	0d1b      	lsrs	r3, r3, #20
 80066d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80066d4:	fa02 f303 	lsl.w	r3, r2, r3
 80066d8:	4299      	cmp	r1, r3
 80066da:	d119      	bne.n	8006710 <_strtod_l+0x8d0>
 80066dc:	4b96      	ldr	r3, [pc, #600]	@ (8006938 <_strtod_l+0xaf8>)
 80066de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d102      	bne.n	80066ea <_strtod_l+0x8aa>
 80066e4:	3101      	adds	r1, #1
 80066e6:	f43f adca 	beq.w	800627e <_strtod_l+0x43e>
 80066ea:	4b92      	ldr	r3, [pc, #584]	@ (8006934 <_strtod_l+0xaf4>)
 80066ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066ee:	401a      	ands	r2, r3
 80066f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80066f4:	f04f 0a00 	mov.w	sl, #0
 80066f8:	9b08      	ldr	r3, [sp, #32]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d1b8      	bne.n	8006670 <_strtod_l+0x830>
 80066fe:	e5c9      	b.n	8006294 <_strtod_l+0x454>
 8006700:	f04f 33ff 	mov.w	r3, #4294967295
 8006704:	e7e8      	b.n	80066d8 <_strtod_l+0x898>
 8006706:	4613      	mov	r3, r2
 8006708:	e7e6      	b.n	80066d8 <_strtod_l+0x898>
 800670a:	ea53 030a 	orrs.w	r3, r3, sl
 800670e:	d0a1      	beq.n	8006654 <_strtod_l+0x814>
 8006710:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006712:	b1db      	cbz	r3, 800674c <_strtod_l+0x90c>
 8006714:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006716:	4213      	tst	r3, r2
 8006718:	d0ee      	beq.n	80066f8 <_strtod_l+0x8b8>
 800671a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800671c:	9a08      	ldr	r2, [sp, #32]
 800671e:	4650      	mov	r0, sl
 8006720:	4659      	mov	r1, fp
 8006722:	b1bb      	cbz	r3, 8006754 <_strtod_l+0x914>
 8006724:	f7ff fb6e 	bl	8005e04 <sulp>
 8006728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800672c:	ec53 2b10 	vmov	r2, r3, d0
 8006730:	f7f9 fdbc 	bl	80002ac <__adddf3>
 8006734:	4682      	mov	sl, r0
 8006736:	468b      	mov	fp, r1
 8006738:	e7de      	b.n	80066f8 <_strtod_l+0x8b8>
 800673a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800673e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006742:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006746:	f04f 3aff 	mov.w	sl, #4294967295
 800674a:	e7d5      	b.n	80066f8 <_strtod_l+0x8b8>
 800674c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800674e:	ea13 0f0a 	tst.w	r3, sl
 8006752:	e7e1      	b.n	8006718 <_strtod_l+0x8d8>
 8006754:	f7ff fb56 	bl	8005e04 <sulp>
 8006758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800675c:	ec53 2b10 	vmov	r2, r3, d0
 8006760:	f7f9 fda2 	bl	80002a8 <__aeabi_dsub>
 8006764:	2200      	movs	r2, #0
 8006766:	2300      	movs	r3, #0
 8006768:	4682      	mov	sl, r0
 800676a:	468b      	mov	fp, r1
 800676c:	f7fa f9bc 	bl	8000ae8 <__aeabi_dcmpeq>
 8006770:	2800      	cmp	r0, #0
 8006772:	d0c1      	beq.n	80066f8 <_strtod_l+0x8b8>
 8006774:	e619      	b.n	80063aa <_strtod_l+0x56a>
 8006776:	4641      	mov	r1, r8
 8006778:	4620      	mov	r0, r4
 800677a:	f002 ff85 	bl	8009688 <__ratio>
 800677e:	ec57 6b10 	vmov	r6, r7, d0
 8006782:	2200      	movs	r2, #0
 8006784:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	f7fa f9c0 	bl	8000b10 <__aeabi_dcmple>
 8006790:	2800      	cmp	r0, #0
 8006792:	d06f      	beq.n	8006874 <_strtod_l+0xa34>
 8006794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d17a      	bne.n	8006890 <_strtod_l+0xa50>
 800679a:	f1ba 0f00 	cmp.w	sl, #0
 800679e:	d158      	bne.n	8006852 <_strtod_l+0xa12>
 80067a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d15a      	bne.n	8006860 <_strtod_l+0xa20>
 80067aa:	4b64      	ldr	r3, [pc, #400]	@ (800693c <_strtod_l+0xafc>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	4630      	mov	r0, r6
 80067b0:	4639      	mov	r1, r7
 80067b2:	f7fa f9a3 	bl	8000afc <__aeabi_dcmplt>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d159      	bne.n	800686e <_strtod_l+0xa2e>
 80067ba:	4630      	mov	r0, r6
 80067bc:	4639      	mov	r1, r7
 80067be:	4b60      	ldr	r3, [pc, #384]	@ (8006940 <_strtod_l+0xb00>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	f7f9 ff29 	bl	8000618 <__aeabi_dmul>
 80067c6:	4606      	mov	r6, r0
 80067c8:	460f      	mov	r7, r1
 80067ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80067ce:	9606      	str	r6, [sp, #24]
 80067d0:	9307      	str	r3, [sp, #28]
 80067d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067d6:	4d57      	ldr	r5, [pc, #348]	@ (8006934 <_strtod_l+0xaf4>)
 80067d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80067dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067de:	401d      	ands	r5, r3
 80067e0:	4b58      	ldr	r3, [pc, #352]	@ (8006944 <_strtod_l+0xb04>)
 80067e2:	429d      	cmp	r5, r3
 80067e4:	f040 80b2 	bne.w	800694c <_strtod_l+0xb0c>
 80067e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80067ee:	ec4b ab10 	vmov	d0, sl, fp
 80067f2:	f002 fe81 	bl	80094f8 <__ulp>
 80067f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80067fa:	ec51 0b10 	vmov	r0, r1, d0
 80067fe:	f7f9 ff0b 	bl	8000618 <__aeabi_dmul>
 8006802:	4652      	mov	r2, sl
 8006804:	465b      	mov	r3, fp
 8006806:	f7f9 fd51 	bl	80002ac <__adddf3>
 800680a:	460b      	mov	r3, r1
 800680c:	4949      	ldr	r1, [pc, #292]	@ (8006934 <_strtod_l+0xaf4>)
 800680e:	4a4e      	ldr	r2, [pc, #312]	@ (8006948 <_strtod_l+0xb08>)
 8006810:	4019      	ands	r1, r3
 8006812:	4291      	cmp	r1, r2
 8006814:	4682      	mov	sl, r0
 8006816:	d942      	bls.n	800689e <_strtod_l+0xa5e>
 8006818:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800681a:	4b47      	ldr	r3, [pc, #284]	@ (8006938 <_strtod_l+0xaf8>)
 800681c:	429a      	cmp	r2, r3
 800681e:	d103      	bne.n	8006828 <_strtod_l+0x9e8>
 8006820:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006822:	3301      	adds	r3, #1
 8006824:	f43f ad2b 	beq.w	800627e <_strtod_l+0x43e>
 8006828:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006938 <_strtod_l+0xaf8>
 800682c:	f04f 3aff 	mov.w	sl, #4294967295
 8006830:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006832:	9805      	ldr	r0, [sp, #20]
 8006834:	f002 fb2c 	bl	8008e90 <_Bfree>
 8006838:	9805      	ldr	r0, [sp, #20]
 800683a:	4649      	mov	r1, r9
 800683c:	f002 fb28 	bl	8008e90 <_Bfree>
 8006840:	9805      	ldr	r0, [sp, #20]
 8006842:	4641      	mov	r1, r8
 8006844:	f002 fb24 	bl	8008e90 <_Bfree>
 8006848:	9805      	ldr	r0, [sp, #20]
 800684a:	4621      	mov	r1, r4
 800684c:	f002 fb20 	bl	8008e90 <_Bfree>
 8006850:	e618      	b.n	8006484 <_strtod_l+0x644>
 8006852:	f1ba 0f01 	cmp.w	sl, #1
 8006856:	d103      	bne.n	8006860 <_strtod_l+0xa20>
 8006858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800685a:	2b00      	cmp	r3, #0
 800685c:	f43f ada5 	beq.w	80063aa <_strtod_l+0x56a>
 8006860:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006910 <_strtod_l+0xad0>
 8006864:	4f35      	ldr	r7, [pc, #212]	@ (800693c <_strtod_l+0xafc>)
 8006866:	ed8d 7b06 	vstr	d7, [sp, #24]
 800686a:	2600      	movs	r6, #0
 800686c:	e7b1      	b.n	80067d2 <_strtod_l+0x992>
 800686e:	4f34      	ldr	r7, [pc, #208]	@ (8006940 <_strtod_l+0xb00>)
 8006870:	2600      	movs	r6, #0
 8006872:	e7aa      	b.n	80067ca <_strtod_l+0x98a>
 8006874:	4b32      	ldr	r3, [pc, #200]	@ (8006940 <_strtod_l+0xb00>)
 8006876:	4630      	mov	r0, r6
 8006878:	4639      	mov	r1, r7
 800687a:	2200      	movs	r2, #0
 800687c:	f7f9 fecc 	bl	8000618 <__aeabi_dmul>
 8006880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006882:	4606      	mov	r6, r0
 8006884:	460f      	mov	r7, r1
 8006886:	2b00      	cmp	r3, #0
 8006888:	d09f      	beq.n	80067ca <_strtod_l+0x98a>
 800688a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800688e:	e7a0      	b.n	80067d2 <_strtod_l+0x992>
 8006890:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006918 <_strtod_l+0xad8>
 8006894:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006898:	ec57 6b17 	vmov	r6, r7, d7
 800689c:	e799      	b.n	80067d2 <_strtod_l+0x992>
 800689e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80068a2:	9b08      	ldr	r3, [sp, #32]
 80068a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1c1      	bne.n	8006830 <_strtod_l+0x9f0>
 80068ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80068b0:	0d1b      	lsrs	r3, r3, #20
 80068b2:	051b      	lsls	r3, r3, #20
 80068b4:	429d      	cmp	r5, r3
 80068b6:	d1bb      	bne.n	8006830 <_strtod_l+0x9f0>
 80068b8:	4630      	mov	r0, r6
 80068ba:	4639      	mov	r1, r7
 80068bc:	f7fa fa0c 	bl	8000cd8 <__aeabi_d2lz>
 80068c0:	f7f9 fe7c 	bl	80005bc <__aeabi_l2d>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4630      	mov	r0, r6
 80068ca:	4639      	mov	r1, r7
 80068cc:	f7f9 fcec 	bl	80002a8 <__aeabi_dsub>
 80068d0:	460b      	mov	r3, r1
 80068d2:	4602      	mov	r2, r0
 80068d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80068d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80068dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068de:	ea46 060a 	orr.w	r6, r6, sl
 80068e2:	431e      	orrs	r6, r3
 80068e4:	d06f      	beq.n	80069c6 <_strtod_l+0xb86>
 80068e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006920 <_strtod_l+0xae0>)
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f7fa f906 	bl	8000afc <__aeabi_dcmplt>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	f47f accf 	bne.w	8006294 <_strtod_l+0x454>
 80068f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006928 <_strtod_l+0xae8>)
 80068f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006900:	f7fa f91a 	bl	8000b38 <__aeabi_dcmpgt>
 8006904:	2800      	cmp	r0, #0
 8006906:	d093      	beq.n	8006830 <_strtod_l+0x9f0>
 8006908:	e4c4      	b.n	8006294 <_strtod_l+0x454>
 800690a:	bf00      	nop
 800690c:	f3af 8000 	nop.w
 8006910:	00000000 	.word	0x00000000
 8006914:	bff00000 	.word	0xbff00000
 8006918:	00000000 	.word	0x00000000
 800691c:	3ff00000 	.word	0x3ff00000
 8006920:	94a03595 	.word	0x94a03595
 8006924:	3fdfffff 	.word	0x3fdfffff
 8006928:	35afe535 	.word	0x35afe535
 800692c:	3fe00000 	.word	0x3fe00000
 8006930:	000fffff 	.word	0x000fffff
 8006934:	7ff00000 	.word	0x7ff00000
 8006938:	7fefffff 	.word	0x7fefffff
 800693c:	3ff00000 	.word	0x3ff00000
 8006940:	3fe00000 	.word	0x3fe00000
 8006944:	7fe00000 	.word	0x7fe00000
 8006948:	7c9fffff 	.word	0x7c9fffff
 800694c:	9b08      	ldr	r3, [sp, #32]
 800694e:	b323      	cbz	r3, 800699a <_strtod_l+0xb5a>
 8006950:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006954:	d821      	bhi.n	800699a <_strtod_l+0xb5a>
 8006956:	a328      	add	r3, pc, #160	@ (adr r3, 80069f8 <_strtod_l+0xbb8>)
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	4630      	mov	r0, r6
 800695e:	4639      	mov	r1, r7
 8006960:	f7fa f8d6 	bl	8000b10 <__aeabi_dcmple>
 8006964:	b1a0      	cbz	r0, 8006990 <_strtod_l+0xb50>
 8006966:	4639      	mov	r1, r7
 8006968:	4630      	mov	r0, r6
 800696a:	f7fa f92d 	bl	8000bc8 <__aeabi_d2uiz>
 800696e:	2801      	cmp	r0, #1
 8006970:	bf38      	it	cc
 8006972:	2001      	movcc	r0, #1
 8006974:	f7f9 fdd6 	bl	8000524 <__aeabi_ui2d>
 8006978:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800697a:	4606      	mov	r6, r0
 800697c:	460f      	mov	r7, r1
 800697e:	b9fb      	cbnz	r3, 80069c0 <_strtod_l+0xb80>
 8006980:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006984:	9014      	str	r0, [sp, #80]	@ 0x50
 8006986:	9315      	str	r3, [sp, #84]	@ 0x54
 8006988:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800698c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006990:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006992:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006996:	1b5b      	subs	r3, r3, r5
 8006998:	9311      	str	r3, [sp, #68]	@ 0x44
 800699a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800699e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80069a2:	f002 fda9 	bl	80094f8 <__ulp>
 80069a6:	4650      	mov	r0, sl
 80069a8:	ec53 2b10 	vmov	r2, r3, d0
 80069ac:	4659      	mov	r1, fp
 80069ae:	f7f9 fe33 	bl	8000618 <__aeabi_dmul>
 80069b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80069b6:	f7f9 fc79 	bl	80002ac <__adddf3>
 80069ba:	4682      	mov	sl, r0
 80069bc:	468b      	mov	fp, r1
 80069be:	e770      	b.n	80068a2 <_strtod_l+0xa62>
 80069c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80069c4:	e7e0      	b.n	8006988 <_strtod_l+0xb48>
 80069c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006a00 <_strtod_l+0xbc0>)
 80069c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069cc:	f7fa f896 	bl	8000afc <__aeabi_dcmplt>
 80069d0:	e798      	b.n	8006904 <_strtod_l+0xac4>
 80069d2:	2300      	movs	r3, #0
 80069d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80069d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069da:	6013      	str	r3, [r2, #0]
 80069dc:	f7ff ba6d 	b.w	8005eba <_strtod_l+0x7a>
 80069e0:	2a65      	cmp	r2, #101	@ 0x65
 80069e2:	f43f ab66 	beq.w	80060b2 <_strtod_l+0x272>
 80069e6:	2a45      	cmp	r2, #69	@ 0x45
 80069e8:	f43f ab63 	beq.w	80060b2 <_strtod_l+0x272>
 80069ec:	2301      	movs	r3, #1
 80069ee:	f7ff bb9e 	b.w	800612e <_strtod_l+0x2ee>
 80069f2:	bf00      	nop
 80069f4:	f3af 8000 	nop.w
 80069f8:	ffc00000 	.word	0xffc00000
 80069fc:	41dfffff 	.word	0x41dfffff
 8006a00:	94a03595 	.word	0x94a03595
 8006a04:	3fcfffff 	.word	0x3fcfffff

08006a08 <strtod>:
 8006a08:	460a      	mov	r2, r1
 8006a0a:	4601      	mov	r1, r0
 8006a0c:	4802      	ldr	r0, [pc, #8]	@ (8006a18 <strtod+0x10>)
 8006a0e:	4b03      	ldr	r3, [pc, #12]	@ (8006a1c <strtod+0x14>)
 8006a10:	6800      	ldr	r0, [r0, #0]
 8006a12:	f7ff ba15 	b.w	8005e40 <_strtod_l>
 8006a16:	bf00      	nop
 8006a18:	20000190 	.word	0x20000190
 8006a1c:	20000024 	.word	0x20000024

08006a20 <__cvt>:
 8006a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a24:	ec57 6b10 	vmov	r6, r7, d0
 8006a28:	2f00      	cmp	r7, #0
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	463b      	mov	r3, r7
 8006a30:	bfbb      	ittet	lt
 8006a32:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006a36:	461f      	movlt	r7, r3
 8006a38:	2300      	movge	r3, #0
 8006a3a:	232d      	movlt	r3, #45	@ 0x2d
 8006a3c:	700b      	strb	r3, [r1, #0]
 8006a3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a40:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006a44:	4691      	mov	r9, r2
 8006a46:	f023 0820 	bic.w	r8, r3, #32
 8006a4a:	bfbc      	itt	lt
 8006a4c:	4632      	movlt	r2, r6
 8006a4e:	4616      	movlt	r6, r2
 8006a50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a54:	d005      	beq.n	8006a62 <__cvt+0x42>
 8006a56:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006a5a:	d100      	bne.n	8006a5e <__cvt+0x3e>
 8006a5c:	3401      	adds	r4, #1
 8006a5e:	2102      	movs	r1, #2
 8006a60:	e000      	b.n	8006a64 <__cvt+0x44>
 8006a62:	2103      	movs	r1, #3
 8006a64:	ab03      	add	r3, sp, #12
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	ab02      	add	r3, sp, #8
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	ec47 6b10 	vmov	d0, r6, r7
 8006a70:	4653      	mov	r3, sl
 8006a72:	4622      	mov	r2, r4
 8006a74:	f000 ffbc 	bl	80079f0 <_dtoa_r>
 8006a78:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	d119      	bne.n	8006ab4 <__cvt+0x94>
 8006a80:	f019 0f01 	tst.w	r9, #1
 8006a84:	d00e      	beq.n	8006aa4 <__cvt+0x84>
 8006a86:	eb00 0904 	add.w	r9, r0, r4
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4630      	mov	r0, r6
 8006a90:	4639      	mov	r1, r7
 8006a92:	f7fa f829 	bl	8000ae8 <__aeabi_dcmpeq>
 8006a96:	b108      	cbz	r0, 8006a9c <__cvt+0x7c>
 8006a98:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a9c:	2230      	movs	r2, #48	@ 0x30
 8006a9e:	9b03      	ldr	r3, [sp, #12]
 8006aa0:	454b      	cmp	r3, r9
 8006aa2:	d31e      	bcc.n	8006ae2 <__cvt+0xc2>
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006aa8:	1b5b      	subs	r3, r3, r5
 8006aaa:	4628      	mov	r0, r5
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	b004      	add	sp, #16
 8006ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ab8:	eb00 0904 	add.w	r9, r0, r4
 8006abc:	d1e5      	bne.n	8006a8a <__cvt+0x6a>
 8006abe:	7803      	ldrb	r3, [r0, #0]
 8006ac0:	2b30      	cmp	r3, #48	@ 0x30
 8006ac2:	d10a      	bne.n	8006ada <__cvt+0xba>
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	4630      	mov	r0, r6
 8006aca:	4639      	mov	r1, r7
 8006acc:	f7fa f80c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006ad0:	b918      	cbnz	r0, 8006ada <__cvt+0xba>
 8006ad2:	f1c4 0401 	rsb	r4, r4, #1
 8006ad6:	f8ca 4000 	str.w	r4, [sl]
 8006ada:	f8da 3000 	ldr.w	r3, [sl]
 8006ade:	4499      	add	r9, r3
 8006ae0:	e7d3      	b.n	8006a8a <__cvt+0x6a>
 8006ae2:	1c59      	adds	r1, r3, #1
 8006ae4:	9103      	str	r1, [sp, #12]
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	e7d9      	b.n	8006a9e <__cvt+0x7e>

08006aea <__exponent>:
 8006aea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aec:	2900      	cmp	r1, #0
 8006aee:	bfba      	itte	lt
 8006af0:	4249      	neglt	r1, r1
 8006af2:	232d      	movlt	r3, #45	@ 0x2d
 8006af4:	232b      	movge	r3, #43	@ 0x2b
 8006af6:	2909      	cmp	r1, #9
 8006af8:	7002      	strb	r2, [r0, #0]
 8006afa:	7043      	strb	r3, [r0, #1]
 8006afc:	dd29      	ble.n	8006b52 <__exponent+0x68>
 8006afe:	f10d 0307 	add.w	r3, sp, #7
 8006b02:	461d      	mov	r5, r3
 8006b04:	270a      	movs	r7, #10
 8006b06:	461a      	mov	r2, r3
 8006b08:	fbb1 f6f7 	udiv	r6, r1, r7
 8006b0c:	fb07 1416 	mls	r4, r7, r6, r1
 8006b10:	3430      	adds	r4, #48	@ 0x30
 8006b12:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006b16:	460c      	mov	r4, r1
 8006b18:	2c63      	cmp	r4, #99	@ 0x63
 8006b1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b1e:	4631      	mov	r1, r6
 8006b20:	dcf1      	bgt.n	8006b06 <__exponent+0x1c>
 8006b22:	3130      	adds	r1, #48	@ 0x30
 8006b24:	1e94      	subs	r4, r2, #2
 8006b26:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006b2a:	1c41      	adds	r1, r0, #1
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	42ab      	cmp	r3, r5
 8006b30:	d30a      	bcc.n	8006b48 <__exponent+0x5e>
 8006b32:	f10d 0309 	add.w	r3, sp, #9
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	42ac      	cmp	r4, r5
 8006b3a:	bf88      	it	hi
 8006b3c:	2300      	movhi	r3, #0
 8006b3e:	3302      	adds	r3, #2
 8006b40:	4403      	add	r3, r0
 8006b42:	1a18      	subs	r0, r3, r0
 8006b44:	b003      	add	sp, #12
 8006b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b48:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006b4c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006b50:	e7ed      	b.n	8006b2e <__exponent+0x44>
 8006b52:	2330      	movs	r3, #48	@ 0x30
 8006b54:	3130      	adds	r1, #48	@ 0x30
 8006b56:	7083      	strb	r3, [r0, #2]
 8006b58:	70c1      	strb	r1, [r0, #3]
 8006b5a:	1d03      	adds	r3, r0, #4
 8006b5c:	e7f1      	b.n	8006b42 <__exponent+0x58>
	...

08006b60 <_printf_float>:
 8006b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b64:	b08d      	sub	sp, #52	@ 0x34
 8006b66:	460c      	mov	r4, r1
 8006b68:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b6c:	4616      	mov	r6, r2
 8006b6e:	461f      	mov	r7, r3
 8006b70:	4605      	mov	r5, r0
 8006b72:	f000 fe05 	bl	8007780 <_localeconv_r>
 8006b76:	6803      	ldr	r3, [r0, #0]
 8006b78:	9304      	str	r3, [sp, #16]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7f9 fb88 	bl	8000290 <strlen>
 8006b80:	2300      	movs	r3, #0
 8006b82:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b84:	f8d8 3000 	ldr.w	r3, [r8]
 8006b88:	9005      	str	r0, [sp, #20]
 8006b8a:	3307      	adds	r3, #7
 8006b8c:	f023 0307 	bic.w	r3, r3, #7
 8006b90:	f103 0208 	add.w	r2, r3, #8
 8006b94:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b98:	f8d4 b000 	ldr.w	fp, [r4]
 8006b9c:	f8c8 2000 	str.w	r2, [r8]
 8006ba0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ba4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ba8:	9307      	str	r3, [sp, #28]
 8006baa:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bae:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006bb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bb6:	4b9c      	ldr	r3, [pc, #624]	@ (8006e28 <_printf_float+0x2c8>)
 8006bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bbc:	f7f9 ffc6 	bl	8000b4c <__aeabi_dcmpun>
 8006bc0:	bb70      	cbnz	r0, 8006c20 <_printf_float+0xc0>
 8006bc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bc6:	4b98      	ldr	r3, [pc, #608]	@ (8006e28 <_printf_float+0x2c8>)
 8006bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bcc:	f7f9 ffa0 	bl	8000b10 <__aeabi_dcmple>
 8006bd0:	bb30      	cbnz	r0, 8006c20 <_printf_float+0xc0>
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	4649      	mov	r1, r9
 8006bda:	f7f9 ff8f 	bl	8000afc <__aeabi_dcmplt>
 8006bde:	b110      	cbz	r0, 8006be6 <_printf_float+0x86>
 8006be0:	232d      	movs	r3, #45	@ 0x2d
 8006be2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006be6:	4a91      	ldr	r2, [pc, #580]	@ (8006e2c <_printf_float+0x2cc>)
 8006be8:	4b91      	ldr	r3, [pc, #580]	@ (8006e30 <_printf_float+0x2d0>)
 8006bea:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006bee:	bf94      	ite	ls
 8006bf0:	4690      	movls	r8, r2
 8006bf2:	4698      	movhi	r8, r3
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	6123      	str	r3, [r4, #16]
 8006bf8:	f02b 0304 	bic.w	r3, fp, #4
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	f04f 0900 	mov.w	r9, #0
 8006c02:	9700      	str	r7, [sp, #0]
 8006c04:	4633      	mov	r3, r6
 8006c06:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f000 f9d2 	bl	8006fb4 <_printf_common>
 8006c10:	3001      	adds	r0, #1
 8006c12:	f040 808d 	bne.w	8006d30 <_printf_float+0x1d0>
 8006c16:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1a:	b00d      	add	sp, #52	@ 0x34
 8006c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	4642      	mov	r2, r8
 8006c22:	464b      	mov	r3, r9
 8006c24:	4640      	mov	r0, r8
 8006c26:	4649      	mov	r1, r9
 8006c28:	f7f9 ff90 	bl	8000b4c <__aeabi_dcmpun>
 8006c2c:	b140      	cbz	r0, 8006c40 <_printf_float+0xe0>
 8006c2e:	464b      	mov	r3, r9
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bfbc      	itt	lt
 8006c34:	232d      	movlt	r3, #45	@ 0x2d
 8006c36:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006c3a:	4a7e      	ldr	r2, [pc, #504]	@ (8006e34 <_printf_float+0x2d4>)
 8006c3c:	4b7e      	ldr	r3, [pc, #504]	@ (8006e38 <_printf_float+0x2d8>)
 8006c3e:	e7d4      	b.n	8006bea <_printf_float+0x8a>
 8006c40:	6863      	ldr	r3, [r4, #4]
 8006c42:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006c46:	9206      	str	r2, [sp, #24]
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	d13b      	bne.n	8006cc4 <_printf_float+0x164>
 8006c4c:	2306      	movs	r3, #6
 8006c4e:	6063      	str	r3, [r4, #4]
 8006c50:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006c54:	2300      	movs	r3, #0
 8006c56:	6022      	str	r2, [r4, #0]
 8006c58:	9303      	str	r3, [sp, #12]
 8006c5a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006c5c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006c60:	ab09      	add	r3, sp, #36	@ 0x24
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	6861      	ldr	r1, [r4, #4]
 8006c66:	ec49 8b10 	vmov	d0, r8, r9
 8006c6a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f7ff fed6 	bl	8006a20 <__cvt>
 8006c74:	9b06      	ldr	r3, [sp, #24]
 8006c76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c78:	2b47      	cmp	r3, #71	@ 0x47
 8006c7a:	4680      	mov	r8, r0
 8006c7c:	d129      	bne.n	8006cd2 <_printf_float+0x172>
 8006c7e:	1cc8      	adds	r0, r1, #3
 8006c80:	db02      	blt.n	8006c88 <_printf_float+0x128>
 8006c82:	6863      	ldr	r3, [r4, #4]
 8006c84:	4299      	cmp	r1, r3
 8006c86:	dd41      	ble.n	8006d0c <_printf_float+0x1ac>
 8006c88:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c8c:	fa5f fa8a 	uxtb.w	sl, sl
 8006c90:	3901      	subs	r1, #1
 8006c92:	4652      	mov	r2, sl
 8006c94:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c98:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c9a:	f7ff ff26 	bl	8006aea <__exponent>
 8006c9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ca0:	1813      	adds	r3, r2, r0
 8006ca2:	2a01      	cmp	r2, #1
 8006ca4:	4681      	mov	r9, r0
 8006ca6:	6123      	str	r3, [r4, #16]
 8006ca8:	dc02      	bgt.n	8006cb0 <_printf_float+0x150>
 8006caa:	6822      	ldr	r2, [r4, #0]
 8006cac:	07d2      	lsls	r2, r2, #31
 8006cae:	d501      	bpl.n	8006cb4 <_printf_float+0x154>
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	6123      	str	r3, [r4, #16]
 8006cb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0a2      	beq.n	8006c02 <_printf_float+0xa2>
 8006cbc:	232d      	movs	r3, #45	@ 0x2d
 8006cbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cc2:	e79e      	b.n	8006c02 <_printf_float+0xa2>
 8006cc4:	9a06      	ldr	r2, [sp, #24]
 8006cc6:	2a47      	cmp	r2, #71	@ 0x47
 8006cc8:	d1c2      	bne.n	8006c50 <_printf_float+0xf0>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1c0      	bne.n	8006c50 <_printf_float+0xf0>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e7bd      	b.n	8006c4e <_printf_float+0xee>
 8006cd2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cd6:	d9db      	bls.n	8006c90 <_printf_float+0x130>
 8006cd8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006cdc:	d118      	bne.n	8006d10 <_printf_float+0x1b0>
 8006cde:	2900      	cmp	r1, #0
 8006ce0:	6863      	ldr	r3, [r4, #4]
 8006ce2:	dd0b      	ble.n	8006cfc <_printf_float+0x19c>
 8006ce4:	6121      	str	r1, [r4, #16]
 8006ce6:	b913      	cbnz	r3, 8006cee <_printf_float+0x18e>
 8006ce8:	6822      	ldr	r2, [r4, #0]
 8006cea:	07d0      	lsls	r0, r2, #31
 8006cec:	d502      	bpl.n	8006cf4 <_printf_float+0x194>
 8006cee:	3301      	adds	r3, #1
 8006cf0:	440b      	add	r3, r1
 8006cf2:	6123      	str	r3, [r4, #16]
 8006cf4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006cf6:	f04f 0900 	mov.w	r9, #0
 8006cfa:	e7db      	b.n	8006cb4 <_printf_float+0x154>
 8006cfc:	b913      	cbnz	r3, 8006d04 <_printf_float+0x1a4>
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	07d2      	lsls	r2, r2, #31
 8006d02:	d501      	bpl.n	8006d08 <_printf_float+0x1a8>
 8006d04:	3302      	adds	r3, #2
 8006d06:	e7f4      	b.n	8006cf2 <_printf_float+0x192>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e7f2      	b.n	8006cf2 <_printf_float+0x192>
 8006d0c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006d10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d12:	4299      	cmp	r1, r3
 8006d14:	db05      	blt.n	8006d22 <_printf_float+0x1c2>
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	6121      	str	r1, [r4, #16]
 8006d1a:	07d8      	lsls	r0, r3, #31
 8006d1c:	d5ea      	bpl.n	8006cf4 <_printf_float+0x194>
 8006d1e:	1c4b      	adds	r3, r1, #1
 8006d20:	e7e7      	b.n	8006cf2 <_printf_float+0x192>
 8006d22:	2900      	cmp	r1, #0
 8006d24:	bfd4      	ite	le
 8006d26:	f1c1 0202 	rsble	r2, r1, #2
 8006d2a:	2201      	movgt	r2, #1
 8006d2c:	4413      	add	r3, r2
 8006d2e:	e7e0      	b.n	8006cf2 <_printf_float+0x192>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	055a      	lsls	r2, r3, #21
 8006d34:	d407      	bmi.n	8006d46 <_printf_float+0x1e6>
 8006d36:	6923      	ldr	r3, [r4, #16]
 8006d38:	4642      	mov	r2, r8
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b8      	blx	r7
 8006d40:	3001      	adds	r0, #1
 8006d42:	d12b      	bne.n	8006d9c <_printf_float+0x23c>
 8006d44:	e767      	b.n	8006c16 <_printf_float+0xb6>
 8006d46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d4a:	f240 80dd 	bls.w	8006f08 <_printf_float+0x3a8>
 8006d4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d52:	2200      	movs	r2, #0
 8006d54:	2300      	movs	r3, #0
 8006d56:	f7f9 fec7 	bl	8000ae8 <__aeabi_dcmpeq>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d033      	beq.n	8006dc6 <_printf_float+0x266>
 8006d5e:	4a37      	ldr	r2, [pc, #220]	@ (8006e3c <_printf_float+0x2dc>)
 8006d60:	2301      	movs	r3, #1
 8006d62:	4631      	mov	r1, r6
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b8      	blx	r7
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f43f af54 	beq.w	8006c16 <_printf_float+0xb6>
 8006d6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006d72:	4543      	cmp	r3, r8
 8006d74:	db02      	blt.n	8006d7c <_printf_float+0x21c>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	07d8      	lsls	r0, r3, #31
 8006d7a:	d50f      	bpl.n	8006d9c <_printf_float+0x23c>
 8006d7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	f43f af45 	beq.w	8006c16 <_printf_float+0xb6>
 8006d8c:	f04f 0900 	mov.w	r9, #0
 8006d90:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d94:	f104 0a1a 	add.w	sl, r4, #26
 8006d98:	45c8      	cmp	r8, r9
 8006d9a:	dc09      	bgt.n	8006db0 <_printf_float+0x250>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	079b      	lsls	r3, r3, #30
 8006da0:	f100 8103 	bmi.w	8006faa <_printf_float+0x44a>
 8006da4:	68e0      	ldr	r0, [r4, #12]
 8006da6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006da8:	4298      	cmp	r0, r3
 8006daa:	bfb8      	it	lt
 8006dac:	4618      	movlt	r0, r3
 8006dae:	e734      	b.n	8006c1a <_printf_float+0xba>
 8006db0:	2301      	movs	r3, #1
 8006db2:	4652      	mov	r2, sl
 8006db4:	4631      	mov	r1, r6
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b8      	blx	r7
 8006dba:	3001      	adds	r0, #1
 8006dbc:	f43f af2b 	beq.w	8006c16 <_printf_float+0xb6>
 8006dc0:	f109 0901 	add.w	r9, r9, #1
 8006dc4:	e7e8      	b.n	8006d98 <_printf_float+0x238>
 8006dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dc39      	bgt.n	8006e40 <_printf_float+0x2e0>
 8006dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8006e3c <_printf_float+0x2dc>)
 8006dce:	2301      	movs	r3, #1
 8006dd0:	4631      	mov	r1, r6
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	47b8      	blx	r7
 8006dd6:	3001      	adds	r0, #1
 8006dd8:	f43f af1d 	beq.w	8006c16 <_printf_float+0xb6>
 8006ddc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006de0:	ea59 0303 	orrs.w	r3, r9, r3
 8006de4:	d102      	bne.n	8006dec <_printf_float+0x28c>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	07d9      	lsls	r1, r3, #31
 8006dea:	d5d7      	bpl.n	8006d9c <_printf_float+0x23c>
 8006dec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006df0:	4631      	mov	r1, r6
 8006df2:	4628      	mov	r0, r5
 8006df4:	47b8      	blx	r7
 8006df6:	3001      	adds	r0, #1
 8006df8:	f43f af0d 	beq.w	8006c16 <_printf_float+0xb6>
 8006dfc:	f04f 0a00 	mov.w	sl, #0
 8006e00:	f104 0b1a 	add.w	fp, r4, #26
 8006e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e06:	425b      	negs	r3, r3
 8006e08:	4553      	cmp	r3, sl
 8006e0a:	dc01      	bgt.n	8006e10 <_printf_float+0x2b0>
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	e793      	b.n	8006d38 <_printf_float+0x1d8>
 8006e10:	2301      	movs	r3, #1
 8006e12:	465a      	mov	r2, fp
 8006e14:	4631      	mov	r1, r6
 8006e16:	4628      	mov	r0, r5
 8006e18:	47b8      	blx	r7
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	f43f aefb 	beq.w	8006c16 <_printf_float+0xb6>
 8006e20:	f10a 0a01 	add.w	sl, sl, #1
 8006e24:	e7ee      	b.n	8006e04 <_printf_float+0x2a4>
 8006e26:	bf00      	nop
 8006e28:	7fefffff 	.word	0x7fefffff
 8006e2c:	0800a358 	.word	0x0800a358
 8006e30:	0800a35c 	.word	0x0800a35c
 8006e34:	0800a360 	.word	0x0800a360
 8006e38:	0800a364 	.word	0x0800a364
 8006e3c:	0800a368 	.word	0x0800a368
 8006e40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e42:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e46:	4553      	cmp	r3, sl
 8006e48:	bfa8      	it	ge
 8006e4a:	4653      	movge	r3, sl
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	4699      	mov	r9, r3
 8006e50:	dc36      	bgt.n	8006ec0 <_printf_float+0x360>
 8006e52:	f04f 0b00 	mov.w	fp, #0
 8006e56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e5a:	f104 021a 	add.w	r2, r4, #26
 8006e5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006e60:	9306      	str	r3, [sp, #24]
 8006e62:	eba3 0309 	sub.w	r3, r3, r9
 8006e66:	455b      	cmp	r3, fp
 8006e68:	dc31      	bgt.n	8006ece <_printf_float+0x36e>
 8006e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e6c:	459a      	cmp	sl, r3
 8006e6e:	dc3a      	bgt.n	8006ee6 <_printf_float+0x386>
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	07da      	lsls	r2, r3, #31
 8006e74:	d437      	bmi.n	8006ee6 <_printf_float+0x386>
 8006e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e78:	ebaa 0903 	sub.w	r9, sl, r3
 8006e7c:	9b06      	ldr	r3, [sp, #24]
 8006e7e:	ebaa 0303 	sub.w	r3, sl, r3
 8006e82:	4599      	cmp	r9, r3
 8006e84:	bfa8      	it	ge
 8006e86:	4699      	movge	r9, r3
 8006e88:	f1b9 0f00 	cmp.w	r9, #0
 8006e8c:	dc33      	bgt.n	8006ef6 <_printf_float+0x396>
 8006e8e:	f04f 0800 	mov.w	r8, #0
 8006e92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e96:	f104 0b1a 	add.w	fp, r4, #26
 8006e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e9c:	ebaa 0303 	sub.w	r3, sl, r3
 8006ea0:	eba3 0309 	sub.w	r3, r3, r9
 8006ea4:	4543      	cmp	r3, r8
 8006ea6:	f77f af79 	ble.w	8006d9c <_printf_float+0x23c>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	465a      	mov	r2, fp
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	47b8      	blx	r7
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	f43f aeae 	beq.w	8006c16 <_printf_float+0xb6>
 8006eba:	f108 0801 	add.w	r8, r8, #1
 8006ebe:	e7ec      	b.n	8006e9a <_printf_float+0x33a>
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	4631      	mov	r1, r6
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	47b8      	blx	r7
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d1c2      	bne.n	8006e52 <_printf_float+0x2f2>
 8006ecc:	e6a3      	b.n	8006c16 <_printf_float+0xb6>
 8006ece:	2301      	movs	r3, #1
 8006ed0:	4631      	mov	r1, r6
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	9206      	str	r2, [sp, #24]
 8006ed6:	47b8      	blx	r7
 8006ed8:	3001      	adds	r0, #1
 8006eda:	f43f ae9c 	beq.w	8006c16 <_printf_float+0xb6>
 8006ede:	9a06      	ldr	r2, [sp, #24]
 8006ee0:	f10b 0b01 	add.w	fp, fp, #1
 8006ee4:	e7bb      	b.n	8006e5e <_printf_float+0x2fe>
 8006ee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b8      	blx	r7
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d1c0      	bne.n	8006e76 <_printf_float+0x316>
 8006ef4:	e68f      	b.n	8006c16 <_printf_float+0xb6>
 8006ef6:	9a06      	ldr	r2, [sp, #24]
 8006ef8:	464b      	mov	r3, r9
 8006efa:	4442      	add	r2, r8
 8006efc:	4631      	mov	r1, r6
 8006efe:	4628      	mov	r0, r5
 8006f00:	47b8      	blx	r7
 8006f02:	3001      	adds	r0, #1
 8006f04:	d1c3      	bne.n	8006e8e <_printf_float+0x32e>
 8006f06:	e686      	b.n	8006c16 <_printf_float+0xb6>
 8006f08:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006f0c:	f1ba 0f01 	cmp.w	sl, #1
 8006f10:	dc01      	bgt.n	8006f16 <_printf_float+0x3b6>
 8006f12:	07db      	lsls	r3, r3, #31
 8006f14:	d536      	bpl.n	8006f84 <_printf_float+0x424>
 8006f16:	2301      	movs	r3, #1
 8006f18:	4642      	mov	r2, r8
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	47b8      	blx	r7
 8006f20:	3001      	adds	r0, #1
 8006f22:	f43f ae78 	beq.w	8006c16 <_printf_float+0xb6>
 8006f26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	47b8      	blx	r7
 8006f30:	3001      	adds	r0, #1
 8006f32:	f43f ae70 	beq.w	8006c16 <_printf_float+0xb6>
 8006f36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f42:	f7f9 fdd1 	bl	8000ae8 <__aeabi_dcmpeq>
 8006f46:	b9c0      	cbnz	r0, 8006f7a <_printf_float+0x41a>
 8006f48:	4653      	mov	r3, sl
 8006f4a:	f108 0201 	add.w	r2, r8, #1
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4628      	mov	r0, r5
 8006f52:	47b8      	blx	r7
 8006f54:	3001      	adds	r0, #1
 8006f56:	d10c      	bne.n	8006f72 <_printf_float+0x412>
 8006f58:	e65d      	b.n	8006c16 <_printf_float+0xb6>
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	465a      	mov	r2, fp
 8006f5e:	4631      	mov	r1, r6
 8006f60:	4628      	mov	r0, r5
 8006f62:	47b8      	blx	r7
 8006f64:	3001      	adds	r0, #1
 8006f66:	f43f ae56 	beq.w	8006c16 <_printf_float+0xb6>
 8006f6a:	f108 0801 	add.w	r8, r8, #1
 8006f6e:	45d0      	cmp	r8, sl
 8006f70:	dbf3      	blt.n	8006f5a <_printf_float+0x3fa>
 8006f72:	464b      	mov	r3, r9
 8006f74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f78:	e6df      	b.n	8006d3a <_printf_float+0x1da>
 8006f7a:	f04f 0800 	mov.w	r8, #0
 8006f7e:	f104 0b1a 	add.w	fp, r4, #26
 8006f82:	e7f4      	b.n	8006f6e <_printf_float+0x40e>
 8006f84:	2301      	movs	r3, #1
 8006f86:	4642      	mov	r2, r8
 8006f88:	e7e1      	b.n	8006f4e <_printf_float+0x3ee>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	464a      	mov	r2, r9
 8006f8e:	4631      	mov	r1, r6
 8006f90:	4628      	mov	r0, r5
 8006f92:	47b8      	blx	r7
 8006f94:	3001      	adds	r0, #1
 8006f96:	f43f ae3e 	beq.w	8006c16 <_printf_float+0xb6>
 8006f9a:	f108 0801 	add.w	r8, r8, #1
 8006f9e:	68e3      	ldr	r3, [r4, #12]
 8006fa0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006fa2:	1a5b      	subs	r3, r3, r1
 8006fa4:	4543      	cmp	r3, r8
 8006fa6:	dcf0      	bgt.n	8006f8a <_printf_float+0x42a>
 8006fa8:	e6fc      	b.n	8006da4 <_printf_float+0x244>
 8006faa:	f04f 0800 	mov.w	r8, #0
 8006fae:	f104 0919 	add.w	r9, r4, #25
 8006fb2:	e7f4      	b.n	8006f9e <_printf_float+0x43e>

08006fb4 <_printf_common>:
 8006fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fb8:	4616      	mov	r6, r2
 8006fba:	4698      	mov	r8, r3
 8006fbc:	688a      	ldr	r2, [r1, #8]
 8006fbe:	690b      	ldr	r3, [r1, #16]
 8006fc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	bfb8      	it	lt
 8006fc8:	4613      	movlt	r3, r2
 8006fca:	6033      	str	r3, [r6, #0]
 8006fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	b10a      	cbz	r2, 8006fda <_printf_common+0x26>
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	6033      	str	r3, [r6, #0]
 8006fda:	6823      	ldr	r3, [r4, #0]
 8006fdc:	0699      	lsls	r1, r3, #26
 8006fde:	bf42      	ittt	mi
 8006fe0:	6833      	ldrmi	r3, [r6, #0]
 8006fe2:	3302      	addmi	r3, #2
 8006fe4:	6033      	strmi	r3, [r6, #0]
 8006fe6:	6825      	ldr	r5, [r4, #0]
 8006fe8:	f015 0506 	ands.w	r5, r5, #6
 8006fec:	d106      	bne.n	8006ffc <_printf_common+0x48>
 8006fee:	f104 0a19 	add.w	sl, r4, #25
 8006ff2:	68e3      	ldr	r3, [r4, #12]
 8006ff4:	6832      	ldr	r2, [r6, #0]
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	42ab      	cmp	r3, r5
 8006ffa:	dc26      	bgt.n	800704a <_printf_common+0x96>
 8006ffc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007000:	6822      	ldr	r2, [r4, #0]
 8007002:	3b00      	subs	r3, #0
 8007004:	bf18      	it	ne
 8007006:	2301      	movne	r3, #1
 8007008:	0692      	lsls	r2, r2, #26
 800700a:	d42b      	bmi.n	8007064 <_printf_common+0xb0>
 800700c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007010:	4641      	mov	r1, r8
 8007012:	4638      	mov	r0, r7
 8007014:	47c8      	blx	r9
 8007016:	3001      	adds	r0, #1
 8007018:	d01e      	beq.n	8007058 <_printf_common+0xa4>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	6922      	ldr	r2, [r4, #16]
 800701e:	f003 0306 	and.w	r3, r3, #6
 8007022:	2b04      	cmp	r3, #4
 8007024:	bf02      	ittt	eq
 8007026:	68e5      	ldreq	r5, [r4, #12]
 8007028:	6833      	ldreq	r3, [r6, #0]
 800702a:	1aed      	subeq	r5, r5, r3
 800702c:	68a3      	ldr	r3, [r4, #8]
 800702e:	bf0c      	ite	eq
 8007030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007034:	2500      	movne	r5, #0
 8007036:	4293      	cmp	r3, r2
 8007038:	bfc4      	itt	gt
 800703a:	1a9b      	subgt	r3, r3, r2
 800703c:	18ed      	addgt	r5, r5, r3
 800703e:	2600      	movs	r6, #0
 8007040:	341a      	adds	r4, #26
 8007042:	42b5      	cmp	r5, r6
 8007044:	d11a      	bne.n	800707c <_printf_common+0xc8>
 8007046:	2000      	movs	r0, #0
 8007048:	e008      	b.n	800705c <_printf_common+0xa8>
 800704a:	2301      	movs	r3, #1
 800704c:	4652      	mov	r2, sl
 800704e:	4641      	mov	r1, r8
 8007050:	4638      	mov	r0, r7
 8007052:	47c8      	blx	r9
 8007054:	3001      	adds	r0, #1
 8007056:	d103      	bne.n	8007060 <_printf_common+0xac>
 8007058:	f04f 30ff 	mov.w	r0, #4294967295
 800705c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007060:	3501      	adds	r5, #1
 8007062:	e7c6      	b.n	8006ff2 <_printf_common+0x3e>
 8007064:	18e1      	adds	r1, r4, r3
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	2030      	movs	r0, #48	@ 0x30
 800706a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800706e:	4422      	add	r2, r4
 8007070:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007074:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007078:	3302      	adds	r3, #2
 800707a:	e7c7      	b.n	800700c <_printf_common+0x58>
 800707c:	2301      	movs	r3, #1
 800707e:	4622      	mov	r2, r4
 8007080:	4641      	mov	r1, r8
 8007082:	4638      	mov	r0, r7
 8007084:	47c8      	blx	r9
 8007086:	3001      	adds	r0, #1
 8007088:	d0e6      	beq.n	8007058 <_printf_common+0xa4>
 800708a:	3601      	adds	r6, #1
 800708c:	e7d9      	b.n	8007042 <_printf_common+0x8e>
	...

08007090 <_printf_i>:
 8007090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007094:	7e0f      	ldrb	r7, [r1, #24]
 8007096:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007098:	2f78      	cmp	r7, #120	@ 0x78
 800709a:	4691      	mov	r9, r2
 800709c:	4680      	mov	r8, r0
 800709e:	460c      	mov	r4, r1
 80070a0:	469a      	mov	sl, r3
 80070a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80070a6:	d807      	bhi.n	80070b8 <_printf_i+0x28>
 80070a8:	2f62      	cmp	r7, #98	@ 0x62
 80070aa:	d80a      	bhi.n	80070c2 <_printf_i+0x32>
 80070ac:	2f00      	cmp	r7, #0
 80070ae:	f000 80d2 	beq.w	8007256 <_printf_i+0x1c6>
 80070b2:	2f58      	cmp	r7, #88	@ 0x58
 80070b4:	f000 80b9 	beq.w	800722a <_printf_i+0x19a>
 80070b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80070c0:	e03a      	b.n	8007138 <_printf_i+0xa8>
 80070c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80070c6:	2b15      	cmp	r3, #21
 80070c8:	d8f6      	bhi.n	80070b8 <_printf_i+0x28>
 80070ca:	a101      	add	r1, pc, #4	@ (adr r1, 80070d0 <_printf_i+0x40>)
 80070cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070d0:	08007129 	.word	0x08007129
 80070d4:	0800713d 	.word	0x0800713d
 80070d8:	080070b9 	.word	0x080070b9
 80070dc:	080070b9 	.word	0x080070b9
 80070e0:	080070b9 	.word	0x080070b9
 80070e4:	080070b9 	.word	0x080070b9
 80070e8:	0800713d 	.word	0x0800713d
 80070ec:	080070b9 	.word	0x080070b9
 80070f0:	080070b9 	.word	0x080070b9
 80070f4:	080070b9 	.word	0x080070b9
 80070f8:	080070b9 	.word	0x080070b9
 80070fc:	0800723d 	.word	0x0800723d
 8007100:	08007167 	.word	0x08007167
 8007104:	080071f7 	.word	0x080071f7
 8007108:	080070b9 	.word	0x080070b9
 800710c:	080070b9 	.word	0x080070b9
 8007110:	0800725f 	.word	0x0800725f
 8007114:	080070b9 	.word	0x080070b9
 8007118:	08007167 	.word	0x08007167
 800711c:	080070b9 	.word	0x080070b9
 8007120:	080070b9 	.word	0x080070b9
 8007124:	080071ff 	.word	0x080071ff
 8007128:	6833      	ldr	r3, [r6, #0]
 800712a:	1d1a      	adds	r2, r3, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6032      	str	r2, [r6, #0]
 8007130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007138:	2301      	movs	r3, #1
 800713a:	e09d      	b.n	8007278 <_printf_i+0x1e8>
 800713c:	6833      	ldr	r3, [r6, #0]
 800713e:	6820      	ldr	r0, [r4, #0]
 8007140:	1d19      	adds	r1, r3, #4
 8007142:	6031      	str	r1, [r6, #0]
 8007144:	0606      	lsls	r6, r0, #24
 8007146:	d501      	bpl.n	800714c <_printf_i+0xbc>
 8007148:	681d      	ldr	r5, [r3, #0]
 800714a:	e003      	b.n	8007154 <_printf_i+0xc4>
 800714c:	0645      	lsls	r5, r0, #25
 800714e:	d5fb      	bpl.n	8007148 <_printf_i+0xb8>
 8007150:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007154:	2d00      	cmp	r5, #0
 8007156:	da03      	bge.n	8007160 <_printf_i+0xd0>
 8007158:	232d      	movs	r3, #45	@ 0x2d
 800715a:	426d      	negs	r5, r5
 800715c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007160:	4859      	ldr	r0, [pc, #356]	@ (80072c8 <_printf_i+0x238>)
 8007162:	230a      	movs	r3, #10
 8007164:	e011      	b.n	800718a <_printf_i+0xfa>
 8007166:	6821      	ldr	r1, [r4, #0]
 8007168:	6833      	ldr	r3, [r6, #0]
 800716a:	0608      	lsls	r0, r1, #24
 800716c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007170:	d402      	bmi.n	8007178 <_printf_i+0xe8>
 8007172:	0649      	lsls	r1, r1, #25
 8007174:	bf48      	it	mi
 8007176:	b2ad      	uxthmi	r5, r5
 8007178:	2f6f      	cmp	r7, #111	@ 0x6f
 800717a:	4853      	ldr	r0, [pc, #332]	@ (80072c8 <_printf_i+0x238>)
 800717c:	6033      	str	r3, [r6, #0]
 800717e:	bf14      	ite	ne
 8007180:	230a      	movne	r3, #10
 8007182:	2308      	moveq	r3, #8
 8007184:	2100      	movs	r1, #0
 8007186:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800718a:	6866      	ldr	r6, [r4, #4]
 800718c:	60a6      	str	r6, [r4, #8]
 800718e:	2e00      	cmp	r6, #0
 8007190:	bfa2      	ittt	ge
 8007192:	6821      	ldrge	r1, [r4, #0]
 8007194:	f021 0104 	bicge.w	r1, r1, #4
 8007198:	6021      	strge	r1, [r4, #0]
 800719a:	b90d      	cbnz	r5, 80071a0 <_printf_i+0x110>
 800719c:	2e00      	cmp	r6, #0
 800719e:	d04b      	beq.n	8007238 <_printf_i+0x1a8>
 80071a0:	4616      	mov	r6, r2
 80071a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80071a6:	fb03 5711 	mls	r7, r3, r1, r5
 80071aa:	5dc7      	ldrb	r7, [r0, r7]
 80071ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80071b0:	462f      	mov	r7, r5
 80071b2:	42bb      	cmp	r3, r7
 80071b4:	460d      	mov	r5, r1
 80071b6:	d9f4      	bls.n	80071a2 <_printf_i+0x112>
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d10b      	bne.n	80071d4 <_printf_i+0x144>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	07df      	lsls	r7, r3, #31
 80071c0:	d508      	bpl.n	80071d4 <_printf_i+0x144>
 80071c2:	6923      	ldr	r3, [r4, #16]
 80071c4:	6861      	ldr	r1, [r4, #4]
 80071c6:	4299      	cmp	r1, r3
 80071c8:	bfde      	ittt	le
 80071ca:	2330      	movle	r3, #48	@ 0x30
 80071cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80071d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80071d4:	1b92      	subs	r2, r2, r6
 80071d6:	6122      	str	r2, [r4, #16]
 80071d8:	f8cd a000 	str.w	sl, [sp]
 80071dc:	464b      	mov	r3, r9
 80071de:	aa03      	add	r2, sp, #12
 80071e0:	4621      	mov	r1, r4
 80071e2:	4640      	mov	r0, r8
 80071e4:	f7ff fee6 	bl	8006fb4 <_printf_common>
 80071e8:	3001      	adds	r0, #1
 80071ea:	d14a      	bne.n	8007282 <_printf_i+0x1f2>
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	b004      	add	sp, #16
 80071f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	f043 0320 	orr.w	r3, r3, #32
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	4833      	ldr	r0, [pc, #204]	@ (80072cc <_printf_i+0x23c>)
 8007200:	2778      	movs	r7, #120	@ 0x78
 8007202:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	6831      	ldr	r1, [r6, #0]
 800720a:	061f      	lsls	r7, r3, #24
 800720c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007210:	d402      	bmi.n	8007218 <_printf_i+0x188>
 8007212:	065f      	lsls	r7, r3, #25
 8007214:	bf48      	it	mi
 8007216:	b2ad      	uxthmi	r5, r5
 8007218:	6031      	str	r1, [r6, #0]
 800721a:	07d9      	lsls	r1, r3, #31
 800721c:	bf44      	itt	mi
 800721e:	f043 0320 	orrmi.w	r3, r3, #32
 8007222:	6023      	strmi	r3, [r4, #0]
 8007224:	b11d      	cbz	r5, 800722e <_printf_i+0x19e>
 8007226:	2310      	movs	r3, #16
 8007228:	e7ac      	b.n	8007184 <_printf_i+0xf4>
 800722a:	4827      	ldr	r0, [pc, #156]	@ (80072c8 <_printf_i+0x238>)
 800722c:	e7e9      	b.n	8007202 <_printf_i+0x172>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	f023 0320 	bic.w	r3, r3, #32
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	e7f6      	b.n	8007226 <_printf_i+0x196>
 8007238:	4616      	mov	r6, r2
 800723a:	e7bd      	b.n	80071b8 <_printf_i+0x128>
 800723c:	6833      	ldr	r3, [r6, #0]
 800723e:	6825      	ldr	r5, [r4, #0]
 8007240:	6961      	ldr	r1, [r4, #20]
 8007242:	1d18      	adds	r0, r3, #4
 8007244:	6030      	str	r0, [r6, #0]
 8007246:	062e      	lsls	r6, r5, #24
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	d501      	bpl.n	8007250 <_printf_i+0x1c0>
 800724c:	6019      	str	r1, [r3, #0]
 800724e:	e002      	b.n	8007256 <_printf_i+0x1c6>
 8007250:	0668      	lsls	r0, r5, #25
 8007252:	d5fb      	bpl.n	800724c <_printf_i+0x1bc>
 8007254:	8019      	strh	r1, [r3, #0]
 8007256:	2300      	movs	r3, #0
 8007258:	6123      	str	r3, [r4, #16]
 800725a:	4616      	mov	r6, r2
 800725c:	e7bc      	b.n	80071d8 <_printf_i+0x148>
 800725e:	6833      	ldr	r3, [r6, #0]
 8007260:	1d1a      	adds	r2, r3, #4
 8007262:	6032      	str	r2, [r6, #0]
 8007264:	681e      	ldr	r6, [r3, #0]
 8007266:	6862      	ldr	r2, [r4, #4]
 8007268:	2100      	movs	r1, #0
 800726a:	4630      	mov	r0, r6
 800726c:	f7f8 ffc0 	bl	80001f0 <memchr>
 8007270:	b108      	cbz	r0, 8007276 <_printf_i+0x1e6>
 8007272:	1b80      	subs	r0, r0, r6
 8007274:	6060      	str	r0, [r4, #4]
 8007276:	6863      	ldr	r3, [r4, #4]
 8007278:	6123      	str	r3, [r4, #16]
 800727a:	2300      	movs	r3, #0
 800727c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007280:	e7aa      	b.n	80071d8 <_printf_i+0x148>
 8007282:	6923      	ldr	r3, [r4, #16]
 8007284:	4632      	mov	r2, r6
 8007286:	4649      	mov	r1, r9
 8007288:	4640      	mov	r0, r8
 800728a:	47d0      	blx	sl
 800728c:	3001      	adds	r0, #1
 800728e:	d0ad      	beq.n	80071ec <_printf_i+0x15c>
 8007290:	6823      	ldr	r3, [r4, #0]
 8007292:	079b      	lsls	r3, r3, #30
 8007294:	d413      	bmi.n	80072be <_printf_i+0x22e>
 8007296:	68e0      	ldr	r0, [r4, #12]
 8007298:	9b03      	ldr	r3, [sp, #12]
 800729a:	4298      	cmp	r0, r3
 800729c:	bfb8      	it	lt
 800729e:	4618      	movlt	r0, r3
 80072a0:	e7a6      	b.n	80071f0 <_printf_i+0x160>
 80072a2:	2301      	movs	r3, #1
 80072a4:	4632      	mov	r2, r6
 80072a6:	4649      	mov	r1, r9
 80072a8:	4640      	mov	r0, r8
 80072aa:	47d0      	blx	sl
 80072ac:	3001      	adds	r0, #1
 80072ae:	d09d      	beq.n	80071ec <_printf_i+0x15c>
 80072b0:	3501      	adds	r5, #1
 80072b2:	68e3      	ldr	r3, [r4, #12]
 80072b4:	9903      	ldr	r1, [sp, #12]
 80072b6:	1a5b      	subs	r3, r3, r1
 80072b8:	42ab      	cmp	r3, r5
 80072ba:	dcf2      	bgt.n	80072a2 <_printf_i+0x212>
 80072bc:	e7eb      	b.n	8007296 <_printf_i+0x206>
 80072be:	2500      	movs	r5, #0
 80072c0:	f104 0619 	add.w	r6, r4, #25
 80072c4:	e7f5      	b.n	80072b2 <_printf_i+0x222>
 80072c6:	bf00      	nop
 80072c8:	0800a36a 	.word	0x0800a36a
 80072cc:	0800a37b 	.word	0x0800a37b

080072d0 <std>:
 80072d0:	2300      	movs	r3, #0
 80072d2:	b510      	push	{r4, lr}
 80072d4:	4604      	mov	r4, r0
 80072d6:	e9c0 3300 	strd	r3, r3, [r0]
 80072da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072de:	6083      	str	r3, [r0, #8]
 80072e0:	8181      	strh	r1, [r0, #12]
 80072e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80072e4:	81c2      	strh	r2, [r0, #14]
 80072e6:	6183      	str	r3, [r0, #24]
 80072e8:	4619      	mov	r1, r3
 80072ea:	2208      	movs	r2, #8
 80072ec:	305c      	adds	r0, #92	@ 0x5c
 80072ee:	f000 fa2d 	bl	800774c <memset>
 80072f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007328 <std+0x58>)
 80072f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80072f6:	4b0d      	ldr	r3, [pc, #52]	@ (800732c <std+0x5c>)
 80072f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007330 <std+0x60>)
 80072fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007334 <std+0x64>)
 8007300:	6323      	str	r3, [r4, #48]	@ 0x30
 8007302:	4b0d      	ldr	r3, [pc, #52]	@ (8007338 <std+0x68>)
 8007304:	6224      	str	r4, [r4, #32]
 8007306:	429c      	cmp	r4, r3
 8007308:	d006      	beq.n	8007318 <std+0x48>
 800730a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800730e:	4294      	cmp	r4, r2
 8007310:	d002      	beq.n	8007318 <std+0x48>
 8007312:	33d0      	adds	r3, #208	@ 0xd0
 8007314:	429c      	cmp	r4, r3
 8007316:	d105      	bne.n	8007324 <std+0x54>
 8007318:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800731c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007320:	f000 baa2 	b.w	8007868 <__retarget_lock_init_recursive>
 8007324:	bd10      	pop	{r4, pc}
 8007326:	bf00      	nop
 8007328:	0800759d 	.word	0x0800759d
 800732c:	080075bf 	.word	0x080075bf
 8007330:	080075f7 	.word	0x080075f7
 8007334:	0800761b 	.word	0x0800761b
 8007338:	20000604 	.word	0x20000604

0800733c <stdio_exit_handler>:
 800733c:	4a02      	ldr	r2, [pc, #8]	@ (8007348 <stdio_exit_handler+0xc>)
 800733e:	4903      	ldr	r1, [pc, #12]	@ (800734c <stdio_exit_handler+0x10>)
 8007340:	4803      	ldr	r0, [pc, #12]	@ (8007350 <stdio_exit_handler+0x14>)
 8007342:	f000 b869 	b.w	8007418 <_fwalk_sglue>
 8007346:	bf00      	nop
 8007348:	20000018 	.word	0x20000018
 800734c:	08009dc9 	.word	0x08009dc9
 8007350:	20000194 	.word	0x20000194

08007354 <cleanup_stdio>:
 8007354:	6841      	ldr	r1, [r0, #4]
 8007356:	4b0c      	ldr	r3, [pc, #48]	@ (8007388 <cleanup_stdio+0x34>)
 8007358:	4299      	cmp	r1, r3
 800735a:	b510      	push	{r4, lr}
 800735c:	4604      	mov	r4, r0
 800735e:	d001      	beq.n	8007364 <cleanup_stdio+0x10>
 8007360:	f002 fd32 	bl	8009dc8 <_fflush_r>
 8007364:	68a1      	ldr	r1, [r4, #8]
 8007366:	4b09      	ldr	r3, [pc, #36]	@ (800738c <cleanup_stdio+0x38>)
 8007368:	4299      	cmp	r1, r3
 800736a:	d002      	beq.n	8007372 <cleanup_stdio+0x1e>
 800736c:	4620      	mov	r0, r4
 800736e:	f002 fd2b 	bl	8009dc8 <_fflush_r>
 8007372:	68e1      	ldr	r1, [r4, #12]
 8007374:	4b06      	ldr	r3, [pc, #24]	@ (8007390 <cleanup_stdio+0x3c>)
 8007376:	4299      	cmp	r1, r3
 8007378:	d004      	beq.n	8007384 <cleanup_stdio+0x30>
 800737a:	4620      	mov	r0, r4
 800737c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007380:	f002 bd22 	b.w	8009dc8 <_fflush_r>
 8007384:	bd10      	pop	{r4, pc}
 8007386:	bf00      	nop
 8007388:	20000604 	.word	0x20000604
 800738c:	2000066c 	.word	0x2000066c
 8007390:	200006d4 	.word	0x200006d4

08007394 <global_stdio_init.part.0>:
 8007394:	b510      	push	{r4, lr}
 8007396:	4b0b      	ldr	r3, [pc, #44]	@ (80073c4 <global_stdio_init.part.0+0x30>)
 8007398:	4c0b      	ldr	r4, [pc, #44]	@ (80073c8 <global_stdio_init.part.0+0x34>)
 800739a:	4a0c      	ldr	r2, [pc, #48]	@ (80073cc <global_stdio_init.part.0+0x38>)
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	4620      	mov	r0, r4
 80073a0:	2200      	movs	r2, #0
 80073a2:	2104      	movs	r1, #4
 80073a4:	f7ff ff94 	bl	80072d0 <std>
 80073a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073ac:	2201      	movs	r2, #1
 80073ae:	2109      	movs	r1, #9
 80073b0:	f7ff ff8e 	bl	80072d0 <std>
 80073b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073b8:	2202      	movs	r2, #2
 80073ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073be:	2112      	movs	r1, #18
 80073c0:	f7ff bf86 	b.w	80072d0 <std>
 80073c4:	2000073c 	.word	0x2000073c
 80073c8:	20000604 	.word	0x20000604
 80073cc:	0800733d 	.word	0x0800733d

080073d0 <__sfp_lock_acquire>:
 80073d0:	4801      	ldr	r0, [pc, #4]	@ (80073d8 <__sfp_lock_acquire+0x8>)
 80073d2:	f000 ba4a 	b.w	800786a <__retarget_lock_acquire_recursive>
 80073d6:	bf00      	nop
 80073d8:	20000745 	.word	0x20000745

080073dc <__sfp_lock_release>:
 80073dc:	4801      	ldr	r0, [pc, #4]	@ (80073e4 <__sfp_lock_release+0x8>)
 80073de:	f000 ba45 	b.w	800786c <__retarget_lock_release_recursive>
 80073e2:	bf00      	nop
 80073e4:	20000745 	.word	0x20000745

080073e8 <__sinit>:
 80073e8:	b510      	push	{r4, lr}
 80073ea:	4604      	mov	r4, r0
 80073ec:	f7ff fff0 	bl	80073d0 <__sfp_lock_acquire>
 80073f0:	6a23      	ldr	r3, [r4, #32]
 80073f2:	b11b      	cbz	r3, 80073fc <__sinit+0x14>
 80073f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f8:	f7ff bff0 	b.w	80073dc <__sfp_lock_release>
 80073fc:	4b04      	ldr	r3, [pc, #16]	@ (8007410 <__sinit+0x28>)
 80073fe:	6223      	str	r3, [r4, #32]
 8007400:	4b04      	ldr	r3, [pc, #16]	@ (8007414 <__sinit+0x2c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1f5      	bne.n	80073f4 <__sinit+0xc>
 8007408:	f7ff ffc4 	bl	8007394 <global_stdio_init.part.0>
 800740c:	e7f2      	b.n	80073f4 <__sinit+0xc>
 800740e:	bf00      	nop
 8007410:	08007355 	.word	0x08007355
 8007414:	2000073c 	.word	0x2000073c

08007418 <_fwalk_sglue>:
 8007418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800741c:	4607      	mov	r7, r0
 800741e:	4688      	mov	r8, r1
 8007420:	4614      	mov	r4, r2
 8007422:	2600      	movs	r6, #0
 8007424:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007428:	f1b9 0901 	subs.w	r9, r9, #1
 800742c:	d505      	bpl.n	800743a <_fwalk_sglue+0x22>
 800742e:	6824      	ldr	r4, [r4, #0]
 8007430:	2c00      	cmp	r4, #0
 8007432:	d1f7      	bne.n	8007424 <_fwalk_sglue+0xc>
 8007434:	4630      	mov	r0, r6
 8007436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743a:	89ab      	ldrh	r3, [r5, #12]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d907      	bls.n	8007450 <_fwalk_sglue+0x38>
 8007440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007444:	3301      	adds	r3, #1
 8007446:	d003      	beq.n	8007450 <_fwalk_sglue+0x38>
 8007448:	4629      	mov	r1, r5
 800744a:	4638      	mov	r0, r7
 800744c:	47c0      	blx	r8
 800744e:	4306      	orrs	r6, r0
 8007450:	3568      	adds	r5, #104	@ 0x68
 8007452:	e7e9      	b.n	8007428 <_fwalk_sglue+0x10>

08007454 <iprintf>:
 8007454:	b40f      	push	{r0, r1, r2, r3}
 8007456:	b507      	push	{r0, r1, r2, lr}
 8007458:	4906      	ldr	r1, [pc, #24]	@ (8007474 <iprintf+0x20>)
 800745a:	ab04      	add	r3, sp, #16
 800745c:	6808      	ldr	r0, [r1, #0]
 800745e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007462:	6881      	ldr	r1, [r0, #8]
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	f002 fb13 	bl	8009a90 <_vfiprintf_r>
 800746a:	b003      	add	sp, #12
 800746c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007470:	b004      	add	sp, #16
 8007472:	4770      	bx	lr
 8007474:	20000190 	.word	0x20000190

08007478 <_puts_r>:
 8007478:	6a03      	ldr	r3, [r0, #32]
 800747a:	b570      	push	{r4, r5, r6, lr}
 800747c:	6884      	ldr	r4, [r0, #8]
 800747e:	4605      	mov	r5, r0
 8007480:	460e      	mov	r6, r1
 8007482:	b90b      	cbnz	r3, 8007488 <_puts_r+0x10>
 8007484:	f7ff ffb0 	bl	80073e8 <__sinit>
 8007488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800748a:	07db      	lsls	r3, r3, #31
 800748c:	d405      	bmi.n	800749a <_puts_r+0x22>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	0598      	lsls	r0, r3, #22
 8007492:	d402      	bmi.n	800749a <_puts_r+0x22>
 8007494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007496:	f000 f9e8 	bl	800786a <__retarget_lock_acquire_recursive>
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	0719      	lsls	r1, r3, #28
 800749e:	d502      	bpl.n	80074a6 <_puts_r+0x2e>
 80074a0:	6923      	ldr	r3, [r4, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d135      	bne.n	8007512 <_puts_r+0x9a>
 80074a6:	4621      	mov	r1, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 f8f9 	bl	80076a0 <__swsetup_r>
 80074ae:	b380      	cbz	r0, 8007512 <_puts_r+0x9a>
 80074b0:	f04f 35ff 	mov.w	r5, #4294967295
 80074b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074b6:	07da      	lsls	r2, r3, #31
 80074b8:	d405      	bmi.n	80074c6 <_puts_r+0x4e>
 80074ba:	89a3      	ldrh	r3, [r4, #12]
 80074bc:	059b      	lsls	r3, r3, #22
 80074be:	d402      	bmi.n	80074c6 <_puts_r+0x4e>
 80074c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074c2:	f000 f9d3 	bl	800786c <__retarget_lock_release_recursive>
 80074c6:	4628      	mov	r0, r5
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	da04      	bge.n	80074d8 <_puts_r+0x60>
 80074ce:	69a2      	ldr	r2, [r4, #24]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	dc17      	bgt.n	8007504 <_puts_r+0x8c>
 80074d4:	290a      	cmp	r1, #10
 80074d6:	d015      	beq.n	8007504 <_puts_r+0x8c>
 80074d8:	6823      	ldr	r3, [r4, #0]
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	6022      	str	r2, [r4, #0]
 80074de:	7019      	strb	r1, [r3, #0]
 80074e0:	68a3      	ldr	r3, [r4, #8]
 80074e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074e6:	3b01      	subs	r3, #1
 80074e8:	60a3      	str	r3, [r4, #8]
 80074ea:	2900      	cmp	r1, #0
 80074ec:	d1ed      	bne.n	80074ca <_puts_r+0x52>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	da11      	bge.n	8007516 <_puts_r+0x9e>
 80074f2:	4622      	mov	r2, r4
 80074f4:	210a      	movs	r1, #10
 80074f6:	4628      	mov	r0, r5
 80074f8:	f000 f893 	bl	8007622 <__swbuf_r>
 80074fc:	3001      	adds	r0, #1
 80074fe:	d0d7      	beq.n	80074b0 <_puts_r+0x38>
 8007500:	250a      	movs	r5, #10
 8007502:	e7d7      	b.n	80074b4 <_puts_r+0x3c>
 8007504:	4622      	mov	r2, r4
 8007506:	4628      	mov	r0, r5
 8007508:	f000 f88b 	bl	8007622 <__swbuf_r>
 800750c:	3001      	adds	r0, #1
 800750e:	d1e7      	bne.n	80074e0 <_puts_r+0x68>
 8007510:	e7ce      	b.n	80074b0 <_puts_r+0x38>
 8007512:	3e01      	subs	r6, #1
 8007514:	e7e4      	b.n	80074e0 <_puts_r+0x68>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	6022      	str	r2, [r4, #0]
 800751c:	220a      	movs	r2, #10
 800751e:	701a      	strb	r2, [r3, #0]
 8007520:	e7ee      	b.n	8007500 <_puts_r+0x88>
	...

08007524 <puts>:
 8007524:	4b02      	ldr	r3, [pc, #8]	@ (8007530 <puts+0xc>)
 8007526:	4601      	mov	r1, r0
 8007528:	6818      	ldr	r0, [r3, #0]
 800752a:	f7ff bfa5 	b.w	8007478 <_puts_r>
 800752e:	bf00      	nop
 8007530:	20000190 	.word	0x20000190

08007534 <sniprintf>:
 8007534:	b40c      	push	{r2, r3}
 8007536:	b530      	push	{r4, r5, lr}
 8007538:	4b17      	ldr	r3, [pc, #92]	@ (8007598 <sniprintf+0x64>)
 800753a:	1e0c      	subs	r4, r1, #0
 800753c:	681d      	ldr	r5, [r3, #0]
 800753e:	b09d      	sub	sp, #116	@ 0x74
 8007540:	da08      	bge.n	8007554 <sniprintf+0x20>
 8007542:	238b      	movs	r3, #139	@ 0x8b
 8007544:	602b      	str	r3, [r5, #0]
 8007546:	f04f 30ff 	mov.w	r0, #4294967295
 800754a:	b01d      	add	sp, #116	@ 0x74
 800754c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007550:	b002      	add	sp, #8
 8007552:	4770      	bx	lr
 8007554:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007558:	f8ad 3014 	strh.w	r3, [sp, #20]
 800755c:	bf14      	ite	ne
 800755e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007562:	4623      	moveq	r3, r4
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	9307      	str	r3, [sp, #28]
 8007568:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800756c:	9002      	str	r0, [sp, #8]
 800756e:	9006      	str	r0, [sp, #24]
 8007570:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007574:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007576:	ab21      	add	r3, sp, #132	@ 0x84
 8007578:	a902      	add	r1, sp, #8
 800757a:	4628      	mov	r0, r5
 800757c:	9301      	str	r3, [sp, #4]
 800757e:	f002 f961 	bl	8009844 <_svfiprintf_r>
 8007582:	1c43      	adds	r3, r0, #1
 8007584:	bfbc      	itt	lt
 8007586:	238b      	movlt	r3, #139	@ 0x8b
 8007588:	602b      	strlt	r3, [r5, #0]
 800758a:	2c00      	cmp	r4, #0
 800758c:	d0dd      	beq.n	800754a <sniprintf+0x16>
 800758e:	9b02      	ldr	r3, [sp, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	701a      	strb	r2, [r3, #0]
 8007594:	e7d9      	b.n	800754a <sniprintf+0x16>
 8007596:	bf00      	nop
 8007598:	20000190 	.word	0x20000190

0800759c <__sread>:
 800759c:	b510      	push	{r4, lr}
 800759e:	460c      	mov	r4, r1
 80075a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a4:	f000 f912 	bl	80077cc <_read_r>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	bfab      	itete	ge
 80075ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80075ae:	89a3      	ldrhlt	r3, [r4, #12]
 80075b0:	181b      	addge	r3, r3, r0
 80075b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80075b6:	bfac      	ite	ge
 80075b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80075ba:	81a3      	strhlt	r3, [r4, #12]
 80075bc:	bd10      	pop	{r4, pc}

080075be <__swrite>:
 80075be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c2:	461f      	mov	r7, r3
 80075c4:	898b      	ldrh	r3, [r1, #12]
 80075c6:	05db      	lsls	r3, r3, #23
 80075c8:	4605      	mov	r5, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	4616      	mov	r6, r2
 80075ce:	d505      	bpl.n	80075dc <__swrite+0x1e>
 80075d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d4:	2302      	movs	r3, #2
 80075d6:	2200      	movs	r2, #0
 80075d8:	f000 f8e6 	bl	80077a8 <_lseek_r>
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075e6:	81a3      	strh	r3, [r4, #12]
 80075e8:	4632      	mov	r2, r6
 80075ea:	463b      	mov	r3, r7
 80075ec:	4628      	mov	r0, r5
 80075ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075f2:	f000 b8fd 	b.w	80077f0 <_write_r>

080075f6 <__sseek>:
 80075f6:	b510      	push	{r4, lr}
 80075f8:	460c      	mov	r4, r1
 80075fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075fe:	f000 f8d3 	bl	80077a8 <_lseek_r>
 8007602:	1c43      	adds	r3, r0, #1
 8007604:	89a3      	ldrh	r3, [r4, #12]
 8007606:	bf15      	itete	ne
 8007608:	6560      	strne	r0, [r4, #84]	@ 0x54
 800760a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800760e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007612:	81a3      	strheq	r3, [r4, #12]
 8007614:	bf18      	it	ne
 8007616:	81a3      	strhne	r3, [r4, #12]
 8007618:	bd10      	pop	{r4, pc}

0800761a <__sclose>:
 800761a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761e:	f000 b8b3 	b.w	8007788 <_close_r>

08007622 <__swbuf_r>:
 8007622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007624:	460e      	mov	r6, r1
 8007626:	4614      	mov	r4, r2
 8007628:	4605      	mov	r5, r0
 800762a:	b118      	cbz	r0, 8007634 <__swbuf_r+0x12>
 800762c:	6a03      	ldr	r3, [r0, #32]
 800762e:	b90b      	cbnz	r3, 8007634 <__swbuf_r+0x12>
 8007630:	f7ff feda 	bl	80073e8 <__sinit>
 8007634:	69a3      	ldr	r3, [r4, #24]
 8007636:	60a3      	str	r3, [r4, #8]
 8007638:	89a3      	ldrh	r3, [r4, #12]
 800763a:	071a      	lsls	r2, r3, #28
 800763c:	d501      	bpl.n	8007642 <__swbuf_r+0x20>
 800763e:	6923      	ldr	r3, [r4, #16]
 8007640:	b943      	cbnz	r3, 8007654 <__swbuf_r+0x32>
 8007642:	4621      	mov	r1, r4
 8007644:	4628      	mov	r0, r5
 8007646:	f000 f82b 	bl	80076a0 <__swsetup_r>
 800764a:	b118      	cbz	r0, 8007654 <__swbuf_r+0x32>
 800764c:	f04f 37ff 	mov.w	r7, #4294967295
 8007650:	4638      	mov	r0, r7
 8007652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	6922      	ldr	r2, [r4, #16]
 8007658:	1a98      	subs	r0, r3, r2
 800765a:	6963      	ldr	r3, [r4, #20]
 800765c:	b2f6      	uxtb	r6, r6
 800765e:	4283      	cmp	r3, r0
 8007660:	4637      	mov	r7, r6
 8007662:	dc05      	bgt.n	8007670 <__swbuf_r+0x4e>
 8007664:	4621      	mov	r1, r4
 8007666:	4628      	mov	r0, r5
 8007668:	f002 fbae 	bl	8009dc8 <_fflush_r>
 800766c:	2800      	cmp	r0, #0
 800766e:	d1ed      	bne.n	800764c <__swbuf_r+0x2a>
 8007670:	68a3      	ldr	r3, [r4, #8]
 8007672:	3b01      	subs	r3, #1
 8007674:	60a3      	str	r3, [r4, #8]
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	6022      	str	r2, [r4, #0]
 800767c:	701e      	strb	r6, [r3, #0]
 800767e:	6962      	ldr	r2, [r4, #20]
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	429a      	cmp	r2, r3
 8007684:	d004      	beq.n	8007690 <__swbuf_r+0x6e>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	07db      	lsls	r3, r3, #31
 800768a:	d5e1      	bpl.n	8007650 <__swbuf_r+0x2e>
 800768c:	2e0a      	cmp	r6, #10
 800768e:	d1df      	bne.n	8007650 <__swbuf_r+0x2e>
 8007690:	4621      	mov	r1, r4
 8007692:	4628      	mov	r0, r5
 8007694:	f002 fb98 	bl	8009dc8 <_fflush_r>
 8007698:	2800      	cmp	r0, #0
 800769a:	d0d9      	beq.n	8007650 <__swbuf_r+0x2e>
 800769c:	e7d6      	b.n	800764c <__swbuf_r+0x2a>
	...

080076a0 <__swsetup_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4b29      	ldr	r3, [pc, #164]	@ (8007748 <__swsetup_r+0xa8>)
 80076a4:	4605      	mov	r5, r0
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	460c      	mov	r4, r1
 80076aa:	b118      	cbz	r0, 80076b4 <__swsetup_r+0x14>
 80076ac:	6a03      	ldr	r3, [r0, #32]
 80076ae:	b90b      	cbnz	r3, 80076b4 <__swsetup_r+0x14>
 80076b0:	f7ff fe9a 	bl	80073e8 <__sinit>
 80076b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b8:	0719      	lsls	r1, r3, #28
 80076ba:	d422      	bmi.n	8007702 <__swsetup_r+0x62>
 80076bc:	06da      	lsls	r2, r3, #27
 80076be:	d407      	bmi.n	80076d0 <__swsetup_r+0x30>
 80076c0:	2209      	movs	r2, #9
 80076c2:	602a      	str	r2, [r5, #0]
 80076c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076c8:	81a3      	strh	r3, [r4, #12]
 80076ca:	f04f 30ff 	mov.w	r0, #4294967295
 80076ce:	e033      	b.n	8007738 <__swsetup_r+0x98>
 80076d0:	0758      	lsls	r0, r3, #29
 80076d2:	d512      	bpl.n	80076fa <__swsetup_r+0x5a>
 80076d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076d6:	b141      	cbz	r1, 80076ea <__swsetup_r+0x4a>
 80076d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076dc:	4299      	cmp	r1, r3
 80076de:	d002      	beq.n	80076e6 <__swsetup_r+0x46>
 80076e0:	4628      	mov	r0, r5
 80076e2:	f000 ff49 	bl	8008578 <_free_r>
 80076e6:	2300      	movs	r3, #0
 80076e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80076f0:	81a3      	strh	r3, [r4, #12]
 80076f2:	2300      	movs	r3, #0
 80076f4:	6063      	str	r3, [r4, #4]
 80076f6:	6923      	ldr	r3, [r4, #16]
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	89a3      	ldrh	r3, [r4, #12]
 80076fc:	f043 0308 	orr.w	r3, r3, #8
 8007700:	81a3      	strh	r3, [r4, #12]
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	b94b      	cbnz	r3, 800771a <__swsetup_r+0x7a>
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800770c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007710:	d003      	beq.n	800771a <__swsetup_r+0x7a>
 8007712:	4621      	mov	r1, r4
 8007714:	4628      	mov	r0, r5
 8007716:	f002 fbb7 	bl	8009e88 <__smakebuf_r>
 800771a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800771e:	f013 0201 	ands.w	r2, r3, #1
 8007722:	d00a      	beq.n	800773a <__swsetup_r+0x9a>
 8007724:	2200      	movs	r2, #0
 8007726:	60a2      	str	r2, [r4, #8]
 8007728:	6962      	ldr	r2, [r4, #20]
 800772a:	4252      	negs	r2, r2
 800772c:	61a2      	str	r2, [r4, #24]
 800772e:	6922      	ldr	r2, [r4, #16]
 8007730:	b942      	cbnz	r2, 8007744 <__swsetup_r+0xa4>
 8007732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007736:	d1c5      	bne.n	80076c4 <__swsetup_r+0x24>
 8007738:	bd38      	pop	{r3, r4, r5, pc}
 800773a:	0799      	lsls	r1, r3, #30
 800773c:	bf58      	it	pl
 800773e:	6962      	ldrpl	r2, [r4, #20]
 8007740:	60a2      	str	r2, [r4, #8]
 8007742:	e7f4      	b.n	800772e <__swsetup_r+0x8e>
 8007744:	2000      	movs	r0, #0
 8007746:	e7f7      	b.n	8007738 <__swsetup_r+0x98>
 8007748:	20000190 	.word	0x20000190

0800774c <memset>:
 800774c:	4402      	add	r2, r0
 800774e:	4603      	mov	r3, r0
 8007750:	4293      	cmp	r3, r2
 8007752:	d100      	bne.n	8007756 <memset+0xa>
 8007754:	4770      	bx	lr
 8007756:	f803 1b01 	strb.w	r1, [r3], #1
 800775a:	e7f9      	b.n	8007750 <memset+0x4>

0800775c <strncmp>:
 800775c:	b510      	push	{r4, lr}
 800775e:	b16a      	cbz	r2, 800777c <strncmp+0x20>
 8007760:	3901      	subs	r1, #1
 8007762:	1884      	adds	r4, r0, r2
 8007764:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007768:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800776c:	429a      	cmp	r2, r3
 800776e:	d103      	bne.n	8007778 <strncmp+0x1c>
 8007770:	42a0      	cmp	r0, r4
 8007772:	d001      	beq.n	8007778 <strncmp+0x1c>
 8007774:	2a00      	cmp	r2, #0
 8007776:	d1f5      	bne.n	8007764 <strncmp+0x8>
 8007778:	1ad0      	subs	r0, r2, r3
 800777a:	bd10      	pop	{r4, pc}
 800777c:	4610      	mov	r0, r2
 800777e:	e7fc      	b.n	800777a <strncmp+0x1e>

08007780 <_localeconv_r>:
 8007780:	4800      	ldr	r0, [pc, #0]	@ (8007784 <_localeconv_r+0x4>)
 8007782:	4770      	bx	lr
 8007784:	20000114 	.word	0x20000114

08007788 <_close_r>:
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	4d06      	ldr	r5, [pc, #24]	@ (80077a4 <_close_r+0x1c>)
 800778c:	2300      	movs	r3, #0
 800778e:	4604      	mov	r4, r0
 8007790:	4608      	mov	r0, r1
 8007792:	602b      	str	r3, [r5, #0]
 8007794:	f7fa fc9c 	bl	80020d0 <_close>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_close_r+0x1a>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_close_r+0x1a>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	20000740 	.word	0x20000740

080077a8 <_lseek_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	4d07      	ldr	r5, [pc, #28]	@ (80077c8 <_lseek_r+0x20>)
 80077ac:	4604      	mov	r4, r0
 80077ae:	4608      	mov	r0, r1
 80077b0:	4611      	mov	r1, r2
 80077b2:	2200      	movs	r2, #0
 80077b4:	602a      	str	r2, [r5, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	f7fa fcb1 	bl	800211e <_lseek>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d102      	bne.n	80077c6 <_lseek_r+0x1e>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	b103      	cbz	r3, 80077c6 <_lseek_r+0x1e>
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	20000740 	.word	0x20000740

080077cc <_read_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	4d07      	ldr	r5, [pc, #28]	@ (80077ec <_read_r+0x20>)
 80077d0:	4604      	mov	r4, r0
 80077d2:	4608      	mov	r0, r1
 80077d4:	4611      	mov	r1, r2
 80077d6:	2200      	movs	r2, #0
 80077d8:	602a      	str	r2, [r5, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	f7fa fc3f 	bl	800205e <_read>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d102      	bne.n	80077ea <_read_r+0x1e>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	b103      	cbz	r3, 80077ea <_read_r+0x1e>
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	20000740 	.word	0x20000740

080077f0 <_write_r>:
 80077f0:	b538      	push	{r3, r4, r5, lr}
 80077f2:	4d07      	ldr	r5, [pc, #28]	@ (8007810 <_write_r+0x20>)
 80077f4:	4604      	mov	r4, r0
 80077f6:	4608      	mov	r0, r1
 80077f8:	4611      	mov	r1, r2
 80077fa:	2200      	movs	r2, #0
 80077fc:	602a      	str	r2, [r5, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	f7fa fc4a 	bl	8002098 <_write>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d102      	bne.n	800780e <_write_r+0x1e>
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	b103      	cbz	r3, 800780e <_write_r+0x1e>
 800780c:	6023      	str	r3, [r4, #0]
 800780e:	bd38      	pop	{r3, r4, r5, pc}
 8007810:	20000740 	.word	0x20000740

08007814 <__errno>:
 8007814:	4b01      	ldr	r3, [pc, #4]	@ (800781c <__errno+0x8>)
 8007816:	6818      	ldr	r0, [r3, #0]
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	20000190 	.word	0x20000190

08007820 <__libc_init_array>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	4d0d      	ldr	r5, [pc, #52]	@ (8007858 <__libc_init_array+0x38>)
 8007824:	4c0d      	ldr	r4, [pc, #52]	@ (800785c <__libc_init_array+0x3c>)
 8007826:	1b64      	subs	r4, r4, r5
 8007828:	10a4      	asrs	r4, r4, #2
 800782a:	2600      	movs	r6, #0
 800782c:	42a6      	cmp	r6, r4
 800782e:	d109      	bne.n	8007844 <__libc_init_array+0x24>
 8007830:	4d0b      	ldr	r5, [pc, #44]	@ (8007860 <__libc_init_array+0x40>)
 8007832:	4c0c      	ldr	r4, [pc, #48]	@ (8007864 <__libc_init_array+0x44>)
 8007834:	f002 fc46 	bl	800a0c4 <_init>
 8007838:	1b64      	subs	r4, r4, r5
 800783a:	10a4      	asrs	r4, r4, #2
 800783c:	2600      	movs	r6, #0
 800783e:	42a6      	cmp	r6, r4
 8007840:	d105      	bne.n	800784e <__libc_init_array+0x2e>
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	f855 3b04 	ldr.w	r3, [r5], #4
 8007848:	4798      	blx	r3
 800784a:	3601      	adds	r6, #1
 800784c:	e7ee      	b.n	800782c <__libc_init_array+0xc>
 800784e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007852:	4798      	blx	r3
 8007854:	3601      	adds	r6, #1
 8007856:	e7f2      	b.n	800783e <__libc_init_array+0x1e>
 8007858:	0800a71c 	.word	0x0800a71c
 800785c:	0800a71c 	.word	0x0800a71c
 8007860:	0800a71c 	.word	0x0800a71c
 8007864:	0800a720 	.word	0x0800a720

08007868 <__retarget_lock_init_recursive>:
 8007868:	4770      	bx	lr

0800786a <__retarget_lock_acquire_recursive>:
 800786a:	4770      	bx	lr

0800786c <__retarget_lock_release_recursive>:
 800786c:	4770      	bx	lr

0800786e <memcpy>:
 800786e:	440a      	add	r2, r1
 8007870:	4291      	cmp	r1, r2
 8007872:	f100 33ff 	add.w	r3, r0, #4294967295
 8007876:	d100      	bne.n	800787a <memcpy+0xc>
 8007878:	4770      	bx	lr
 800787a:	b510      	push	{r4, lr}
 800787c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007884:	4291      	cmp	r1, r2
 8007886:	d1f9      	bne.n	800787c <memcpy+0xe>
 8007888:	bd10      	pop	{r4, pc}
 800788a:	0000      	movs	r0, r0
 800788c:	0000      	movs	r0, r0
	...

08007890 <nan>:
 8007890:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007898 <nan+0x8>
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	00000000 	.word	0x00000000
 800789c:	7ff80000 	.word	0x7ff80000

080078a0 <__assert_func>:
 80078a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078a2:	4614      	mov	r4, r2
 80078a4:	461a      	mov	r2, r3
 80078a6:	4b09      	ldr	r3, [pc, #36]	@ (80078cc <__assert_func+0x2c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4605      	mov	r5, r0
 80078ac:	68d8      	ldr	r0, [r3, #12]
 80078ae:	b954      	cbnz	r4, 80078c6 <__assert_func+0x26>
 80078b0:	4b07      	ldr	r3, [pc, #28]	@ (80078d0 <__assert_func+0x30>)
 80078b2:	461c      	mov	r4, r3
 80078b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078b8:	9100      	str	r1, [sp, #0]
 80078ba:	462b      	mov	r3, r5
 80078bc:	4905      	ldr	r1, [pc, #20]	@ (80078d4 <__assert_func+0x34>)
 80078be:	f002 faab 	bl	8009e18 <fiprintf>
 80078c2:	f002 fb69 	bl	8009f98 <abort>
 80078c6:	4b04      	ldr	r3, [pc, #16]	@ (80078d8 <__assert_func+0x38>)
 80078c8:	e7f4      	b.n	80078b4 <__assert_func+0x14>
 80078ca:	bf00      	nop
 80078cc:	20000190 	.word	0x20000190
 80078d0:	0800a3cf 	.word	0x0800a3cf
 80078d4:	0800a3a1 	.word	0x0800a3a1
 80078d8:	0800a394 	.word	0x0800a394

080078dc <quorem>:
 80078dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e0:	6903      	ldr	r3, [r0, #16]
 80078e2:	690c      	ldr	r4, [r1, #16]
 80078e4:	42a3      	cmp	r3, r4
 80078e6:	4607      	mov	r7, r0
 80078e8:	db7e      	blt.n	80079e8 <quorem+0x10c>
 80078ea:	3c01      	subs	r4, #1
 80078ec:	f101 0814 	add.w	r8, r1, #20
 80078f0:	00a3      	lsls	r3, r4, #2
 80078f2:	f100 0514 	add.w	r5, r0, #20
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078fc:	9301      	str	r3, [sp, #4]
 80078fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007902:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007906:	3301      	adds	r3, #1
 8007908:	429a      	cmp	r2, r3
 800790a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800790e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007912:	d32e      	bcc.n	8007972 <quorem+0x96>
 8007914:	f04f 0a00 	mov.w	sl, #0
 8007918:	46c4      	mov	ip, r8
 800791a:	46ae      	mov	lr, r5
 800791c:	46d3      	mov	fp, sl
 800791e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007922:	b298      	uxth	r0, r3
 8007924:	fb06 a000 	mla	r0, r6, r0, sl
 8007928:	0c02      	lsrs	r2, r0, #16
 800792a:	0c1b      	lsrs	r3, r3, #16
 800792c:	fb06 2303 	mla	r3, r6, r3, r2
 8007930:	f8de 2000 	ldr.w	r2, [lr]
 8007934:	b280      	uxth	r0, r0
 8007936:	b292      	uxth	r2, r2
 8007938:	1a12      	subs	r2, r2, r0
 800793a:	445a      	add	r2, fp
 800793c:	f8de 0000 	ldr.w	r0, [lr]
 8007940:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007944:	b29b      	uxth	r3, r3
 8007946:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800794a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800794e:	b292      	uxth	r2, r2
 8007950:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007954:	45e1      	cmp	r9, ip
 8007956:	f84e 2b04 	str.w	r2, [lr], #4
 800795a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800795e:	d2de      	bcs.n	800791e <quorem+0x42>
 8007960:	9b00      	ldr	r3, [sp, #0]
 8007962:	58eb      	ldr	r3, [r5, r3]
 8007964:	b92b      	cbnz	r3, 8007972 <quorem+0x96>
 8007966:	9b01      	ldr	r3, [sp, #4]
 8007968:	3b04      	subs	r3, #4
 800796a:	429d      	cmp	r5, r3
 800796c:	461a      	mov	r2, r3
 800796e:	d32f      	bcc.n	80079d0 <quorem+0xf4>
 8007970:	613c      	str	r4, [r7, #16]
 8007972:	4638      	mov	r0, r7
 8007974:	f001 fd10 	bl	8009398 <__mcmp>
 8007978:	2800      	cmp	r0, #0
 800797a:	db25      	blt.n	80079c8 <quorem+0xec>
 800797c:	4629      	mov	r1, r5
 800797e:	2000      	movs	r0, #0
 8007980:	f858 2b04 	ldr.w	r2, [r8], #4
 8007984:	f8d1 c000 	ldr.w	ip, [r1]
 8007988:	fa1f fe82 	uxth.w	lr, r2
 800798c:	fa1f f38c 	uxth.w	r3, ip
 8007990:	eba3 030e 	sub.w	r3, r3, lr
 8007994:	4403      	add	r3, r0
 8007996:	0c12      	lsrs	r2, r2, #16
 8007998:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800799c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079a6:	45c1      	cmp	r9, r8
 80079a8:	f841 3b04 	str.w	r3, [r1], #4
 80079ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079b0:	d2e6      	bcs.n	8007980 <quorem+0xa4>
 80079b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ba:	b922      	cbnz	r2, 80079c6 <quorem+0xea>
 80079bc:	3b04      	subs	r3, #4
 80079be:	429d      	cmp	r5, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	d30b      	bcc.n	80079dc <quorem+0x100>
 80079c4:	613c      	str	r4, [r7, #16]
 80079c6:	3601      	adds	r6, #1
 80079c8:	4630      	mov	r0, r6
 80079ca:	b003      	add	sp, #12
 80079cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d0:	6812      	ldr	r2, [r2, #0]
 80079d2:	3b04      	subs	r3, #4
 80079d4:	2a00      	cmp	r2, #0
 80079d6:	d1cb      	bne.n	8007970 <quorem+0x94>
 80079d8:	3c01      	subs	r4, #1
 80079da:	e7c6      	b.n	800796a <quorem+0x8e>
 80079dc:	6812      	ldr	r2, [r2, #0]
 80079de:	3b04      	subs	r3, #4
 80079e0:	2a00      	cmp	r2, #0
 80079e2:	d1ef      	bne.n	80079c4 <quorem+0xe8>
 80079e4:	3c01      	subs	r4, #1
 80079e6:	e7ea      	b.n	80079be <quorem+0xe2>
 80079e8:	2000      	movs	r0, #0
 80079ea:	e7ee      	b.n	80079ca <quorem+0xee>
 80079ec:	0000      	movs	r0, r0
	...

080079f0 <_dtoa_r>:
 80079f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079f4:	69c7      	ldr	r7, [r0, #28]
 80079f6:	b099      	sub	sp, #100	@ 0x64
 80079f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80079fc:	ec55 4b10 	vmov	r4, r5, d0
 8007a00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007a02:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a04:	4683      	mov	fp, r0
 8007a06:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a0a:	b97f      	cbnz	r7, 8007a2c <_dtoa_r+0x3c>
 8007a0c:	2010      	movs	r0, #16
 8007a0e:	f001 f937 	bl	8008c80 <malloc>
 8007a12:	4602      	mov	r2, r0
 8007a14:	f8cb 001c 	str.w	r0, [fp, #28]
 8007a18:	b920      	cbnz	r0, 8007a24 <_dtoa_r+0x34>
 8007a1a:	4ba7      	ldr	r3, [pc, #668]	@ (8007cb8 <_dtoa_r+0x2c8>)
 8007a1c:	21ef      	movs	r1, #239	@ 0xef
 8007a1e:	48a7      	ldr	r0, [pc, #668]	@ (8007cbc <_dtoa_r+0x2cc>)
 8007a20:	f7ff ff3e 	bl	80078a0 <__assert_func>
 8007a24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a28:	6007      	str	r7, [r0, #0]
 8007a2a:	60c7      	str	r7, [r0, #12]
 8007a2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a30:	6819      	ldr	r1, [r3, #0]
 8007a32:	b159      	cbz	r1, 8007a4c <_dtoa_r+0x5c>
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	604a      	str	r2, [r1, #4]
 8007a38:	2301      	movs	r3, #1
 8007a3a:	4093      	lsls	r3, r2
 8007a3c:	608b      	str	r3, [r1, #8]
 8007a3e:	4658      	mov	r0, fp
 8007a40:	f001 fa26 	bl	8008e90 <_Bfree>
 8007a44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	1e2b      	subs	r3, r5, #0
 8007a4e:	bfb9      	ittee	lt
 8007a50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a54:	9303      	strlt	r3, [sp, #12]
 8007a56:	2300      	movge	r3, #0
 8007a58:	6033      	strge	r3, [r6, #0]
 8007a5a:	9f03      	ldr	r7, [sp, #12]
 8007a5c:	4b98      	ldr	r3, [pc, #608]	@ (8007cc0 <_dtoa_r+0x2d0>)
 8007a5e:	bfbc      	itt	lt
 8007a60:	2201      	movlt	r2, #1
 8007a62:	6032      	strlt	r2, [r6, #0]
 8007a64:	43bb      	bics	r3, r7
 8007a66:	d112      	bne.n	8007a8e <_dtoa_r+0x9e>
 8007a68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007a6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a74:	4323      	orrs	r3, r4
 8007a76:	f000 854d 	beq.w	8008514 <_dtoa_r+0xb24>
 8007a7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007cd4 <_dtoa_r+0x2e4>
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 854f 	beq.w	8008524 <_dtoa_r+0xb34>
 8007a86:	f10a 0303 	add.w	r3, sl, #3
 8007a8a:	f000 bd49 	b.w	8008520 <_dtoa_r+0xb30>
 8007a8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a92:	2200      	movs	r2, #0
 8007a94:	ec51 0b17 	vmov	r0, r1, d7
 8007a98:	2300      	movs	r3, #0
 8007a9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007a9e:	f7f9 f823 	bl	8000ae8 <__aeabi_dcmpeq>
 8007aa2:	4680      	mov	r8, r0
 8007aa4:	b158      	cbz	r0, 8007abe <_dtoa_r+0xce>
 8007aa6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007aae:	b113      	cbz	r3, 8007ab6 <_dtoa_r+0xc6>
 8007ab0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007ab2:	4b84      	ldr	r3, [pc, #528]	@ (8007cc4 <_dtoa_r+0x2d4>)
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007cd8 <_dtoa_r+0x2e8>
 8007aba:	f000 bd33 	b.w	8008524 <_dtoa_r+0xb34>
 8007abe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007ac2:	aa16      	add	r2, sp, #88	@ 0x58
 8007ac4:	a917      	add	r1, sp, #92	@ 0x5c
 8007ac6:	4658      	mov	r0, fp
 8007ac8:	f001 fd86 	bl	80095d8 <__d2b>
 8007acc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ad0:	4681      	mov	r9, r0
 8007ad2:	2e00      	cmp	r6, #0
 8007ad4:	d077      	beq.n	8007bc6 <_dtoa_r+0x1d6>
 8007ad6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ad8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ae0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ae4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ae8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007aec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007af0:	4619      	mov	r1, r3
 8007af2:	2200      	movs	r2, #0
 8007af4:	4b74      	ldr	r3, [pc, #464]	@ (8007cc8 <_dtoa_r+0x2d8>)
 8007af6:	f7f8 fbd7 	bl	80002a8 <__aeabi_dsub>
 8007afa:	a369      	add	r3, pc, #420	@ (adr r3, 8007ca0 <_dtoa_r+0x2b0>)
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	f7f8 fd8a 	bl	8000618 <__aeabi_dmul>
 8007b04:	a368      	add	r3, pc, #416	@ (adr r3, 8007ca8 <_dtoa_r+0x2b8>)
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	f7f8 fbcf 	bl	80002ac <__adddf3>
 8007b0e:	4604      	mov	r4, r0
 8007b10:	4630      	mov	r0, r6
 8007b12:	460d      	mov	r5, r1
 8007b14:	f7f8 fd16 	bl	8000544 <__aeabi_i2d>
 8007b18:	a365      	add	r3, pc, #404	@ (adr r3, 8007cb0 <_dtoa_r+0x2c0>)
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f7f8 fd7b 	bl	8000618 <__aeabi_dmul>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4620      	mov	r0, r4
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f7f8 fbbf 	bl	80002ac <__adddf3>
 8007b2e:	4604      	mov	r4, r0
 8007b30:	460d      	mov	r5, r1
 8007b32:	f7f9 f821 	bl	8000b78 <__aeabi_d2iz>
 8007b36:	2200      	movs	r2, #0
 8007b38:	4607      	mov	r7, r0
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	4629      	mov	r1, r5
 8007b40:	f7f8 ffdc 	bl	8000afc <__aeabi_dcmplt>
 8007b44:	b140      	cbz	r0, 8007b58 <_dtoa_r+0x168>
 8007b46:	4638      	mov	r0, r7
 8007b48:	f7f8 fcfc 	bl	8000544 <__aeabi_i2d>
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	462b      	mov	r3, r5
 8007b50:	f7f8 ffca 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b54:	b900      	cbnz	r0, 8007b58 <_dtoa_r+0x168>
 8007b56:	3f01      	subs	r7, #1
 8007b58:	2f16      	cmp	r7, #22
 8007b5a:	d851      	bhi.n	8007c00 <_dtoa_r+0x210>
 8007b5c:	4b5b      	ldr	r3, [pc, #364]	@ (8007ccc <_dtoa_r+0x2dc>)
 8007b5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b6a:	f7f8 ffc7 	bl	8000afc <__aeabi_dcmplt>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d048      	beq.n	8007c04 <_dtoa_r+0x214>
 8007b72:	3f01      	subs	r7, #1
 8007b74:	2300      	movs	r3, #0
 8007b76:	9312      	str	r3, [sp, #72]	@ 0x48
 8007b78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b7a:	1b9b      	subs	r3, r3, r6
 8007b7c:	1e5a      	subs	r2, r3, #1
 8007b7e:	bf44      	itt	mi
 8007b80:	f1c3 0801 	rsbmi	r8, r3, #1
 8007b84:	2300      	movmi	r3, #0
 8007b86:	9208      	str	r2, [sp, #32]
 8007b88:	bf54      	ite	pl
 8007b8a:	f04f 0800 	movpl.w	r8, #0
 8007b8e:	9308      	strmi	r3, [sp, #32]
 8007b90:	2f00      	cmp	r7, #0
 8007b92:	db39      	blt.n	8007c08 <_dtoa_r+0x218>
 8007b94:	9b08      	ldr	r3, [sp, #32]
 8007b96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007b98:	443b      	add	r3, r7
 8007b9a:	9308      	str	r3, [sp, #32]
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba2:	2b09      	cmp	r3, #9
 8007ba4:	d864      	bhi.n	8007c70 <_dtoa_r+0x280>
 8007ba6:	2b05      	cmp	r3, #5
 8007ba8:	bfc4      	itt	gt
 8007baa:	3b04      	subgt	r3, #4
 8007bac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb0:	f1a3 0302 	sub.w	r3, r3, #2
 8007bb4:	bfcc      	ite	gt
 8007bb6:	2400      	movgt	r4, #0
 8007bb8:	2401      	movle	r4, #1
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d863      	bhi.n	8007c86 <_dtoa_r+0x296>
 8007bbe:	e8df f003 	tbb	[pc, r3]
 8007bc2:	372a      	.short	0x372a
 8007bc4:	5535      	.short	0x5535
 8007bc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007bca:	441e      	add	r6, r3
 8007bcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	bfc1      	itttt	gt
 8007bd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007bd8:	409f      	lslgt	r7, r3
 8007bda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007bde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007be2:	bfd6      	itet	le
 8007be4:	f1c3 0320 	rsble	r3, r3, #32
 8007be8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007bec:	fa04 f003 	lslle.w	r0, r4, r3
 8007bf0:	f7f8 fc98 	bl	8000524 <__aeabi_ui2d>
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007bfa:	3e01      	subs	r6, #1
 8007bfc:	9214      	str	r2, [sp, #80]	@ 0x50
 8007bfe:	e777      	b.n	8007af0 <_dtoa_r+0x100>
 8007c00:	2301      	movs	r3, #1
 8007c02:	e7b8      	b.n	8007b76 <_dtoa_r+0x186>
 8007c04:	9012      	str	r0, [sp, #72]	@ 0x48
 8007c06:	e7b7      	b.n	8007b78 <_dtoa_r+0x188>
 8007c08:	427b      	negs	r3, r7
 8007c0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	eba8 0807 	sub.w	r8, r8, r7
 8007c12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c14:	e7c4      	b.n	8007ba0 <_dtoa_r+0x1b0>
 8007c16:	2300      	movs	r3, #0
 8007c18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	dc35      	bgt.n	8007c8c <_dtoa_r+0x29c>
 8007c20:	2301      	movs	r3, #1
 8007c22:	9300      	str	r3, [sp, #0]
 8007c24:	9307      	str	r3, [sp, #28]
 8007c26:	461a      	mov	r2, r3
 8007c28:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c2a:	e00b      	b.n	8007c44 <_dtoa_r+0x254>
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e7f3      	b.n	8007c18 <_dtoa_r+0x228>
 8007c30:	2300      	movs	r3, #0
 8007c32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c36:	18fb      	adds	r3, r7, r3
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	9307      	str	r3, [sp, #28]
 8007c40:	bfb8      	it	lt
 8007c42:	2301      	movlt	r3, #1
 8007c44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007c48:	2100      	movs	r1, #0
 8007c4a:	2204      	movs	r2, #4
 8007c4c:	f102 0514 	add.w	r5, r2, #20
 8007c50:	429d      	cmp	r5, r3
 8007c52:	d91f      	bls.n	8007c94 <_dtoa_r+0x2a4>
 8007c54:	6041      	str	r1, [r0, #4]
 8007c56:	4658      	mov	r0, fp
 8007c58:	f001 f8da 	bl	8008e10 <_Balloc>
 8007c5c:	4682      	mov	sl, r0
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d13c      	bne.n	8007cdc <_dtoa_r+0x2ec>
 8007c62:	4b1b      	ldr	r3, [pc, #108]	@ (8007cd0 <_dtoa_r+0x2e0>)
 8007c64:	4602      	mov	r2, r0
 8007c66:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c6a:	e6d8      	b.n	8007a1e <_dtoa_r+0x2e>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e7e0      	b.n	8007c32 <_dtoa_r+0x242>
 8007c70:	2401      	movs	r4, #1
 8007c72:	2300      	movs	r3, #0
 8007c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c78:	f04f 33ff 	mov.w	r3, #4294967295
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	9307      	str	r3, [sp, #28]
 8007c80:	2200      	movs	r2, #0
 8007c82:	2312      	movs	r3, #18
 8007c84:	e7d0      	b.n	8007c28 <_dtoa_r+0x238>
 8007c86:	2301      	movs	r3, #1
 8007c88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c8a:	e7f5      	b.n	8007c78 <_dtoa_r+0x288>
 8007c8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	9307      	str	r3, [sp, #28]
 8007c92:	e7d7      	b.n	8007c44 <_dtoa_r+0x254>
 8007c94:	3101      	adds	r1, #1
 8007c96:	0052      	lsls	r2, r2, #1
 8007c98:	e7d8      	b.n	8007c4c <_dtoa_r+0x25c>
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	636f4361 	.word	0x636f4361
 8007ca4:	3fd287a7 	.word	0x3fd287a7
 8007ca8:	8b60c8b3 	.word	0x8b60c8b3
 8007cac:	3fc68a28 	.word	0x3fc68a28
 8007cb0:	509f79fb 	.word	0x509f79fb
 8007cb4:	3fd34413 	.word	0x3fd34413
 8007cb8:	0800a294 	.word	0x0800a294
 8007cbc:	0800a3dd 	.word	0x0800a3dd
 8007cc0:	7ff00000 	.word	0x7ff00000
 8007cc4:	0800a369 	.word	0x0800a369
 8007cc8:	3ff80000 	.word	0x3ff80000
 8007ccc:	0800a538 	.word	0x0800a538
 8007cd0:	0800a435 	.word	0x0800a435
 8007cd4:	0800a3d9 	.word	0x0800a3d9
 8007cd8:	0800a368 	.word	0x0800a368
 8007cdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ce0:	6018      	str	r0, [r3, #0]
 8007ce2:	9b07      	ldr	r3, [sp, #28]
 8007ce4:	2b0e      	cmp	r3, #14
 8007ce6:	f200 80a4 	bhi.w	8007e32 <_dtoa_r+0x442>
 8007cea:	2c00      	cmp	r4, #0
 8007cec:	f000 80a1 	beq.w	8007e32 <_dtoa_r+0x442>
 8007cf0:	2f00      	cmp	r7, #0
 8007cf2:	dd33      	ble.n	8007d5c <_dtoa_r+0x36c>
 8007cf4:	4bad      	ldr	r3, [pc, #692]	@ (8007fac <_dtoa_r+0x5bc>)
 8007cf6:	f007 020f 	and.w	r2, r7, #15
 8007cfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cfe:	ed93 7b00 	vldr	d7, [r3]
 8007d02:	05f8      	lsls	r0, r7, #23
 8007d04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007d08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d0c:	d516      	bpl.n	8007d3c <_dtoa_r+0x34c>
 8007d0e:	4ba8      	ldr	r3, [pc, #672]	@ (8007fb0 <_dtoa_r+0x5c0>)
 8007d10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d18:	f7f8 fda8 	bl	800086c <__aeabi_ddiv>
 8007d1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d20:	f004 040f 	and.w	r4, r4, #15
 8007d24:	2603      	movs	r6, #3
 8007d26:	4da2      	ldr	r5, [pc, #648]	@ (8007fb0 <_dtoa_r+0x5c0>)
 8007d28:	b954      	cbnz	r4, 8007d40 <_dtoa_r+0x350>
 8007d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d32:	f7f8 fd9b 	bl	800086c <__aeabi_ddiv>
 8007d36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d3a:	e028      	b.n	8007d8e <_dtoa_r+0x39e>
 8007d3c:	2602      	movs	r6, #2
 8007d3e:	e7f2      	b.n	8007d26 <_dtoa_r+0x336>
 8007d40:	07e1      	lsls	r1, r4, #31
 8007d42:	d508      	bpl.n	8007d56 <_dtoa_r+0x366>
 8007d44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d4c:	f7f8 fc64 	bl	8000618 <__aeabi_dmul>
 8007d50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d54:	3601      	adds	r6, #1
 8007d56:	1064      	asrs	r4, r4, #1
 8007d58:	3508      	adds	r5, #8
 8007d5a:	e7e5      	b.n	8007d28 <_dtoa_r+0x338>
 8007d5c:	f000 80d2 	beq.w	8007f04 <_dtoa_r+0x514>
 8007d60:	427c      	negs	r4, r7
 8007d62:	4b92      	ldr	r3, [pc, #584]	@ (8007fac <_dtoa_r+0x5bc>)
 8007d64:	4d92      	ldr	r5, [pc, #584]	@ (8007fb0 <_dtoa_r+0x5c0>)
 8007d66:	f004 020f 	and.w	r2, r4, #15
 8007d6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d76:	f7f8 fc4f 	bl	8000618 <__aeabi_dmul>
 8007d7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d7e:	1124      	asrs	r4, r4, #4
 8007d80:	2300      	movs	r3, #0
 8007d82:	2602      	movs	r6, #2
 8007d84:	2c00      	cmp	r4, #0
 8007d86:	f040 80b2 	bne.w	8007eee <_dtoa_r+0x4fe>
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1d3      	bne.n	8007d36 <_dtoa_r+0x346>
 8007d8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 80b7 	beq.w	8007f08 <_dtoa_r+0x518>
 8007d9a:	4b86      	ldr	r3, [pc, #536]	@ (8007fb4 <_dtoa_r+0x5c4>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4620      	mov	r0, r4
 8007da0:	4629      	mov	r1, r5
 8007da2:	f7f8 feab 	bl	8000afc <__aeabi_dcmplt>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	f000 80ae 	beq.w	8007f08 <_dtoa_r+0x518>
 8007dac:	9b07      	ldr	r3, [sp, #28]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 80aa 	beq.w	8007f08 <_dtoa_r+0x518>
 8007db4:	9b00      	ldr	r3, [sp, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	dd37      	ble.n	8007e2a <_dtoa_r+0x43a>
 8007dba:	1e7b      	subs	r3, r7, #1
 8007dbc:	9304      	str	r3, [sp, #16]
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	4b7d      	ldr	r3, [pc, #500]	@ (8007fb8 <_dtoa_r+0x5c8>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	f7f8 fc27 	bl	8000618 <__aeabi_dmul>
 8007dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dce:	9c00      	ldr	r4, [sp, #0]
 8007dd0:	3601      	adds	r6, #1
 8007dd2:	4630      	mov	r0, r6
 8007dd4:	f7f8 fbb6 	bl	8000544 <__aeabi_i2d>
 8007dd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ddc:	f7f8 fc1c 	bl	8000618 <__aeabi_dmul>
 8007de0:	4b76      	ldr	r3, [pc, #472]	@ (8007fbc <_dtoa_r+0x5cc>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	f7f8 fa62 	bl	80002ac <__adddf3>
 8007de8:	4605      	mov	r5, r0
 8007dea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007dee:	2c00      	cmp	r4, #0
 8007df0:	f040 808d 	bne.w	8007f0e <_dtoa_r+0x51e>
 8007df4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007df8:	4b71      	ldr	r3, [pc, #452]	@ (8007fc0 <_dtoa_r+0x5d0>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f7f8 fa54 	bl	80002a8 <__aeabi_dsub>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e08:	462a      	mov	r2, r5
 8007e0a:	4633      	mov	r3, r6
 8007e0c:	f7f8 fe94 	bl	8000b38 <__aeabi_dcmpgt>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	f040 828b 	bne.w	800832c <_dtoa_r+0x93c>
 8007e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e20:	f7f8 fe6c 	bl	8000afc <__aeabi_dcmplt>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	f040 8128 	bne.w	800807a <_dtoa_r+0x68a>
 8007e2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007e2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007e32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f2c0 815a 	blt.w	80080ee <_dtoa_r+0x6fe>
 8007e3a:	2f0e      	cmp	r7, #14
 8007e3c:	f300 8157 	bgt.w	80080ee <_dtoa_r+0x6fe>
 8007e40:	4b5a      	ldr	r3, [pc, #360]	@ (8007fac <_dtoa_r+0x5bc>)
 8007e42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e46:	ed93 7b00 	vldr	d7, [r3]
 8007e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	ed8d 7b00 	vstr	d7, [sp]
 8007e52:	da03      	bge.n	8007e5c <_dtoa_r+0x46c>
 8007e54:	9b07      	ldr	r3, [sp, #28]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f340 8101 	ble.w	800805e <_dtoa_r+0x66e>
 8007e5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e60:	4656      	mov	r6, sl
 8007e62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e66:	4620      	mov	r0, r4
 8007e68:	4629      	mov	r1, r5
 8007e6a:	f7f8 fcff 	bl	800086c <__aeabi_ddiv>
 8007e6e:	f7f8 fe83 	bl	8000b78 <__aeabi_d2iz>
 8007e72:	4680      	mov	r8, r0
 8007e74:	f7f8 fb66 	bl	8000544 <__aeabi_i2d>
 8007e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e7c:	f7f8 fbcc 	bl	8000618 <__aeabi_dmul>
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	4620      	mov	r0, r4
 8007e86:	4629      	mov	r1, r5
 8007e88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007e8c:	f7f8 fa0c 	bl	80002a8 <__aeabi_dsub>
 8007e90:	f806 4b01 	strb.w	r4, [r6], #1
 8007e94:	9d07      	ldr	r5, [sp, #28]
 8007e96:	eba6 040a 	sub.w	r4, r6, sl
 8007e9a:	42a5      	cmp	r5, r4
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	f040 8117 	bne.w	80080d2 <_dtoa_r+0x6e2>
 8007ea4:	f7f8 fa02 	bl	80002ac <__adddf3>
 8007ea8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eac:	4604      	mov	r4, r0
 8007eae:	460d      	mov	r5, r1
 8007eb0:	f7f8 fe42 	bl	8000b38 <__aeabi_dcmpgt>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	f040 80f9 	bne.w	80080ac <_dtoa_r+0x6bc>
 8007eba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	f7f8 fe11 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ec6:	b118      	cbz	r0, 8007ed0 <_dtoa_r+0x4e0>
 8007ec8:	f018 0f01 	tst.w	r8, #1
 8007ecc:	f040 80ee 	bne.w	80080ac <_dtoa_r+0x6bc>
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	4658      	mov	r0, fp
 8007ed4:	f000 ffdc 	bl	8008e90 <_Bfree>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	7033      	strb	r3, [r6, #0]
 8007edc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ede:	3701      	adds	r7, #1
 8007ee0:	601f      	str	r7, [r3, #0]
 8007ee2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 831d 	beq.w	8008524 <_dtoa_r+0xb34>
 8007eea:	601e      	str	r6, [r3, #0]
 8007eec:	e31a      	b.n	8008524 <_dtoa_r+0xb34>
 8007eee:	07e2      	lsls	r2, r4, #31
 8007ef0:	d505      	bpl.n	8007efe <_dtoa_r+0x50e>
 8007ef2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ef6:	f7f8 fb8f 	bl	8000618 <__aeabi_dmul>
 8007efa:	3601      	adds	r6, #1
 8007efc:	2301      	movs	r3, #1
 8007efe:	1064      	asrs	r4, r4, #1
 8007f00:	3508      	adds	r5, #8
 8007f02:	e73f      	b.n	8007d84 <_dtoa_r+0x394>
 8007f04:	2602      	movs	r6, #2
 8007f06:	e742      	b.n	8007d8e <_dtoa_r+0x39e>
 8007f08:	9c07      	ldr	r4, [sp, #28]
 8007f0a:	9704      	str	r7, [sp, #16]
 8007f0c:	e761      	b.n	8007dd2 <_dtoa_r+0x3e2>
 8007f0e:	4b27      	ldr	r3, [pc, #156]	@ (8007fac <_dtoa_r+0x5bc>)
 8007f10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f1a:	4454      	add	r4, sl
 8007f1c:	2900      	cmp	r1, #0
 8007f1e:	d053      	beq.n	8007fc8 <_dtoa_r+0x5d8>
 8007f20:	4928      	ldr	r1, [pc, #160]	@ (8007fc4 <_dtoa_r+0x5d4>)
 8007f22:	2000      	movs	r0, #0
 8007f24:	f7f8 fca2 	bl	800086c <__aeabi_ddiv>
 8007f28:	4633      	mov	r3, r6
 8007f2a:	462a      	mov	r2, r5
 8007f2c:	f7f8 f9bc 	bl	80002a8 <__aeabi_dsub>
 8007f30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f34:	4656      	mov	r6, sl
 8007f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f3a:	f7f8 fe1d 	bl	8000b78 <__aeabi_d2iz>
 8007f3e:	4605      	mov	r5, r0
 8007f40:	f7f8 fb00 	bl	8000544 <__aeabi_i2d>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f4c:	f7f8 f9ac 	bl	80002a8 <__aeabi_dsub>
 8007f50:	3530      	adds	r5, #48	@ 0x30
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f5a:	f806 5b01 	strb.w	r5, [r6], #1
 8007f5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f62:	f7f8 fdcb 	bl	8000afc <__aeabi_dcmplt>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d171      	bne.n	800804e <_dtoa_r+0x65e>
 8007f6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f6e:	4911      	ldr	r1, [pc, #68]	@ (8007fb4 <_dtoa_r+0x5c4>)
 8007f70:	2000      	movs	r0, #0
 8007f72:	f7f8 f999 	bl	80002a8 <__aeabi_dsub>
 8007f76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f7a:	f7f8 fdbf 	bl	8000afc <__aeabi_dcmplt>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	f040 8095 	bne.w	80080ae <_dtoa_r+0x6be>
 8007f84:	42a6      	cmp	r6, r4
 8007f86:	f43f af50 	beq.w	8007e2a <_dtoa_r+0x43a>
 8007f8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb8 <_dtoa_r+0x5c8>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	f7f8 fb41 	bl	8000618 <__aeabi_dmul>
 8007f96:	4b08      	ldr	r3, [pc, #32]	@ (8007fb8 <_dtoa_r+0x5c8>)
 8007f98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa2:	f7f8 fb39 	bl	8000618 <__aeabi_dmul>
 8007fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007faa:	e7c4      	b.n	8007f36 <_dtoa_r+0x546>
 8007fac:	0800a538 	.word	0x0800a538
 8007fb0:	0800a510 	.word	0x0800a510
 8007fb4:	3ff00000 	.word	0x3ff00000
 8007fb8:	40240000 	.word	0x40240000
 8007fbc:	401c0000 	.word	0x401c0000
 8007fc0:	40140000 	.word	0x40140000
 8007fc4:	3fe00000 	.word	0x3fe00000
 8007fc8:	4631      	mov	r1, r6
 8007fca:	4628      	mov	r0, r5
 8007fcc:	f7f8 fb24 	bl	8000618 <__aeabi_dmul>
 8007fd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fd4:	9415      	str	r4, [sp, #84]	@ 0x54
 8007fd6:	4656      	mov	r6, sl
 8007fd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fdc:	f7f8 fdcc 	bl	8000b78 <__aeabi_d2iz>
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	f7f8 faaf 	bl	8000544 <__aeabi_i2d>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fee:	f7f8 f95b 	bl	80002a8 <__aeabi_dsub>
 8007ff2:	3530      	adds	r5, #48	@ 0x30
 8007ff4:	f806 5b01 	strb.w	r5, [r6], #1
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	42a6      	cmp	r6, r4
 8007ffe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008002:	f04f 0200 	mov.w	r2, #0
 8008006:	d124      	bne.n	8008052 <_dtoa_r+0x662>
 8008008:	4bac      	ldr	r3, [pc, #688]	@ (80082bc <_dtoa_r+0x8cc>)
 800800a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800800e:	f7f8 f94d 	bl	80002ac <__adddf3>
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800801a:	f7f8 fd8d 	bl	8000b38 <__aeabi_dcmpgt>
 800801e:	2800      	cmp	r0, #0
 8008020:	d145      	bne.n	80080ae <_dtoa_r+0x6be>
 8008022:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008026:	49a5      	ldr	r1, [pc, #660]	@ (80082bc <_dtoa_r+0x8cc>)
 8008028:	2000      	movs	r0, #0
 800802a:	f7f8 f93d 	bl	80002a8 <__aeabi_dsub>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008036:	f7f8 fd61 	bl	8000afc <__aeabi_dcmplt>
 800803a:	2800      	cmp	r0, #0
 800803c:	f43f aef5 	beq.w	8007e2a <_dtoa_r+0x43a>
 8008040:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008042:	1e73      	subs	r3, r6, #1
 8008044:	9315      	str	r3, [sp, #84]	@ 0x54
 8008046:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800804a:	2b30      	cmp	r3, #48	@ 0x30
 800804c:	d0f8      	beq.n	8008040 <_dtoa_r+0x650>
 800804e:	9f04      	ldr	r7, [sp, #16]
 8008050:	e73e      	b.n	8007ed0 <_dtoa_r+0x4e0>
 8008052:	4b9b      	ldr	r3, [pc, #620]	@ (80082c0 <_dtoa_r+0x8d0>)
 8008054:	f7f8 fae0 	bl	8000618 <__aeabi_dmul>
 8008058:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800805c:	e7bc      	b.n	8007fd8 <_dtoa_r+0x5e8>
 800805e:	d10c      	bne.n	800807a <_dtoa_r+0x68a>
 8008060:	4b98      	ldr	r3, [pc, #608]	@ (80082c4 <_dtoa_r+0x8d4>)
 8008062:	2200      	movs	r2, #0
 8008064:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008068:	f7f8 fad6 	bl	8000618 <__aeabi_dmul>
 800806c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008070:	f7f8 fd58 	bl	8000b24 <__aeabi_dcmpge>
 8008074:	2800      	cmp	r0, #0
 8008076:	f000 8157 	beq.w	8008328 <_dtoa_r+0x938>
 800807a:	2400      	movs	r4, #0
 800807c:	4625      	mov	r5, r4
 800807e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008080:	43db      	mvns	r3, r3
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	4656      	mov	r6, sl
 8008086:	2700      	movs	r7, #0
 8008088:	4621      	mov	r1, r4
 800808a:	4658      	mov	r0, fp
 800808c:	f000 ff00 	bl	8008e90 <_Bfree>
 8008090:	2d00      	cmp	r5, #0
 8008092:	d0dc      	beq.n	800804e <_dtoa_r+0x65e>
 8008094:	b12f      	cbz	r7, 80080a2 <_dtoa_r+0x6b2>
 8008096:	42af      	cmp	r7, r5
 8008098:	d003      	beq.n	80080a2 <_dtoa_r+0x6b2>
 800809a:	4639      	mov	r1, r7
 800809c:	4658      	mov	r0, fp
 800809e:	f000 fef7 	bl	8008e90 <_Bfree>
 80080a2:	4629      	mov	r1, r5
 80080a4:	4658      	mov	r0, fp
 80080a6:	f000 fef3 	bl	8008e90 <_Bfree>
 80080aa:	e7d0      	b.n	800804e <_dtoa_r+0x65e>
 80080ac:	9704      	str	r7, [sp, #16]
 80080ae:	4633      	mov	r3, r6
 80080b0:	461e      	mov	r6, r3
 80080b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080b6:	2a39      	cmp	r2, #57	@ 0x39
 80080b8:	d107      	bne.n	80080ca <_dtoa_r+0x6da>
 80080ba:	459a      	cmp	sl, r3
 80080bc:	d1f8      	bne.n	80080b0 <_dtoa_r+0x6c0>
 80080be:	9a04      	ldr	r2, [sp, #16]
 80080c0:	3201      	adds	r2, #1
 80080c2:	9204      	str	r2, [sp, #16]
 80080c4:	2230      	movs	r2, #48	@ 0x30
 80080c6:	f88a 2000 	strb.w	r2, [sl]
 80080ca:	781a      	ldrb	r2, [r3, #0]
 80080cc:	3201      	adds	r2, #1
 80080ce:	701a      	strb	r2, [r3, #0]
 80080d0:	e7bd      	b.n	800804e <_dtoa_r+0x65e>
 80080d2:	4b7b      	ldr	r3, [pc, #492]	@ (80082c0 <_dtoa_r+0x8d0>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	f7f8 fa9f 	bl	8000618 <__aeabi_dmul>
 80080da:	2200      	movs	r2, #0
 80080dc:	2300      	movs	r3, #0
 80080de:	4604      	mov	r4, r0
 80080e0:	460d      	mov	r5, r1
 80080e2:	f7f8 fd01 	bl	8000ae8 <__aeabi_dcmpeq>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f43f aebb 	beq.w	8007e62 <_dtoa_r+0x472>
 80080ec:	e6f0      	b.n	8007ed0 <_dtoa_r+0x4e0>
 80080ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	f000 80db 	beq.w	80082ac <_dtoa_r+0x8bc>
 80080f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080f8:	2a01      	cmp	r2, #1
 80080fa:	f300 80bf 	bgt.w	800827c <_dtoa_r+0x88c>
 80080fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008100:	2a00      	cmp	r2, #0
 8008102:	f000 80b7 	beq.w	8008274 <_dtoa_r+0x884>
 8008106:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800810a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800810c:	4646      	mov	r6, r8
 800810e:	9a08      	ldr	r2, [sp, #32]
 8008110:	2101      	movs	r1, #1
 8008112:	441a      	add	r2, r3
 8008114:	4658      	mov	r0, fp
 8008116:	4498      	add	r8, r3
 8008118:	9208      	str	r2, [sp, #32]
 800811a:	f000 ffb7 	bl	800908c <__i2b>
 800811e:	4605      	mov	r5, r0
 8008120:	b15e      	cbz	r6, 800813a <_dtoa_r+0x74a>
 8008122:	9b08      	ldr	r3, [sp, #32]
 8008124:	2b00      	cmp	r3, #0
 8008126:	dd08      	ble.n	800813a <_dtoa_r+0x74a>
 8008128:	42b3      	cmp	r3, r6
 800812a:	9a08      	ldr	r2, [sp, #32]
 800812c:	bfa8      	it	ge
 800812e:	4633      	movge	r3, r6
 8008130:	eba8 0803 	sub.w	r8, r8, r3
 8008134:	1af6      	subs	r6, r6, r3
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	9308      	str	r3, [sp, #32]
 800813a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800813c:	b1f3      	cbz	r3, 800817c <_dtoa_r+0x78c>
 800813e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 80b7 	beq.w	80082b4 <_dtoa_r+0x8c4>
 8008146:	b18c      	cbz	r4, 800816c <_dtoa_r+0x77c>
 8008148:	4629      	mov	r1, r5
 800814a:	4622      	mov	r2, r4
 800814c:	4658      	mov	r0, fp
 800814e:	f001 f85d 	bl	800920c <__pow5mult>
 8008152:	464a      	mov	r2, r9
 8008154:	4601      	mov	r1, r0
 8008156:	4605      	mov	r5, r0
 8008158:	4658      	mov	r0, fp
 800815a:	f000 ffad 	bl	80090b8 <__multiply>
 800815e:	4649      	mov	r1, r9
 8008160:	9004      	str	r0, [sp, #16]
 8008162:	4658      	mov	r0, fp
 8008164:	f000 fe94 	bl	8008e90 <_Bfree>
 8008168:	9b04      	ldr	r3, [sp, #16]
 800816a:	4699      	mov	r9, r3
 800816c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800816e:	1b1a      	subs	r2, r3, r4
 8008170:	d004      	beq.n	800817c <_dtoa_r+0x78c>
 8008172:	4649      	mov	r1, r9
 8008174:	4658      	mov	r0, fp
 8008176:	f001 f849 	bl	800920c <__pow5mult>
 800817a:	4681      	mov	r9, r0
 800817c:	2101      	movs	r1, #1
 800817e:	4658      	mov	r0, fp
 8008180:	f000 ff84 	bl	800908c <__i2b>
 8008184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008186:	4604      	mov	r4, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	f000 81cf 	beq.w	800852c <_dtoa_r+0xb3c>
 800818e:	461a      	mov	r2, r3
 8008190:	4601      	mov	r1, r0
 8008192:	4658      	mov	r0, fp
 8008194:	f001 f83a 	bl	800920c <__pow5mult>
 8008198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800819a:	2b01      	cmp	r3, #1
 800819c:	4604      	mov	r4, r0
 800819e:	f300 8095 	bgt.w	80082cc <_dtoa_r+0x8dc>
 80081a2:	9b02      	ldr	r3, [sp, #8]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f040 8087 	bne.w	80082b8 <_dtoa_r+0x8c8>
 80081aa:	9b03      	ldr	r3, [sp, #12]
 80081ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f040 8089 	bne.w	80082c8 <_dtoa_r+0x8d8>
 80081b6:	9b03      	ldr	r3, [sp, #12]
 80081b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081bc:	0d1b      	lsrs	r3, r3, #20
 80081be:	051b      	lsls	r3, r3, #20
 80081c0:	b12b      	cbz	r3, 80081ce <_dtoa_r+0x7de>
 80081c2:	9b08      	ldr	r3, [sp, #32]
 80081c4:	3301      	adds	r3, #1
 80081c6:	9308      	str	r3, [sp, #32]
 80081c8:	f108 0801 	add.w	r8, r8, #1
 80081cc:	2301      	movs	r3, #1
 80081ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80081d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 81b0 	beq.w	8008538 <_dtoa_r+0xb48>
 80081d8:	6923      	ldr	r3, [r4, #16]
 80081da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081de:	6918      	ldr	r0, [r3, #16]
 80081e0:	f000 ff08 	bl	8008ff4 <__hi0bits>
 80081e4:	f1c0 0020 	rsb	r0, r0, #32
 80081e8:	9b08      	ldr	r3, [sp, #32]
 80081ea:	4418      	add	r0, r3
 80081ec:	f010 001f 	ands.w	r0, r0, #31
 80081f0:	d077      	beq.n	80082e2 <_dtoa_r+0x8f2>
 80081f2:	f1c0 0320 	rsb	r3, r0, #32
 80081f6:	2b04      	cmp	r3, #4
 80081f8:	dd6b      	ble.n	80082d2 <_dtoa_r+0x8e2>
 80081fa:	9b08      	ldr	r3, [sp, #32]
 80081fc:	f1c0 001c 	rsb	r0, r0, #28
 8008200:	4403      	add	r3, r0
 8008202:	4480      	add	r8, r0
 8008204:	4406      	add	r6, r0
 8008206:	9308      	str	r3, [sp, #32]
 8008208:	f1b8 0f00 	cmp.w	r8, #0
 800820c:	dd05      	ble.n	800821a <_dtoa_r+0x82a>
 800820e:	4649      	mov	r1, r9
 8008210:	4642      	mov	r2, r8
 8008212:	4658      	mov	r0, fp
 8008214:	f001 f854 	bl	80092c0 <__lshift>
 8008218:	4681      	mov	r9, r0
 800821a:	9b08      	ldr	r3, [sp, #32]
 800821c:	2b00      	cmp	r3, #0
 800821e:	dd05      	ble.n	800822c <_dtoa_r+0x83c>
 8008220:	4621      	mov	r1, r4
 8008222:	461a      	mov	r2, r3
 8008224:	4658      	mov	r0, fp
 8008226:	f001 f84b 	bl	80092c0 <__lshift>
 800822a:	4604      	mov	r4, r0
 800822c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800822e:	2b00      	cmp	r3, #0
 8008230:	d059      	beq.n	80082e6 <_dtoa_r+0x8f6>
 8008232:	4621      	mov	r1, r4
 8008234:	4648      	mov	r0, r9
 8008236:	f001 f8af 	bl	8009398 <__mcmp>
 800823a:	2800      	cmp	r0, #0
 800823c:	da53      	bge.n	80082e6 <_dtoa_r+0x8f6>
 800823e:	1e7b      	subs	r3, r7, #1
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	4649      	mov	r1, r9
 8008244:	2300      	movs	r3, #0
 8008246:	220a      	movs	r2, #10
 8008248:	4658      	mov	r0, fp
 800824a:	f000 fe43 	bl	8008ed4 <__multadd>
 800824e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008250:	4681      	mov	r9, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	f000 8172 	beq.w	800853c <_dtoa_r+0xb4c>
 8008258:	2300      	movs	r3, #0
 800825a:	4629      	mov	r1, r5
 800825c:	220a      	movs	r2, #10
 800825e:	4658      	mov	r0, fp
 8008260:	f000 fe38 	bl	8008ed4 <__multadd>
 8008264:	9b00      	ldr	r3, [sp, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	4605      	mov	r5, r0
 800826a:	dc67      	bgt.n	800833c <_dtoa_r+0x94c>
 800826c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800826e:	2b02      	cmp	r3, #2
 8008270:	dc41      	bgt.n	80082f6 <_dtoa_r+0x906>
 8008272:	e063      	b.n	800833c <_dtoa_r+0x94c>
 8008274:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008276:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800827a:	e746      	b.n	800810a <_dtoa_r+0x71a>
 800827c:	9b07      	ldr	r3, [sp, #28]
 800827e:	1e5c      	subs	r4, r3, #1
 8008280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008282:	42a3      	cmp	r3, r4
 8008284:	bfbf      	itttt	lt
 8008286:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008288:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800828a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800828c:	1ae3      	sublt	r3, r4, r3
 800828e:	bfb4      	ite	lt
 8008290:	18d2      	addlt	r2, r2, r3
 8008292:	1b1c      	subge	r4, r3, r4
 8008294:	9b07      	ldr	r3, [sp, #28]
 8008296:	bfbc      	itt	lt
 8008298:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800829a:	2400      	movlt	r4, #0
 800829c:	2b00      	cmp	r3, #0
 800829e:	bfb5      	itete	lt
 80082a0:	eba8 0603 	sublt.w	r6, r8, r3
 80082a4:	9b07      	ldrge	r3, [sp, #28]
 80082a6:	2300      	movlt	r3, #0
 80082a8:	4646      	movge	r6, r8
 80082aa:	e730      	b.n	800810e <_dtoa_r+0x71e>
 80082ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80082b0:	4646      	mov	r6, r8
 80082b2:	e735      	b.n	8008120 <_dtoa_r+0x730>
 80082b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082b6:	e75c      	b.n	8008172 <_dtoa_r+0x782>
 80082b8:	2300      	movs	r3, #0
 80082ba:	e788      	b.n	80081ce <_dtoa_r+0x7de>
 80082bc:	3fe00000 	.word	0x3fe00000
 80082c0:	40240000 	.word	0x40240000
 80082c4:	40140000 	.word	0x40140000
 80082c8:	9b02      	ldr	r3, [sp, #8]
 80082ca:	e780      	b.n	80081ce <_dtoa_r+0x7de>
 80082cc:	2300      	movs	r3, #0
 80082ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80082d0:	e782      	b.n	80081d8 <_dtoa_r+0x7e8>
 80082d2:	d099      	beq.n	8008208 <_dtoa_r+0x818>
 80082d4:	9a08      	ldr	r2, [sp, #32]
 80082d6:	331c      	adds	r3, #28
 80082d8:	441a      	add	r2, r3
 80082da:	4498      	add	r8, r3
 80082dc:	441e      	add	r6, r3
 80082de:	9208      	str	r2, [sp, #32]
 80082e0:	e792      	b.n	8008208 <_dtoa_r+0x818>
 80082e2:	4603      	mov	r3, r0
 80082e4:	e7f6      	b.n	80082d4 <_dtoa_r+0x8e4>
 80082e6:	9b07      	ldr	r3, [sp, #28]
 80082e8:	9704      	str	r7, [sp, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	dc20      	bgt.n	8008330 <_dtoa_r+0x940>
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	dd1e      	ble.n	8008334 <_dtoa_r+0x944>
 80082f6:	9b00      	ldr	r3, [sp, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f47f aec0 	bne.w	800807e <_dtoa_r+0x68e>
 80082fe:	4621      	mov	r1, r4
 8008300:	2205      	movs	r2, #5
 8008302:	4658      	mov	r0, fp
 8008304:	f000 fde6 	bl	8008ed4 <__multadd>
 8008308:	4601      	mov	r1, r0
 800830a:	4604      	mov	r4, r0
 800830c:	4648      	mov	r0, r9
 800830e:	f001 f843 	bl	8009398 <__mcmp>
 8008312:	2800      	cmp	r0, #0
 8008314:	f77f aeb3 	ble.w	800807e <_dtoa_r+0x68e>
 8008318:	4656      	mov	r6, sl
 800831a:	2331      	movs	r3, #49	@ 0x31
 800831c:	f806 3b01 	strb.w	r3, [r6], #1
 8008320:	9b04      	ldr	r3, [sp, #16]
 8008322:	3301      	adds	r3, #1
 8008324:	9304      	str	r3, [sp, #16]
 8008326:	e6ae      	b.n	8008086 <_dtoa_r+0x696>
 8008328:	9c07      	ldr	r4, [sp, #28]
 800832a:	9704      	str	r7, [sp, #16]
 800832c:	4625      	mov	r5, r4
 800832e:	e7f3      	b.n	8008318 <_dtoa_r+0x928>
 8008330:	9b07      	ldr	r3, [sp, #28]
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 8104 	beq.w	8008544 <_dtoa_r+0xb54>
 800833c:	2e00      	cmp	r6, #0
 800833e:	dd05      	ble.n	800834c <_dtoa_r+0x95c>
 8008340:	4629      	mov	r1, r5
 8008342:	4632      	mov	r2, r6
 8008344:	4658      	mov	r0, fp
 8008346:	f000 ffbb 	bl	80092c0 <__lshift>
 800834a:	4605      	mov	r5, r0
 800834c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800834e:	2b00      	cmp	r3, #0
 8008350:	d05a      	beq.n	8008408 <_dtoa_r+0xa18>
 8008352:	6869      	ldr	r1, [r5, #4]
 8008354:	4658      	mov	r0, fp
 8008356:	f000 fd5b 	bl	8008e10 <_Balloc>
 800835a:	4606      	mov	r6, r0
 800835c:	b928      	cbnz	r0, 800836a <_dtoa_r+0x97a>
 800835e:	4b84      	ldr	r3, [pc, #528]	@ (8008570 <_dtoa_r+0xb80>)
 8008360:	4602      	mov	r2, r0
 8008362:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008366:	f7ff bb5a 	b.w	8007a1e <_dtoa_r+0x2e>
 800836a:	692a      	ldr	r2, [r5, #16]
 800836c:	3202      	adds	r2, #2
 800836e:	0092      	lsls	r2, r2, #2
 8008370:	f105 010c 	add.w	r1, r5, #12
 8008374:	300c      	adds	r0, #12
 8008376:	f7ff fa7a 	bl	800786e <memcpy>
 800837a:	2201      	movs	r2, #1
 800837c:	4631      	mov	r1, r6
 800837e:	4658      	mov	r0, fp
 8008380:	f000 ff9e 	bl	80092c0 <__lshift>
 8008384:	f10a 0301 	add.w	r3, sl, #1
 8008388:	9307      	str	r3, [sp, #28]
 800838a:	9b00      	ldr	r3, [sp, #0]
 800838c:	4453      	add	r3, sl
 800838e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008390:	9b02      	ldr	r3, [sp, #8]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	462f      	mov	r7, r5
 8008398:	930a      	str	r3, [sp, #40]	@ 0x28
 800839a:	4605      	mov	r5, r0
 800839c:	9b07      	ldr	r3, [sp, #28]
 800839e:	4621      	mov	r1, r4
 80083a0:	3b01      	subs	r3, #1
 80083a2:	4648      	mov	r0, r9
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	f7ff fa99 	bl	80078dc <quorem>
 80083aa:	4639      	mov	r1, r7
 80083ac:	9002      	str	r0, [sp, #8]
 80083ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083b2:	4648      	mov	r0, r9
 80083b4:	f000 fff0 	bl	8009398 <__mcmp>
 80083b8:	462a      	mov	r2, r5
 80083ba:	9008      	str	r0, [sp, #32]
 80083bc:	4621      	mov	r1, r4
 80083be:	4658      	mov	r0, fp
 80083c0:	f001 f806 	bl	80093d0 <__mdiff>
 80083c4:	68c2      	ldr	r2, [r0, #12]
 80083c6:	4606      	mov	r6, r0
 80083c8:	bb02      	cbnz	r2, 800840c <_dtoa_r+0xa1c>
 80083ca:	4601      	mov	r1, r0
 80083cc:	4648      	mov	r0, r9
 80083ce:	f000 ffe3 	bl	8009398 <__mcmp>
 80083d2:	4602      	mov	r2, r0
 80083d4:	4631      	mov	r1, r6
 80083d6:	4658      	mov	r0, fp
 80083d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80083da:	f000 fd59 	bl	8008e90 <_Bfree>
 80083de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083e2:	9e07      	ldr	r6, [sp, #28]
 80083e4:	ea43 0102 	orr.w	r1, r3, r2
 80083e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ea:	4319      	orrs	r1, r3
 80083ec:	d110      	bne.n	8008410 <_dtoa_r+0xa20>
 80083ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80083f2:	d029      	beq.n	8008448 <_dtoa_r+0xa58>
 80083f4:	9b08      	ldr	r3, [sp, #32]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	dd02      	ble.n	8008400 <_dtoa_r+0xa10>
 80083fa:	9b02      	ldr	r3, [sp, #8]
 80083fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008400:	9b00      	ldr	r3, [sp, #0]
 8008402:	f883 8000 	strb.w	r8, [r3]
 8008406:	e63f      	b.n	8008088 <_dtoa_r+0x698>
 8008408:	4628      	mov	r0, r5
 800840a:	e7bb      	b.n	8008384 <_dtoa_r+0x994>
 800840c:	2201      	movs	r2, #1
 800840e:	e7e1      	b.n	80083d4 <_dtoa_r+0x9e4>
 8008410:	9b08      	ldr	r3, [sp, #32]
 8008412:	2b00      	cmp	r3, #0
 8008414:	db04      	blt.n	8008420 <_dtoa_r+0xa30>
 8008416:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008418:	430b      	orrs	r3, r1
 800841a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800841c:	430b      	orrs	r3, r1
 800841e:	d120      	bne.n	8008462 <_dtoa_r+0xa72>
 8008420:	2a00      	cmp	r2, #0
 8008422:	dded      	ble.n	8008400 <_dtoa_r+0xa10>
 8008424:	4649      	mov	r1, r9
 8008426:	2201      	movs	r2, #1
 8008428:	4658      	mov	r0, fp
 800842a:	f000 ff49 	bl	80092c0 <__lshift>
 800842e:	4621      	mov	r1, r4
 8008430:	4681      	mov	r9, r0
 8008432:	f000 ffb1 	bl	8009398 <__mcmp>
 8008436:	2800      	cmp	r0, #0
 8008438:	dc03      	bgt.n	8008442 <_dtoa_r+0xa52>
 800843a:	d1e1      	bne.n	8008400 <_dtoa_r+0xa10>
 800843c:	f018 0f01 	tst.w	r8, #1
 8008440:	d0de      	beq.n	8008400 <_dtoa_r+0xa10>
 8008442:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008446:	d1d8      	bne.n	80083fa <_dtoa_r+0xa0a>
 8008448:	9a00      	ldr	r2, [sp, #0]
 800844a:	2339      	movs	r3, #57	@ 0x39
 800844c:	7013      	strb	r3, [r2, #0]
 800844e:	4633      	mov	r3, r6
 8008450:	461e      	mov	r6, r3
 8008452:	3b01      	subs	r3, #1
 8008454:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008458:	2a39      	cmp	r2, #57	@ 0x39
 800845a:	d052      	beq.n	8008502 <_dtoa_r+0xb12>
 800845c:	3201      	adds	r2, #1
 800845e:	701a      	strb	r2, [r3, #0]
 8008460:	e612      	b.n	8008088 <_dtoa_r+0x698>
 8008462:	2a00      	cmp	r2, #0
 8008464:	dd07      	ble.n	8008476 <_dtoa_r+0xa86>
 8008466:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800846a:	d0ed      	beq.n	8008448 <_dtoa_r+0xa58>
 800846c:	9a00      	ldr	r2, [sp, #0]
 800846e:	f108 0301 	add.w	r3, r8, #1
 8008472:	7013      	strb	r3, [r2, #0]
 8008474:	e608      	b.n	8008088 <_dtoa_r+0x698>
 8008476:	9b07      	ldr	r3, [sp, #28]
 8008478:	9a07      	ldr	r2, [sp, #28]
 800847a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800847e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008480:	4293      	cmp	r3, r2
 8008482:	d028      	beq.n	80084d6 <_dtoa_r+0xae6>
 8008484:	4649      	mov	r1, r9
 8008486:	2300      	movs	r3, #0
 8008488:	220a      	movs	r2, #10
 800848a:	4658      	mov	r0, fp
 800848c:	f000 fd22 	bl	8008ed4 <__multadd>
 8008490:	42af      	cmp	r7, r5
 8008492:	4681      	mov	r9, r0
 8008494:	f04f 0300 	mov.w	r3, #0
 8008498:	f04f 020a 	mov.w	r2, #10
 800849c:	4639      	mov	r1, r7
 800849e:	4658      	mov	r0, fp
 80084a0:	d107      	bne.n	80084b2 <_dtoa_r+0xac2>
 80084a2:	f000 fd17 	bl	8008ed4 <__multadd>
 80084a6:	4607      	mov	r7, r0
 80084a8:	4605      	mov	r5, r0
 80084aa:	9b07      	ldr	r3, [sp, #28]
 80084ac:	3301      	adds	r3, #1
 80084ae:	9307      	str	r3, [sp, #28]
 80084b0:	e774      	b.n	800839c <_dtoa_r+0x9ac>
 80084b2:	f000 fd0f 	bl	8008ed4 <__multadd>
 80084b6:	4629      	mov	r1, r5
 80084b8:	4607      	mov	r7, r0
 80084ba:	2300      	movs	r3, #0
 80084bc:	220a      	movs	r2, #10
 80084be:	4658      	mov	r0, fp
 80084c0:	f000 fd08 	bl	8008ed4 <__multadd>
 80084c4:	4605      	mov	r5, r0
 80084c6:	e7f0      	b.n	80084aa <_dtoa_r+0xaba>
 80084c8:	9b00      	ldr	r3, [sp, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	bfcc      	ite	gt
 80084ce:	461e      	movgt	r6, r3
 80084d0:	2601      	movle	r6, #1
 80084d2:	4456      	add	r6, sl
 80084d4:	2700      	movs	r7, #0
 80084d6:	4649      	mov	r1, r9
 80084d8:	2201      	movs	r2, #1
 80084da:	4658      	mov	r0, fp
 80084dc:	f000 fef0 	bl	80092c0 <__lshift>
 80084e0:	4621      	mov	r1, r4
 80084e2:	4681      	mov	r9, r0
 80084e4:	f000 ff58 	bl	8009398 <__mcmp>
 80084e8:	2800      	cmp	r0, #0
 80084ea:	dcb0      	bgt.n	800844e <_dtoa_r+0xa5e>
 80084ec:	d102      	bne.n	80084f4 <_dtoa_r+0xb04>
 80084ee:	f018 0f01 	tst.w	r8, #1
 80084f2:	d1ac      	bne.n	800844e <_dtoa_r+0xa5e>
 80084f4:	4633      	mov	r3, r6
 80084f6:	461e      	mov	r6, r3
 80084f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084fc:	2a30      	cmp	r2, #48	@ 0x30
 80084fe:	d0fa      	beq.n	80084f6 <_dtoa_r+0xb06>
 8008500:	e5c2      	b.n	8008088 <_dtoa_r+0x698>
 8008502:	459a      	cmp	sl, r3
 8008504:	d1a4      	bne.n	8008450 <_dtoa_r+0xa60>
 8008506:	9b04      	ldr	r3, [sp, #16]
 8008508:	3301      	adds	r3, #1
 800850a:	9304      	str	r3, [sp, #16]
 800850c:	2331      	movs	r3, #49	@ 0x31
 800850e:	f88a 3000 	strb.w	r3, [sl]
 8008512:	e5b9      	b.n	8008088 <_dtoa_r+0x698>
 8008514:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008516:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008574 <_dtoa_r+0xb84>
 800851a:	b11b      	cbz	r3, 8008524 <_dtoa_r+0xb34>
 800851c:	f10a 0308 	add.w	r3, sl, #8
 8008520:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008522:	6013      	str	r3, [r2, #0]
 8008524:	4650      	mov	r0, sl
 8008526:	b019      	add	sp, #100	@ 0x64
 8008528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800852e:	2b01      	cmp	r3, #1
 8008530:	f77f ae37 	ble.w	80081a2 <_dtoa_r+0x7b2>
 8008534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008536:	930a      	str	r3, [sp, #40]	@ 0x28
 8008538:	2001      	movs	r0, #1
 800853a:	e655      	b.n	80081e8 <_dtoa_r+0x7f8>
 800853c:	9b00      	ldr	r3, [sp, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	f77f aed6 	ble.w	80082f0 <_dtoa_r+0x900>
 8008544:	4656      	mov	r6, sl
 8008546:	4621      	mov	r1, r4
 8008548:	4648      	mov	r0, r9
 800854a:	f7ff f9c7 	bl	80078dc <quorem>
 800854e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008552:	f806 8b01 	strb.w	r8, [r6], #1
 8008556:	9b00      	ldr	r3, [sp, #0]
 8008558:	eba6 020a 	sub.w	r2, r6, sl
 800855c:	4293      	cmp	r3, r2
 800855e:	ddb3      	ble.n	80084c8 <_dtoa_r+0xad8>
 8008560:	4649      	mov	r1, r9
 8008562:	2300      	movs	r3, #0
 8008564:	220a      	movs	r2, #10
 8008566:	4658      	mov	r0, fp
 8008568:	f000 fcb4 	bl	8008ed4 <__multadd>
 800856c:	4681      	mov	r9, r0
 800856e:	e7ea      	b.n	8008546 <_dtoa_r+0xb56>
 8008570:	0800a435 	.word	0x0800a435
 8008574:	0800a3d0 	.word	0x0800a3d0

08008578 <_free_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	4605      	mov	r5, r0
 800857c:	2900      	cmp	r1, #0
 800857e:	d041      	beq.n	8008604 <_free_r+0x8c>
 8008580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008584:	1f0c      	subs	r4, r1, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	bfb8      	it	lt
 800858a:	18e4      	addlt	r4, r4, r3
 800858c:	f000 fc34 	bl	8008df8 <__malloc_lock>
 8008590:	4a1d      	ldr	r2, [pc, #116]	@ (8008608 <_free_r+0x90>)
 8008592:	6813      	ldr	r3, [r2, #0]
 8008594:	b933      	cbnz	r3, 80085a4 <_free_r+0x2c>
 8008596:	6063      	str	r3, [r4, #4]
 8008598:	6014      	str	r4, [r2, #0]
 800859a:	4628      	mov	r0, r5
 800859c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085a0:	f000 bc30 	b.w	8008e04 <__malloc_unlock>
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	d908      	bls.n	80085ba <_free_r+0x42>
 80085a8:	6820      	ldr	r0, [r4, #0]
 80085aa:	1821      	adds	r1, r4, r0
 80085ac:	428b      	cmp	r3, r1
 80085ae:	bf01      	itttt	eq
 80085b0:	6819      	ldreq	r1, [r3, #0]
 80085b2:	685b      	ldreq	r3, [r3, #4]
 80085b4:	1809      	addeq	r1, r1, r0
 80085b6:	6021      	streq	r1, [r4, #0]
 80085b8:	e7ed      	b.n	8008596 <_free_r+0x1e>
 80085ba:	461a      	mov	r2, r3
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	b10b      	cbz	r3, 80085c4 <_free_r+0x4c>
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	d9fa      	bls.n	80085ba <_free_r+0x42>
 80085c4:	6811      	ldr	r1, [r2, #0]
 80085c6:	1850      	adds	r0, r2, r1
 80085c8:	42a0      	cmp	r0, r4
 80085ca:	d10b      	bne.n	80085e4 <_free_r+0x6c>
 80085cc:	6820      	ldr	r0, [r4, #0]
 80085ce:	4401      	add	r1, r0
 80085d0:	1850      	adds	r0, r2, r1
 80085d2:	4283      	cmp	r3, r0
 80085d4:	6011      	str	r1, [r2, #0]
 80085d6:	d1e0      	bne.n	800859a <_free_r+0x22>
 80085d8:	6818      	ldr	r0, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	6053      	str	r3, [r2, #4]
 80085de:	4408      	add	r0, r1
 80085e0:	6010      	str	r0, [r2, #0]
 80085e2:	e7da      	b.n	800859a <_free_r+0x22>
 80085e4:	d902      	bls.n	80085ec <_free_r+0x74>
 80085e6:	230c      	movs	r3, #12
 80085e8:	602b      	str	r3, [r5, #0]
 80085ea:	e7d6      	b.n	800859a <_free_r+0x22>
 80085ec:	6820      	ldr	r0, [r4, #0]
 80085ee:	1821      	adds	r1, r4, r0
 80085f0:	428b      	cmp	r3, r1
 80085f2:	bf04      	itt	eq
 80085f4:	6819      	ldreq	r1, [r3, #0]
 80085f6:	685b      	ldreq	r3, [r3, #4]
 80085f8:	6063      	str	r3, [r4, #4]
 80085fa:	bf04      	itt	eq
 80085fc:	1809      	addeq	r1, r1, r0
 80085fe:	6021      	streq	r1, [r4, #0]
 8008600:	6054      	str	r4, [r2, #4]
 8008602:	e7ca      	b.n	800859a <_free_r+0x22>
 8008604:	bd38      	pop	{r3, r4, r5, pc}
 8008606:	bf00      	nop
 8008608:	2000074c 	.word	0x2000074c

0800860c <rshift>:
 800860c:	6903      	ldr	r3, [r0, #16]
 800860e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008612:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008616:	ea4f 1261 	mov.w	r2, r1, asr #5
 800861a:	f100 0414 	add.w	r4, r0, #20
 800861e:	dd45      	ble.n	80086ac <rshift+0xa0>
 8008620:	f011 011f 	ands.w	r1, r1, #31
 8008624:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008628:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800862c:	d10c      	bne.n	8008648 <rshift+0x3c>
 800862e:	f100 0710 	add.w	r7, r0, #16
 8008632:	4629      	mov	r1, r5
 8008634:	42b1      	cmp	r1, r6
 8008636:	d334      	bcc.n	80086a2 <rshift+0x96>
 8008638:	1a9b      	subs	r3, r3, r2
 800863a:	009b      	lsls	r3, r3, #2
 800863c:	1eea      	subs	r2, r5, #3
 800863e:	4296      	cmp	r6, r2
 8008640:	bf38      	it	cc
 8008642:	2300      	movcc	r3, #0
 8008644:	4423      	add	r3, r4
 8008646:	e015      	b.n	8008674 <rshift+0x68>
 8008648:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800864c:	f1c1 0820 	rsb	r8, r1, #32
 8008650:	40cf      	lsrs	r7, r1
 8008652:	f105 0e04 	add.w	lr, r5, #4
 8008656:	46a1      	mov	r9, r4
 8008658:	4576      	cmp	r6, lr
 800865a:	46f4      	mov	ip, lr
 800865c:	d815      	bhi.n	800868a <rshift+0x7e>
 800865e:	1a9a      	subs	r2, r3, r2
 8008660:	0092      	lsls	r2, r2, #2
 8008662:	3a04      	subs	r2, #4
 8008664:	3501      	adds	r5, #1
 8008666:	42ae      	cmp	r6, r5
 8008668:	bf38      	it	cc
 800866a:	2200      	movcc	r2, #0
 800866c:	18a3      	adds	r3, r4, r2
 800866e:	50a7      	str	r7, [r4, r2]
 8008670:	b107      	cbz	r7, 8008674 <rshift+0x68>
 8008672:	3304      	adds	r3, #4
 8008674:	1b1a      	subs	r2, r3, r4
 8008676:	42a3      	cmp	r3, r4
 8008678:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800867c:	bf08      	it	eq
 800867e:	2300      	moveq	r3, #0
 8008680:	6102      	str	r2, [r0, #16]
 8008682:	bf08      	it	eq
 8008684:	6143      	streq	r3, [r0, #20]
 8008686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800868a:	f8dc c000 	ldr.w	ip, [ip]
 800868e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008692:	ea4c 0707 	orr.w	r7, ip, r7
 8008696:	f849 7b04 	str.w	r7, [r9], #4
 800869a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800869e:	40cf      	lsrs	r7, r1
 80086a0:	e7da      	b.n	8008658 <rshift+0x4c>
 80086a2:	f851 cb04 	ldr.w	ip, [r1], #4
 80086a6:	f847 cf04 	str.w	ip, [r7, #4]!
 80086aa:	e7c3      	b.n	8008634 <rshift+0x28>
 80086ac:	4623      	mov	r3, r4
 80086ae:	e7e1      	b.n	8008674 <rshift+0x68>

080086b0 <__hexdig_fun>:
 80086b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80086b4:	2b09      	cmp	r3, #9
 80086b6:	d802      	bhi.n	80086be <__hexdig_fun+0xe>
 80086b8:	3820      	subs	r0, #32
 80086ba:	b2c0      	uxtb	r0, r0
 80086bc:	4770      	bx	lr
 80086be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80086c2:	2b05      	cmp	r3, #5
 80086c4:	d801      	bhi.n	80086ca <__hexdig_fun+0x1a>
 80086c6:	3847      	subs	r0, #71	@ 0x47
 80086c8:	e7f7      	b.n	80086ba <__hexdig_fun+0xa>
 80086ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80086ce:	2b05      	cmp	r3, #5
 80086d0:	d801      	bhi.n	80086d6 <__hexdig_fun+0x26>
 80086d2:	3827      	subs	r0, #39	@ 0x27
 80086d4:	e7f1      	b.n	80086ba <__hexdig_fun+0xa>
 80086d6:	2000      	movs	r0, #0
 80086d8:	4770      	bx	lr
	...

080086dc <__gethex>:
 80086dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086e0:	b085      	sub	sp, #20
 80086e2:	468a      	mov	sl, r1
 80086e4:	9302      	str	r3, [sp, #8]
 80086e6:	680b      	ldr	r3, [r1, #0]
 80086e8:	9001      	str	r0, [sp, #4]
 80086ea:	4690      	mov	r8, r2
 80086ec:	1c9c      	adds	r4, r3, #2
 80086ee:	46a1      	mov	r9, r4
 80086f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80086f4:	2830      	cmp	r0, #48	@ 0x30
 80086f6:	d0fa      	beq.n	80086ee <__gethex+0x12>
 80086f8:	eba9 0303 	sub.w	r3, r9, r3
 80086fc:	f1a3 0b02 	sub.w	fp, r3, #2
 8008700:	f7ff ffd6 	bl	80086b0 <__hexdig_fun>
 8008704:	4605      	mov	r5, r0
 8008706:	2800      	cmp	r0, #0
 8008708:	d168      	bne.n	80087dc <__gethex+0x100>
 800870a:	49a0      	ldr	r1, [pc, #640]	@ (800898c <__gethex+0x2b0>)
 800870c:	2201      	movs	r2, #1
 800870e:	4648      	mov	r0, r9
 8008710:	f7ff f824 	bl	800775c <strncmp>
 8008714:	4607      	mov	r7, r0
 8008716:	2800      	cmp	r0, #0
 8008718:	d167      	bne.n	80087ea <__gethex+0x10e>
 800871a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800871e:	4626      	mov	r6, r4
 8008720:	f7ff ffc6 	bl	80086b0 <__hexdig_fun>
 8008724:	2800      	cmp	r0, #0
 8008726:	d062      	beq.n	80087ee <__gethex+0x112>
 8008728:	4623      	mov	r3, r4
 800872a:	7818      	ldrb	r0, [r3, #0]
 800872c:	2830      	cmp	r0, #48	@ 0x30
 800872e:	4699      	mov	r9, r3
 8008730:	f103 0301 	add.w	r3, r3, #1
 8008734:	d0f9      	beq.n	800872a <__gethex+0x4e>
 8008736:	f7ff ffbb 	bl	80086b0 <__hexdig_fun>
 800873a:	fab0 f580 	clz	r5, r0
 800873e:	096d      	lsrs	r5, r5, #5
 8008740:	f04f 0b01 	mov.w	fp, #1
 8008744:	464a      	mov	r2, r9
 8008746:	4616      	mov	r6, r2
 8008748:	3201      	adds	r2, #1
 800874a:	7830      	ldrb	r0, [r6, #0]
 800874c:	f7ff ffb0 	bl	80086b0 <__hexdig_fun>
 8008750:	2800      	cmp	r0, #0
 8008752:	d1f8      	bne.n	8008746 <__gethex+0x6a>
 8008754:	498d      	ldr	r1, [pc, #564]	@ (800898c <__gethex+0x2b0>)
 8008756:	2201      	movs	r2, #1
 8008758:	4630      	mov	r0, r6
 800875a:	f7fe ffff 	bl	800775c <strncmp>
 800875e:	2800      	cmp	r0, #0
 8008760:	d13f      	bne.n	80087e2 <__gethex+0x106>
 8008762:	b944      	cbnz	r4, 8008776 <__gethex+0x9a>
 8008764:	1c74      	adds	r4, r6, #1
 8008766:	4622      	mov	r2, r4
 8008768:	4616      	mov	r6, r2
 800876a:	3201      	adds	r2, #1
 800876c:	7830      	ldrb	r0, [r6, #0]
 800876e:	f7ff ff9f 	bl	80086b0 <__hexdig_fun>
 8008772:	2800      	cmp	r0, #0
 8008774:	d1f8      	bne.n	8008768 <__gethex+0x8c>
 8008776:	1ba4      	subs	r4, r4, r6
 8008778:	00a7      	lsls	r7, r4, #2
 800877a:	7833      	ldrb	r3, [r6, #0]
 800877c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008780:	2b50      	cmp	r3, #80	@ 0x50
 8008782:	d13e      	bne.n	8008802 <__gethex+0x126>
 8008784:	7873      	ldrb	r3, [r6, #1]
 8008786:	2b2b      	cmp	r3, #43	@ 0x2b
 8008788:	d033      	beq.n	80087f2 <__gethex+0x116>
 800878a:	2b2d      	cmp	r3, #45	@ 0x2d
 800878c:	d034      	beq.n	80087f8 <__gethex+0x11c>
 800878e:	1c71      	adds	r1, r6, #1
 8008790:	2400      	movs	r4, #0
 8008792:	7808      	ldrb	r0, [r1, #0]
 8008794:	f7ff ff8c 	bl	80086b0 <__hexdig_fun>
 8008798:	1e43      	subs	r3, r0, #1
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b18      	cmp	r3, #24
 800879e:	d830      	bhi.n	8008802 <__gethex+0x126>
 80087a0:	f1a0 0210 	sub.w	r2, r0, #16
 80087a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80087a8:	f7ff ff82 	bl	80086b0 <__hexdig_fun>
 80087ac:	f100 3cff 	add.w	ip, r0, #4294967295
 80087b0:	fa5f fc8c 	uxtb.w	ip, ip
 80087b4:	f1bc 0f18 	cmp.w	ip, #24
 80087b8:	f04f 030a 	mov.w	r3, #10
 80087bc:	d91e      	bls.n	80087fc <__gethex+0x120>
 80087be:	b104      	cbz	r4, 80087c2 <__gethex+0xe6>
 80087c0:	4252      	negs	r2, r2
 80087c2:	4417      	add	r7, r2
 80087c4:	f8ca 1000 	str.w	r1, [sl]
 80087c8:	b1ed      	cbz	r5, 8008806 <__gethex+0x12a>
 80087ca:	f1bb 0f00 	cmp.w	fp, #0
 80087ce:	bf0c      	ite	eq
 80087d0:	2506      	moveq	r5, #6
 80087d2:	2500      	movne	r5, #0
 80087d4:	4628      	mov	r0, r5
 80087d6:	b005      	add	sp, #20
 80087d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087dc:	2500      	movs	r5, #0
 80087de:	462c      	mov	r4, r5
 80087e0:	e7b0      	b.n	8008744 <__gethex+0x68>
 80087e2:	2c00      	cmp	r4, #0
 80087e4:	d1c7      	bne.n	8008776 <__gethex+0x9a>
 80087e6:	4627      	mov	r7, r4
 80087e8:	e7c7      	b.n	800877a <__gethex+0x9e>
 80087ea:	464e      	mov	r6, r9
 80087ec:	462f      	mov	r7, r5
 80087ee:	2501      	movs	r5, #1
 80087f0:	e7c3      	b.n	800877a <__gethex+0x9e>
 80087f2:	2400      	movs	r4, #0
 80087f4:	1cb1      	adds	r1, r6, #2
 80087f6:	e7cc      	b.n	8008792 <__gethex+0xb6>
 80087f8:	2401      	movs	r4, #1
 80087fa:	e7fb      	b.n	80087f4 <__gethex+0x118>
 80087fc:	fb03 0002 	mla	r0, r3, r2, r0
 8008800:	e7ce      	b.n	80087a0 <__gethex+0xc4>
 8008802:	4631      	mov	r1, r6
 8008804:	e7de      	b.n	80087c4 <__gethex+0xe8>
 8008806:	eba6 0309 	sub.w	r3, r6, r9
 800880a:	3b01      	subs	r3, #1
 800880c:	4629      	mov	r1, r5
 800880e:	2b07      	cmp	r3, #7
 8008810:	dc0a      	bgt.n	8008828 <__gethex+0x14c>
 8008812:	9801      	ldr	r0, [sp, #4]
 8008814:	f000 fafc 	bl	8008e10 <_Balloc>
 8008818:	4604      	mov	r4, r0
 800881a:	b940      	cbnz	r0, 800882e <__gethex+0x152>
 800881c:	4b5c      	ldr	r3, [pc, #368]	@ (8008990 <__gethex+0x2b4>)
 800881e:	4602      	mov	r2, r0
 8008820:	21e4      	movs	r1, #228	@ 0xe4
 8008822:	485c      	ldr	r0, [pc, #368]	@ (8008994 <__gethex+0x2b8>)
 8008824:	f7ff f83c 	bl	80078a0 <__assert_func>
 8008828:	3101      	adds	r1, #1
 800882a:	105b      	asrs	r3, r3, #1
 800882c:	e7ef      	b.n	800880e <__gethex+0x132>
 800882e:	f100 0a14 	add.w	sl, r0, #20
 8008832:	2300      	movs	r3, #0
 8008834:	4655      	mov	r5, sl
 8008836:	469b      	mov	fp, r3
 8008838:	45b1      	cmp	r9, r6
 800883a:	d337      	bcc.n	80088ac <__gethex+0x1d0>
 800883c:	f845 bb04 	str.w	fp, [r5], #4
 8008840:	eba5 050a 	sub.w	r5, r5, sl
 8008844:	10ad      	asrs	r5, r5, #2
 8008846:	6125      	str	r5, [r4, #16]
 8008848:	4658      	mov	r0, fp
 800884a:	f000 fbd3 	bl	8008ff4 <__hi0bits>
 800884e:	016d      	lsls	r5, r5, #5
 8008850:	f8d8 6000 	ldr.w	r6, [r8]
 8008854:	1a2d      	subs	r5, r5, r0
 8008856:	42b5      	cmp	r5, r6
 8008858:	dd54      	ble.n	8008904 <__gethex+0x228>
 800885a:	1bad      	subs	r5, r5, r6
 800885c:	4629      	mov	r1, r5
 800885e:	4620      	mov	r0, r4
 8008860:	f000 ff67 	bl	8009732 <__any_on>
 8008864:	4681      	mov	r9, r0
 8008866:	b178      	cbz	r0, 8008888 <__gethex+0x1ac>
 8008868:	1e6b      	subs	r3, r5, #1
 800886a:	1159      	asrs	r1, r3, #5
 800886c:	f003 021f 	and.w	r2, r3, #31
 8008870:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008874:	f04f 0901 	mov.w	r9, #1
 8008878:	fa09 f202 	lsl.w	r2, r9, r2
 800887c:	420a      	tst	r2, r1
 800887e:	d003      	beq.n	8008888 <__gethex+0x1ac>
 8008880:	454b      	cmp	r3, r9
 8008882:	dc36      	bgt.n	80088f2 <__gethex+0x216>
 8008884:	f04f 0902 	mov.w	r9, #2
 8008888:	4629      	mov	r1, r5
 800888a:	4620      	mov	r0, r4
 800888c:	f7ff febe 	bl	800860c <rshift>
 8008890:	442f      	add	r7, r5
 8008892:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008896:	42bb      	cmp	r3, r7
 8008898:	da42      	bge.n	8008920 <__gethex+0x244>
 800889a:	9801      	ldr	r0, [sp, #4]
 800889c:	4621      	mov	r1, r4
 800889e:	f000 faf7 	bl	8008e90 <_Bfree>
 80088a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088a4:	2300      	movs	r3, #0
 80088a6:	6013      	str	r3, [r2, #0]
 80088a8:	25a3      	movs	r5, #163	@ 0xa3
 80088aa:	e793      	b.n	80087d4 <__gethex+0xf8>
 80088ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80088b0:	2a2e      	cmp	r2, #46	@ 0x2e
 80088b2:	d012      	beq.n	80088da <__gethex+0x1fe>
 80088b4:	2b20      	cmp	r3, #32
 80088b6:	d104      	bne.n	80088c2 <__gethex+0x1e6>
 80088b8:	f845 bb04 	str.w	fp, [r5], #4
 80088bc:	f04f 0b00 	mov.w	fp, #0
 80088c0:	465b      	mov	r3, fp
 80088c2:	7830      	ldrb	r0, [r6, #0]
 80088c4:	9303      	str	r3, [sp, #12]
 80088c6:	f7ff fef3 	bl	80086b0 <__hexdig_fun>
 80088ca:	9b03      	ldr	r3, [sp, #12]
 80088cc:	f000 000f 	and.w	r0, r0, #15
 80088d0:	4098      	lsls	r0, r3
 80088d2:	ea4b 0b00 	orr.w	fp, fp, r0
 80088d6:	3304      	adds	r3, #4
 80088d8:	e7ae      	b.n	8008838 <__gethex+0x15c>
 80088da:	45b1      	cmp	r9, r6
 80088dc:	d8ea      	bhi.n	80088b4 <__gethex+0x1d8>
 80088de:	492b      	ldr	r1, [pc, #172]	@ (800898c <__gethex+0x2b0>)
 80088e0:	9303      	str	r3, [sp, #12]
 80088e2:	2201      	movs	r2, #1
 80088e4:	4630      	mov	r0, r6
 80088e6:	f7fe ff39 	bl	800775c <strncmp>
 80088ea:	9b03      	ldr	r3, [sp, #12]
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d1e1      	bne.n	80088b4 <__gethex+0x1d8>
 80088f0:	e7a2      	b.n	8008838 <__gethex+0x15c>
 80088f2:	1ea9      	subs	r1, r5, #2
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 ff1c 	bl	8009732 <__any_on>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d0c2      	beq.n	8008884 <__gethex+0x1a8>
 80088fe:	f04f 0903 	mov.w	r9, #3
 8008902:	e7c1      	b.n	8008888 <__gethex+0x1ac>
 8008904:	da09      	bge.n	800891a <__gethex+0x23e>
 8008906:	1b75      	subs	r5, r6, r5
 8008908:	4621      	mov	r1, r4
 800890a:	9801      	ldr	r0, [sp, #4]
 800890c:	462a      	mov	r2, r5
 800890e:	f000 fcd7 	bl	80092c0 <__lshift>
 8008912:	1b7f      	subs	r7, r7, r5
 8008914:	4604      	mov	r4, r0
 8008916:	f100 0a14 	add.w	sl, r0, #20
 800891a:	f04f 0900 	mov.w	r9, #0
 800891e:	e7b8      	b.n	8008892 <__gethex+0x1b6>
 8008920:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008924:	42bd      	cmp	r5, r7
 8008926:	dd6f      	ble.n	8008a08 <__gethex+0x32c>
 8008928:	1bed      	subs	r5, r5, r7
 800892a:	42ae      	cmp	r6, r5
 800892c:	dc34      	bgt.n	8008998 <__gethex+0x2bc>
 800892e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d022      	beq.n	800897c <__gethex+0x2a0>
 8008936:	2b03      	cmp	r3, #3
 8008938:	d024      	beq.n	8008984 <__gethex+0x2a8>
 800893a:	2b01      	cmp	r3, #1
 800893c:	d115      	bne.n	800896a <__gethex+0x28e>
 800893e:	42ae      	cmp	r6, r5
 8008940:	d113      	bne.n	800896a <__gethex+0x28e>
 8008942:	2e01      	cmp	r6, #1
 8008944:	d10b      	bne.n	800895e <__gethex+0x282>
 8008946:	9a02      	ldr	r2, [sp, #8]
 8008948:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800894c:	6013      	str	r3, [r2, #0]
 800894e:	2301      	movs	r3, #1
 8008950:	6123      	str	r3, [r4, #16]
 8008952:	f8ca 3000 	str.w	r3, [sl]
 8008956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008958:	2562      	movs	r5, #98	@ 0x62
 800895a:	601c      	str	r4, [r3, #0]
 800895c:	e73a      	b.n	80087d4 <__gethex+0xf8>
 800895e:	1e71      	subs	r1, r6, #1
 8008960:	4620      	mov	r0, r4
 8008962:	f000 fee6 	bl	8009732 <__any_on>
 8008966:	2800      	cmp	r0, #0
 8008968:	d1ed      	bne.n	8008946 <__gethex+0x26a>
 800896a:	9801      	ldr	r0, [sp, #4]
 800896c:	4621      	mov	r1, r4
 800896e:	f000 fa8f 	bl	8008e90 <_Bfree>
 8008972:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008974:	2300      	movs	r3, #0
 8008976:	6013      	str	r3, [r2, #0]
 8008978:	2550      	movs	r5, #80	@ 0x50
 800897a:	e72b      	b.n	80087d4 <__gethex+0xf8>
 800897c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f3      	bne.n	800896a <__gethex+0x28e>
 8008982:	e7e0      	b.n	8008946 <__gethex+0x26a>
 8008984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1dd      	bne.n	8008946 <__gethex+0x26a>
 800898a:	e7ee      	b.n	800896a <__gethex+0x28e>
 800898c:	0800a303 	.word	0x0800a303
 8008990:	0800a435 	.word	0x0800a435
 8008994:	0800a446 	.word	0x0800a446
 8008998:	1e6f      	subs	r7, r5, #1
 800899a:	f1b9 0f00 	cmp.w	r9, #0
 800899e:	d130      	bne.n	8008a02 <__gethex+0x326>
 80089a0:	b127      	cbz	r7, 80089ac <__gethex+0x2d0>
 80089a2:	4639      	mov	r1, r7
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 fec4 	bl	8009732 <__any_on>
 80089aa:	4681      	mov	r9, r0
 80089ac:	117a      	asrs	r2, r7, #5
 80089ae:	2301      	movs	r3, #1
 80089b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80089b4:	f007 071f 	and.w	r7, r7, #31
 80089b8:	40bb      	lsls	r3, r7
 80089ba:	4213      	tst	r3, r2
 80089bc:	4629      	mov	r1, r5
 80089be:	4620      	mov	r0, r4
 80089c0:	bf18      	it	ne
 80089c2:	f049 0902 	orrne.w	r9, r9, #2
 80089c6:	f7ff fe21 	bl	800860c <rshift>
 80089ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80089ce:	1b76      	subs	r6, r6, r5
 80089d0:	2502      	movs	r5, #2
 80089d2:	f1b9 0f00 	cmp.w	r9, #0
 80089d6:	d047      	beq.n	8008a68 <__gethex+0x38c>
 80089d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d015      	beq.n	8008a0c <__gethex+0x330>
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d017      	beq.n	8008a14 <__gethex+0x338>
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d109      	bne.n	80089fc <__gethex+0x320>
 80089e8:	f019 0f02 	tst.w	r9, #2
 80089ec:	d006      	beq.n	80089fc <__gethex+0x320>
 80089ee:	f8da 3000 	ldr.w	r3, [sl]
 80089f2:	ea49 0903 	orr.w	r9, r9, r3
 80089f6:	f019 0f01 	tst.w	r9, #1
 80089fa:	d10e      	bne.n	8008a1a <__gethex+0x33e>
 80089fc:	f045 0510 	orr.w	r5, r5, #16
 8008a00:	e032      	b.n	8008a68 <__gethex+0x38c>
 8008a02:	f04f 0901 	mov.w	r9, #1
 8008a06:	e7d1      	b.n	80089ac <__gethex+0x2d0>
 8008a08:	2501      	movs	r5, #1
 8008a0a:	e7e2      	b.n	80089d2 <__gethex+0x2f6>
 8008a0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a0e:	f1c3 0301 	rsb	r3, r3, #1
 8008a12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0f0      	beq.n	80089fc <__gethex+0x320>
 8008a1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a1e:	f104 0314 	add.w	r3, r4, #20
 8008a22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008a26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008a2a:	f04f 0c00 	mov.w	ip, #0
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a34:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008a38:	d01b      	beq.n	8008a72 <__gethex+0x396>
 8008a3a:	3201      	adds	r2, #1
 8008a3c:	6002      	str	r2, [r0, #0]
 8008a3e:	2d02      	cmp	r5, #2
 8008a40:	f104 0314 	add.w	r3, r4, #20
 8008a44:	d13c      	bne.n	8008ac0 <__gethex+0x3e4>
 8008a46:	f8d8 2000 	ldr.w	r2, [r8]
 8008a4a:	3a01      	subs	r2, #1
 8008a4c:	42b2      	cmp	r2, r6
 8008a4e:	d109      	bne.n	8008a64 <__gethex+0x388>
 8008a50:	1171      	asrs	r1, r6, #5
 8008a52:	2201      	movs	r2, #1
 8008a54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a58:	f006 061f 	and.w	r6, r6, #31
 8008a5c:	fa02 f606 	lsl.w	r6, r2, r6
 8008a60:	421e      	tst	r6, r3
 8008a62:	d13a      	bne.n	8008ada <__gethex+0x3fe>
 8008a64:	f045 0520 	orr.w	r5, r5, #32
 8008a68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a6a:	601c      	str	r4, [r3, #0]
 8008a6c:	9b02      	ldr	r3, [sp, #8]
 8008a6e:	601f      	str	r7, [r3, #0]
 8008a70:	e6b0      	b.n	80087d4 <__gethex+0xf8>
 8008a72:	4299      	cmp	r1, r3
 8008a74:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a78:	d8d9      	bhi.n	8008a2e <__gethex+0x352>
 8008a7a:	68a3      	ldr	r3, [r4, #8]
 8008a7c:	459b      	cmp	fp, r3
 8008a7e:	db17      	blt.n	8008ab0 <__gethex+0x3d4>
 8008a80:	6861      	ldr	r1, [r4, #4]
 8008a82:	9801      	ldr	r0, [sp, #4]
 8008a84:	3101      	adds	r1, #1
 8008a86:	f000 f9c3 	bl	8008e10 <_Balloc>
 8008a8a:	4681      	mov	r9, r0
 8008a8c:	b918      	cbnz	r0, 8008a96 <__gethex+0x3ba>
 8008a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008af8 <__gethex+0x41c>)
 8008a90:	4602      	mov	r2, r0
 8008a92:	2184      	movs	r1, #132	@ 0x84
 8008a94:	e6c5      	b.n	8008822 <__gethex+0x146>
 8008a96:	6922      	ldr	r2, [r4, #16]
 8008a98:	3202      	adds	r2, #2
 8008a9a:	f104 010c 	add.w	r1, r4, #12
 8008a9e:	0092      	lsls	r2, r2, #2
 8008aa0:	300c      	adds	r0, #12
 8008aa2:	f7fe fee4 	bl	800786e <memcpy>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	9801      	ldr	r0, [sp, #4]
 8008aaa:	f000 f9f1 	bl	8008e90 <_Bfree>
 8008aae:	464c      	mov	r4, r9
 8008ab0:	6923      	ldr	r3, [r4, #16]
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ab8:	6122      	str	r2, [r4, #16]
 8008aba:	2201      	movs	r2, #1
 8008abc:	615a      	str	r2, [r3, #20]
 8008abe:	e7be      	b.n	8008a3e <__gethex+0x362>
 8008ac0:	6922      	ldr	r2, [r4, #16]
 8008ac2:	455a      	cmp	r2, fp
 8008ac4:	dd0b      	ble.n	8008ade <__gethex+0x402>
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f7ff fd9f 	bl	800860c <rshift>
 8008ace:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ad2:	3701      	adds	r7, #1
 8008ad4:	42bb      	cmp	r3, r7
 8008ad6:	f6ff aee0 	blt.w	800889a <__gethex+0x1be>
 8008ada:	2501      	movs	r5, #1
 8008adc:	e7c2      	b.n	8008a64 <__gethex+0x388>
 8008ade:	f016 061f 	ands.w	r6, r6, #31
 8008ae2:	d0fa      	beq.n	8008ada <__gethex+0x3fe>
 8008ae4:	4453      	add	r3, sl
 8008ae6:	f1c6 0620 	rsb	r6, r6, #32
 8008aea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008aee:	f000 fa81 	bl	8008ff4 <__hi0bits>
 8008af2:	42b0      	cmp	r0, r6
 8008af4:	dbe7      	blt.n	8008ac6 <__gethex+0x3ea>
 8008af6:	e7f0      	b.n	8008ada <__gethex+0x3fe>
 8008af8:	0800a435 	.word	0x0800a435

08008afc <L_shift>:
 8008afc:	f1c2 0208 	rsb	r2, r2, #8
 8008b00:	0092      	lsls	r2, r2, #2
 8008b02:	b570      	push	{r4, r5, r6, lr}
 8008b04:	f1c2 0620 	rsb	r6, r2, #32
 8008b08:	6843      	ldr	r3, [r0, #4]
 8008b0a:	6804      	ldr	r4, [r0, #0]
 8008b0c:	fa03 f506 	lsl.w	r5, r3, r6
 8008b10:	432c      	orrs	r4, r5
 8008b12:	40d3      	lsrs	r3, r2
 8008b14:	6004      	str	r4, [r0, #0]
 8008b16:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b1a:	4288      	cmp	r0, r1
 8008b1c:	d3f4      	bcc.n	8008b08 <L_shift+0xc>
 8008b1e:	bd70      	pop	{r4, r5, r6, pc}

08008b20 <__match>:
 8008b20:	b530      	push	{r4, r5, lr}
 8008b22:	6803      	ldr	r3, [r0, #0]
 8008b24:	3301      	adds	r3, #1
 8008b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b2a:	b914      	cbnz	r4, 8008b32 <__match+0x12>
 8008b2c:	6003      	str	r3, [r0, #0]
 8008b2e:	2001      	movs	r0, #1
 8008b30:	bd30      	pop	{r4, r5, pc}
 8008b32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008b3a:	2d19      	cmp	r5, #25
 8008b3c:	bf98      	it	ls
 8008b3e:	3220      	addls	r2, #32
 8008b40:	42a2      	cmp	r2, r4
 8008b42:	d0f0      	beq.n	8008b26 <__match+0x6>
 8008b44:	2000      	movs	r0, #0
 8008b46:	e7f3      	b.n	8008b30 <__match+0x10>

08008b48 <__hexnan>:
 8008b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4c:	680b      	ldr	r3, [r1, #0]
 8008b4e:	6801      	ldr	r1, [r0, #0]
 8008b50:	115e      	asrs	r6, r3, #5
 8008b52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b56:	f013 031f 	ands.w	r3, r3, #31
 8008b5a:	b087      	sub	sp, #28
 8008b5c:	bf18      	it	ne
 8008b5e:	3604      	addne	r6, #4
 8008b60:	2500      	movs	r5, #0
 8008b62:	1f37      	subs	r7, r6, #4
 8008b64:	4682      	mov	sl, r0
 8008b66:	4690      	mov	r8, r2
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b6e:	46b9      	mov	r9, r7
 8008b70:	463c      	mov	r4, r7
 8008b72:	9502      	str	r5, [sp, #8]
 8008b74:	46ab      	mov	fp, r5
 8008b76:	784a      	ldrb	r2, [r1, #1]
 8008b78:	1c4b      	adds	r3, r1, #1
 8008b7a:	9303      	str	r3, [sp, #12]
 8008b7c:	b342      	cbz	r2, 8008bd0 <__hexnan+0x88>
 8008b7e:	4610      	mov	r0, r2
 8008b80:	9105      	str	r1, [sp, #20]
 8008b82:	9204      	str	r2, [sp, #16]
 8008b84:	f7ff fd94 	bl	80086b0 <__hexdig_fun>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	d151      	bne.n	8008c30 <__hexnan+0xe8>
 8008b8c:	9a04      	ldr	r2, [sp, #16]
 8008b8e:	9905      	ldr	r1, [sp, #20]
 8008b90:	2a20      	cmp	r2, #32
 8008b92:	d818      	bhi.n	8008bc6 <__hexnan+0x7e>
 8008b94:	9b02      	ldr	r3, [sp, #8]
 8008b96:	459b      	cmp	fp, r3
 8008b98:	dd13      	ble.n	8008bc2 <__hexnan+0x7a>
 8008b9a:	454c      	cmp	r4, r9
 8008b9c:	d206      	bcs.n	8008bac <__hexnan+0x64>
 8008b9e:	2d07      	cmp	r5, #7
 8008ba0:	dc04      	bgt.n	8008bac <__hexnan+0x64>
 8008ba2:	462a      	mov	r2, r5
 8008ba4:	4649      	mov	r1, r9
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f7ff ffa8 	bl	8008afc <L_shift>
 8008bac:	4544      	cmp	r4, r8
 8008bae:	d952      	bls.n	8008c56 <__hexnan+0x10e>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	f1a4 0904 	sub.w	r9, r4, #4
 8008bb6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008bba:	f8cd b008 	str.w	fp, [sp, #8]
 8008bbe:	464c      	mov	r4, r9
 8008bc0:	461d      	mov	r5, r3
 8008bc2:	9903      	ldr	r1, [sp, #12]
 8008bc4:	e7d7      	b.n	8008b76 <__hexnan+0x2e>
 8008bc6:	2a29      	cmp	r2, #41	@ 0x29
 8008bc8:	d157      	bne.n	8008c7a <__hexnan+0x132>
 8008bca:	3102      	adds	r1, #2
 8008bcc:	f8ca 1000 	str.w	r1, [sl]
 8008bd0:	f1bb 0f00 	cmp.w	fp, #0
 8008bd4:	d051      	beq.n	8008c7a <__hexnan+0x132>
 8008bd6:	454c      	cmp	r4, r9
 8008bd8:	d206      	bcs.n	8008be8 <__hexnan+0xa0>
 8008bda:	2d07      	cmp	r5, #7
 8008bdc:	dc04      	bgt.n	8008be8 <__hexnan+0xa0>
 8008bde:	462a      	mov	r2, r5
 8008be0:	4649      	mov	r1, r9
 8008be2:	4620      	mov	r0, r4
 8008be4:	f7ff ff8a 	bl	8008afc <L_shift>
 8008be8:	4544      	cmp	r4, r8
 8008bea:	d936      	bls.n	8008c5a <__hexnan+0x112>
 8008bec:	f1a8 0204 	sub.w	r2, r8, #4
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008bf6:	f842 1f04 	str.w	r1, [r2, #4]!
 8008bfa:	429f      	cmp	r7, r3
 8008bfc:	d2f9      	bcs.n	8008bf2 <__hexnan+0xaa>
 8008bfe:	1b3b      	subs	r3, r7, r4
 8008c00:	f023 0303 	bic.w	r3, r3, #3
 8008c04:	3304      	adds	r3, #4
 8008c06:	3401      	adds	r4, #1
 8008c08:	3e03      	subs	r6, #3
 8008c0a:	42b4      	cmp	r4, r6
 8008c0c:	bf88      	it	hi
 8008c0e:	2304      	movhi	r3, #4
 8008c10:	4443      	add	r3, r8
 8008c12:	2200      	movs	r2, #0
 8008c14:	f843 2b04 	str.w	r2, [r3], #4
 8008c18:	429f      	cmp	r7, r3
 8008c1a:	d2fb      	bcs.n	8008c14 <__hexnan+0xcc>
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	b91b      	cbnz	r3, 8008c28 <__hexnan+0xe0>
 8008c20:	4547      	cmp	r7, r8
 8008c22:	d128      	bne.n	8008c76 <__hexnan+0x12e>
 8008c24:	2301      	movs	r3, #1
 8008c26:	603b      	str	r3, [r7, #0]
 8008c28:	2005      	movs	r0, #5
 8008c2a:	b007      	add	sp, #28
 8008c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c30:	3501      	adds	r5, #1
 8008c32:	2d08      	cmp	r5, #8
 8008c34:	f10b 0b01 	add.w	fp, fp, #1
 8008c38:	dd06      	ble.n	8008c48 <__hexnan+0x100>
 8008c3a:	4544      	cmp	r4, r8
 8008c3c:	d9c1      	bls.n	8008bc2 <__hexnan+0x7a>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c44:	2501      	movs	r5, #1
 8008c46:	3c04      	subs	r4, #4
 8008c48:	6822      	ldr	r2, [r4, #0]
 8008c4a:	f000 000f 	and.w	r0, r0, #15
 8008c4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008c52:	6020      	str	r0, [r4, #0]
 8008c54:	e7b5      	b.n	8008bc2 <__hexnan+0x7a>
 8008c56:	2508      	movs	r5, #8
 8008c58:	e7b3      	b.n	8008bc2 <__hexnan+0x7a>
 8008c5a:	9b01      	ldr	r3, [sp, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d0dd      	beq.n	8008c1c <__hexnan+0xd4>
 8008c60:	f1c3 0320 	rsb	r3, r3, #32
 8008c64:	f04f 32ff 	mov.w	r2, #4294967295
 8008c68:	40da      	lsrs	r2, r3
 8008c6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	f846 3c04 	str.w	r3, [r6, #-4]
 8008c74:	e7d2      	b.n	8008c1c <__hexnan+0xd4>
 8008c76:	3f04      	subs	r7, #4
 8008c78:	e7d0      	b.n	8008c1c <__hexnan+0xd4>
 8008c7a:	2004      	movs	r0, #4
 8008c7c:	e7d5      	b.n	8008c2a <__hexnan+0xe2>
	...

08008c80 <malloc>:
 8008c80:	4b02      	ldr	r3, [pc, #8]	@ (8008c8c <malloc+0xc>)
 8008c82:	4601      	mov	r1, r0
 8008c84:	6818      	ldr	r0, [r3, #0]
 8008c86:	f000 b825 	b.w	8008cd4 <_malloc_r>
 8008c8a:	bf00      	nop
 8008c8c:	20000190 	.word	0x20000190

08008c90 <sbrk_aligned>:
 8008c90:	b570      	push	{r4, r5, r6, lr}
 8008c92:	4e0f      	ldr	r6, [pc, #60]	@ (8008cd0 <sbrk_aligned+0x40>)
 8008c94:	460c      	mov	r4, r1
 8008c96:	6831      	ldr	r1, [r6, #0]
 8008c98:	4605      	mov	r5, r0
 8008c9a:	b911      	cbnz	r1, 8008ca2 <sbrk_aligned+0x12>
 8008c9c:	f001 f96c 	bl	8009f78 <_sbrk_r>
 8008ca0:	6030      	str	r0, [r6, #0]
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	f001 f967 	bl	8009f78 <_sbrk_r>
 8008caa:	1c43      	adds	r3, r0, #1
 8008cac:	d103      	bne.n	8008cb6 <sbrk_aligned+0x26>
 8008cae:	f04f 34ff 	mov.w	r4, #4294967295
 8008cb2:	4620      	mov	r0, r4
 8008cb4:	bd70      	pop	{r4, r5, r6, pc}
 8008cb6:	1cc4      	adds	r4, r0, #3
 8008cb8:	f024 0403 	bic.w	r4, r4, #3
 8008cbc:	42a0      	cmp	r0, r4
 8008cbe:	d0f8      	beq.n	8008cb2 <sbrk_aligned+0x22>
 8008cc0:	1a21      	subs	r1, r4, r0
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f001 f958 	bl	8009f78 <_sbrk_r>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	d1f2      	bne.n	8008cb2 <sbrk_aligned+0x22>
 8008ccc:	e7ef      	b.n	8008cae <sbrk_aligned+0x1e>
 8008cce:	bf00      	nop
 8008cd0:	20000748 	.word	0x20000748

08008cd4 <_malloc_r>:
 8008cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cd8:	1ccd      	adds	r5, r1, #3
 8008cda:	f025 0503 	bic.w	r5, r5, #3
 8008cde:	3508      	adds	r5, #8
 8008ce0:	2d0c      	cmp	r5, #12
 8008ce2:	bf38      	it	cc
 8008ce4:	250c      	movcc	r5, #12
 8008ce6:	2d00      	cmp	r5, #0
 8008ce8:	4606      	mov	r6, r0
 8008cea:	db01      	blt.n	8008cf0 <_malloc_r+0x1c>
 8008cec:	42a9      	cmp	r1, r5
 8008cee:	d904      	bls.n	8008cfa <_malloc_r+0x26>
 8008cf0:	230c      	movs	r3, #12
 8008cf2:	6033      	str	r3, [r6, #0]
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008dd0 <_malloc_r+0xfc>
 8008cfe:	f000 f87b 	bl	8008df8 <__malloc_lock>
 8008d02:	f8d8 3000 	ldr.w	r3, [r8]
 8008d06:	461c      	mov	r4, r3
 8008d08:	bb44      	cbnz	r4, 8008d5c <_malloc_r+0x88>
 8008d0a:	4629      	mov	r1, r5
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	f7ff ffbf 	bl	8008c90 <sbrk_aligned>
 8008d12:	1c43      	adds	r3, r0, #1
 8008d14:	4604      	mov	r4, r0
 8008d16:	d158      	bne.n	8008dca <_malloc_r+0xf6>
 8008d18:	f8d8 4000 	ldr.w	r4, [r8]
 8008d1c:	4627      	mov	r7, r4
 8008d1e:	2f00      	cmp	r7, #0
 8008d20:	d143      	bne.n	8008daa <_malloc_r+0xd6>
 8008d22:	2c00      	cmp	r4, #0
 8008d24:	d04b      	beq.n	8008dbe <_malloc_r+0xea>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	4639      	mov	r1, r7
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	eb04 0903 	add.w	r9, r4, r3
 8008d30:	f001 f922 	bl	8009f78 <_sbrk_r>
 8008d34:	4581      	cmp	r9, r0
 8008d36:	d142      	bne.n	8008dbe <_malloc_r+0xea>
 8008d38:	6821      	ldr	r1, [r4, #0]
 8008d3a:	1a6d      	subs	r5, r5, r1
 8008d3c:	4629      	mov	r1, r5
 8008d3e:	4630      	mov	r0, r6
 8008d40:	f7ff ffa6 	bl	8008c90 <sbrk_aligned>
 8008d44:	3001      	adds	r0, #1
 8008d46:	d03a      	beq.n	8008dbe <_malloc_r+0xea>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	442b      	add	r3, r5
 8008d4c:	6023      	str	r3, [r4, #0]
 8008d4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d52:	685a      	ldr	r2, [r3, #4]
 8008d54:	bb62      	cbnz	r2, 8008db0 <_malloc_r+0xdc>
 8008d56:	f8c8 7000 	str.w	r7, [r8]
 8008d5a:	e00f      	b.n	8008d7c <_malloc_r+0xa8>
 8008d5c:	6822      	ldr	r2, [r4, #0]
 8008d5e:	1b52      	subs	r2, r2, r5
 8008d60:	d420      	bmi.n	8008da4 <_malloc_r+0xd0>
 8008d62:	2a0b      	cmp	r2, #11
 8008d64:	d917      	bls.n	8008d96 <_malloc_r+0xc2>
 8008d66:	1961      	adds	r1, r4, r5
 8008d68:	42a3      	cmp	r3, r4
 8008d6a:	6025      	str	r5, [r4, #0]
 8008d6c:	bf18      	it	ne
 8008d6e:	6059      	strne	r1, [r3, #4]
 8008d70:	6863      	ldr	r3, [r4, #4]
 8008d72:	bf08      	it	eq
 8008d74:	f8c8 1000 	streq.w	r1, [r8]
 8008d78:	5162      	str	r2, [r4, r5]
 8008d7a:	604b      	str	r3, [r1, #4]
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f000 f841 	bl	8008e04 <__malloc_unlock>
 8008d82:	f104 000b 	add.w	r0, r4, #11
 8008d86:	1d23      	adds	r3, r4, #4
 8008d88:	f020 0007 	bic.w	r0, r0, #7
 8008d8c:	1ac2      	subs	r2, r0, r3
 8008d8e:	bf1c      	itt	ne
 8008d90:	1a1b      	subne	r3, r3, r0
 8008d92:	50a3      	strne	r3, [r4, r2]
 8008d94:	e7af      	b.n	8008cf6 <_malloc_r+0x22>
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	42a3      	cmp	r3, r4
 8008d9a:	bf0c      	ite	eq
 8008d9c:	f8c8 2000 	streq.w	r2, [r8]
 8008da0:	605a      	strne	r2, [r3, #4]
 8008da2:	e7eb      	b.n	8008d7c <_malloc_r+0xa8>
 8008da4:	4623      	mov	r3, r4
 8008da6:	6864      	ldr	r4, [r4, #4]
 8008da8:	e7ae      	b.n	8008d08 <_malloc_r+0x34>
 8008daa:	463c      	mov	r4, r7
 8008dac:	687f      	ldr	r7, [r7, #4]
 8008dae:	e7b6      	b.n	8008d1e <_malloc_r+0x4a>
 8008db0:	461a      	mov	r2, r3
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	d1fb      	bne.n	8008db0 <_malloc_r+0xdc>
 8008db8:	2300      	movs	r3, #0
 8008dba:	6053      	str	r3, [r2, #4]
 8008dbc:	e7de      	b.n	8008d7c <_malloc_r+0xa8>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	6033      	str	r3, [r6, #0]
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	f000 f81e 	bl	8008e04 <__malloc_unlock>
 8008dc8:	e794      	b.n	8008cf4 <_malloc_r+0x20>
 8008dca:	6005      	str	r5, [r0, #0]
 8008dcc:	e7d6      	b.n	8008d7c <_malloc_r+0xa8>
 8008dce:	bf00      	nop
 8008dd0:	2000074c 	.word	0x2000074c

08008dd4 <__ascii_mbtowc>:
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	b901      	cbnz	r1, 8008dda <__ascii_mbtowc+0x6>
 8008dd8:	a901      	add	r1, sp, #4
 8008dda:	b142      	cbz	r2, 8008dee <__ascii_mbtowc+0x1a>
 8008ddc:	b14b      	cbz	r3, 8008df2 <__ascii_mbtowc+0x1e>
 8008dde:	7813      	ldrb	r3, [r2, #0]
 8008de0:	600b      	str	r3, [r1, #0]
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	1e10      	subs	r0, r2, #0
 8008de6:	bf18      	it	ne
 8008de8:	2001      	movne	r0, #1
 8008dea:	b002      	add	sp, #8
 8008dec:	4770      	bx	lr
 8008dee:	4610      	mov	r0, r2
 8008df0:	e7fb      	b.n	8008dea <__ascii_mbtowc+0x16>
 8008df2:	f06f 0001 	mvn.w	r0, #1
 8008df6:	e7f8      	b.n	8008dea <__ascii_mbtowc+0x16>

08008df8 <__malloc_lock>:
 8008df8:	4801      	ldr	r0, [pc, #4]	@ (8008e00 <__malloc_lock+0x8>)
 8008dfa:	f7fe bd36 	b.w	800786a <__retarget_lock_acquire_recursive>
 8008dfe:	bf00      	nop
 8008e00:	20000744 	.word	0x20000744

08008e04 <__malloc_unlock>:
 8008e04:	4801      	ldr	r0, [pc, #4]	@ (8008e0c <__malloc_unlock+0x8>)
 8008e06:	f7fe bd31 	b.w	800786c <__retarget_lock_release_recursive>
 8008e0a:	bf00      	nop
 8008e0c:	20000744 	.word	0x20000744

08008e10 <_Balloc>:
 8008e10:	b570      	push	{r4, r5, r6, lr}
 8008e12:	69c6      	ldr	r6, [r0, #28]
 8008e14:	4604      	mov	r4, r0
 8008e16:	460d      	mov	r5, r1
 8008e18:	b976      	cbnz	r6, 8008e38 <_Balloc+0x28>
 8008e1a:	2010      	movs	r0, #16
 8008e1c:	f7ff ff30 	bl	8008c80 <malloc>
 8008e20:	4602      	mov	r2, r0
 8008e22:	61e0      	str	r0, [r4, #28]
 8008e24:	b920      	cbnz	r0, 8008e30 <_Balloc+0x20>
 8008e26:	4b18      	ldr	r3, [pc, #96]	@ (8008e88 <_Balloc+0x78>)
 8008e28:	4818      	ldr	r0, [pc, #96]	@ (8008e8c <_Balloc+0x7c>)
 8008e2a:	216b      	movs	r1, #107	@ 0x6b
 8008e2c:	f7fe fd38 	bl	80078a0 <__assert_func>
 8008e30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e34:	6006      	str	r6, [r0, #0]
 8008e36:	60c6      	str	r6, [r0, #12]
 8008e38:	69e6      	ldr	r6, [r4, #28]
 8008e3a:	68f3      	ldr	r3, [r6, #12]
 8008e3c:	b183      	cbz	r3, 8008e60 <_Balloc+0x50>
 8008e3e:	69e3      	ldr	r3, [r4, #28]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e46:	b9b8      	cbnz	r0, 8008e78 <_Balloc+0x68>
 8008e48:	2101      	movs	r1, #1
 8008e4a:	fa01 f605 	lsl.w	r6, r1, r5
 8008e4e:	1d72      	adds	r2, r6, #5
 8008e50:	0092      	lsls	r2, r2, #2
 8008e52:	4620      	mov	r0, r4
 8008e54:	f001 f8a7 	bl	8009fa6 <_calloc_r>
 8008e58:	b160      	cbz	r0, 8008e74 <_Balloc+0x64>
 8008e5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e5e:	e00e      	b.n	8008e7e <_Balloc+0x6e>
 8008e60:	2221      	movs	r2, #33	@ 0x21
 8008e62:	2104      	movs	r1, #4
 8008e64:	4620      	mov	r0, r4
 8008e66:	f001 f89e 	bl	8009fa6 <_calloc_r>
 8008e6a:	69e3      	ldr	r3, [r4, #28]
 8008e6c:	60f0      	str	r0, [r6, #12]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1e4      	bne.n	8008e3e <_Balloc+0x2e>
 8008e74:	2000      	movs	r0, #0
 8008e76:	bd70      	pop	{r4, r5, r6, pc}
 8008e78:	6802      	ldr	r2, [r0, #0]
 8008e7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e7e:	2300      	movs	r3, #0
 8008e80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e84:	e7f7      	b.n	8008e76 <_Balloc+0x66>
 8008e86:	bf00      	nop
 8008e88:	0800a294 	.word	0x0800a294
 8008e8c:	0800a4a6 	.word	0x0800a4a6

08008e90 <_Bfree>:
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	69c6      	ldr	r6, [r0, #28]
 8008e94:	4605      	mov	r5, r0
 8008e96:	460c      	mov	r4, r1
 8008e98:	b976      	cbnz	r6, 8008eb8 <_Bfree+0x28>
 8008e9a:	2010      	movs	r0, #16
 8008e9c:	f7ff fef0 	bl	8008c80 <malloc>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	61e8      	str	r0, [r5, #28]
 8008ea4:	b920      	cbnz	r0, 8008eb0 <_Bfree+0x20>
 8008ea6:	4b09      	ldr	r3, [pc, #36]	@ (8008ecc <_Bfree+0x3c>)
 8008ea8:	4809      	ldr	r0, [pc, #36]	@ (8008ed0 <_Bfree+0x40>)
 8008eaa:	218f      	movs	r1, #143	@ 0x8f
 8008eac:	f7fe fcf8 	bl	80078a0 <__assert_func>
 8008eb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008eb4:	6006      	str	r6, [r0, #0]
 8008eb6:	60c6      	str	r6, [r0, #12]
 8008eb8:	b13c      	cbz	r4, 8008eca <_Bfree+0x3a>
 8008eba:	69eb      	ldr	r3, [r5, #28]
 8008ebc:	6862      	ldr	r2, [r4, #4]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ec4:	6021      	str	r1, [r4, #0]
 8008ec6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
 8008ecc:	0800a294 	.word	0x0800a294
 8008ed0:	0800a4a6 	.word	0x0800a4a6

08008ed4 <__multadd>:
 8008ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ed8:	690d      	ldr	r5, [r1, #16]
 8008eda:	4607      	mov	r7, r0
 8008edc:	460c      	mov	r4, r1
 8008ede:	461e      	mov	r6, r3
 8008ee0:	f101 0c14 	add.w	ip, r1, #20
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	f8dc 3000 	ldr.w	r3, [ip]
 8008eea:	b299      	uxth	r1, r3
 8008eec:	fb02 6101 	mla	r1, r2, r1, r6
 8008ef0:	0c1e      	lsrs	r6, r3, #16
 8008ef2:	0c0b      	lsrs	r3, r1, #16
 8008ef4:	fb02 3306 	mla	r3, r2, r6, r3
 8008ef8:	b289      	uxth	r1, r1
 8008efa:	3001      	adds	r0, #1
 8008efc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f00:	4285      	cmp	r5, r0
 8008f02:	f84c 1b04 	str.w	r1, [ip], #4
 8008f06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f0a:	dcec      	bgt.n	8008ee6 <__multadd+0x12>
 8008f0c:	b30e      	cbz	r6, 8008f52 <__multadd+0x7e>
 8008f0e:	68a3      	ldr	r3, [r4, #8]
 8008f10:	42ab      	cmp	r3, r5
 8008f12:	dc19      	bgt.n	8008f48 <__multadd+0x74>
 8008f14:	6861      	ldr	r1, [r4, #4]
 8008f16:	4638      	mov	r0, r7
 8008f18:	3101      	adds	r1, #1
 8008f1a:	f7ff ff79 	bl	8008e10 <_Balloc>
 8008f1e:	4680      	mov	r8, r0
 8008f20:	b928      	cbnz	r0, 8008f2e <__multadd+0x5a>
 8008f22:	4602      	mov	r2, r0
 8008f24:	4b0c      	ldr	r3, [pc, #48]	@ (8008f58 <__multadd+0x84>)
 8008f26:	480d      	ldr	r0, [pc, #52]	@ (8008f5c <__multadd+0x88>)
 8008f28:	21ba      	movs	r1, #186	@ 0xba
 8008f2a:	f7fe fcb9 	bl	80078a0 <__assert_func>
 8008f2e:	6922      	ldr	r2, [r4, #16]
 8008f30:	3202      	adds	r2, #2
 8008f32:	f104 010c 	add.w	r1, r4, #12
 8008f36:	0092      	lsls	r2, r2, #2
 8008f38:	300c      	adds	r0, #12
 8008f3a:	f7fe fc98 	bl	800786e <memcpy>
 8008f3e:	4621      	mov	r1, r4
 8008f40:	4638      	mov	r0, r7
 8008f42:	f7ff ffa5 	bl	8008e90 <_Bfree>
 8008f46:	4644      	mov	r4, r8
 8008f48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f4c:	3501      	adds	r5, #1
 8008f4e:	615e      	str	r6, [r3, #20]
 8008f50:	6125      	str	r5, [r4, #16]
 8008f52:	4620      	mov	r0, r4
 8008f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f58:	0800a435 	.word	0x0800a435
 8008f5c:	0800a4a6 	.word	0x0800a4a6

08008f60 <__s2b>:
 8008f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f64:	460c      	mov	r4, r1
 8008f66:	4615      	mov	r5, r2
 8008f68:	461f      	mov	r7, r3
 8008f6a:	2209      	movs	r2, #9
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	4606      	mov	r6, r0
 8008f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f74:	2100      	movs	r1, #0
 8008f76:	2201      	movs	r2, #1
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	db09      	blt.n	8008f90 <__s2b+0x30>
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7ff ff47 	bl	8008e10 <_Balloc>
 8008f82:	b940      	cbnz	r0, 8008f96 <__s2b+0x36>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4b19      	ldr	r3, [pc, #100]	@ (8008fec <__s2b+0x8c>)
 8008f88:	4819      	ldr	r0, [pc, #100]	@ (8008ff0 <__s2b+0x90>)
 8008f8a:	21d3      	movs	r1, #211	@ 0xd3
 8008f8c:	f7fe fc88 	bl	80078a0 <__assert_func>
 8008f90:	0052      	lsls	r2, r2, #1
 8008f92:	3101      	adds	r1, #1
 8008f94:	e7f0      	b.n	8008f78 <__s2b+0x18>
 8008f96:	9b08      	ldr	r3, [sp, #32]
 8008f98:	6143      	str	r3, [r0, #20]
 8008f9a:	2d09      	cmp	r5, #9
 8008f9c:	f04f 0301 	mov.w	r3, #1
 8008fa0:	6103      	str	r3, [r0, #16]
 8008fa2:	dd16      	ble.n	8008fd2 <__s2b+0x72>
 8008fa4:	f104 0909 	add.w	r9, r4, #9
 8008fa8:	46c8      	mov	r8, r9
 8008faa:	442c      	add	r4, r5
 8008fac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	3b30      	subs	r3, #48	@ 0x30
 8008fb4:	220a      	movs	r2, #10
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f7ff ff8c 	bl	8008ed4 <__multadd>
 8008fbc:	45a0      	cmp	r8, r4
 8008fbe:	d1f5      	bne.n	8008fac <__s2b+0x4c>
 8008fc0:	f1a5 0408 	sub.w	r4, r5, #8
 8008fc4:	444c      	add	r4, r9
 8008fc6:	1b2d      	subs	r5, r5, r4
 8008fc8:	1963      	adds	r3, r4, r5
 8008fca:	42bb      	cmp	r3, r7
 8008fcc:	db04      	blt.n	8008fd8 <__s2b+0x78>
 8008fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fd2:	340a      	adds	r4, #10
 8008fd4:	2509      	movs	r5, #9
 8008fd6:	e7f6      	b.n	8008fc6 <__s2b+0x66>
 8008fd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008fdc:	4601      	mov	r1, r0
 8008fde:	3b30      	subs	r3, #48	@ 0x30
 8008fe0:	220a      	movs	r2, #10
 8008fe2:	4630      	mov	r0, r6
 8008fe4:	f7ff ff76 	bl	8008ed4 <__multadd>
 8008fe8:	e7ee      	b.n	8008fc8 <__s2b+0x68>
 8008fea:	bf00      	nop
 8008fec:	0800a435 	.word	0x0800a435
 8008ff0:	0800a4a6 	.word	0x0800a4a6

08008ff4 <__hi0bits>:
 8008ff4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	bf36      	itet	cc
 8008ffc:	0403      	lslcc	r3, r0, #16
 8008ffe:	2000      	movcs	r0, #0
 8009000:	2010      	movcc	r0, #16
 8009002:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009006:	bf3c      	itt	cc
 8009008:	021b      	lslcc	r3, r3, #8
 800900a:	3008      	addcc	r0, #8
 800900c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009010:	bf3c      	itt	cc
 8009012:	011b      	lslcc	r3, r3, #4
 8009014:	3004      	addcc	r0, #4
 8009016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800901a:	bf3c      	itt	cc
 800901c:	009b      	lslcc	r3, r3, #2
 800901e:	3002      	addcc	r0, #2
 8009020:	2b00      	cmp	r3, #0
 8009022:	db05      	blt.n	8009030 <__hi0bits+0x3c>
 8009024:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009028:	f100 0001 	add.w	r0, r0, #1
 800902c:	bf08      	it	eq
 800902e:	2020      	moveq	r0, #32
 8009030:	4770      	bx	lr

08009032 <__lo0bits>:
 8009032:	6803      	ldr	r3, [r0, #0]
 8009034:	4602      	mov	r2, r0
 8009036:	f013 0007 	ands.w	r0, r3, #7
 800903a:	d00b      	beq.n	8009054 <__lo0bits+0x22>
 800903c:	07d9      	lsls	r1, r3, #31
 800903e:	d421      	bmi.n	8009084 <__lo0bits+0x52>
 8009040:	0798      	lsls	r0, r3, #30
 8009042:	bf49      	itett	mi
 8009044:	085b      	lsrmi	r3, r3, #1
 8009046:	089b      	lsrpl	r3, r3, #2
 8009048:	2001      	movmi	r0, #1
 800904a:	6013      	strmi	r3, [r2, #0]
 800904c:	bf5c      	itt	pl
 800904e:	6013      	strpl	r3, [r2, #0]
 8009050:	2002      	movpl	r0, #2
 8009052:	4770      	bx	lr
 8009054:	b299      	uxth	r1, r3
 8009056:	b909      	cbnz	r1, 800905c <__lo0bits+0x2a>
 8009058:	0c1b      	lsrs	r3, r3, #16
 800905a:	2010      	movs	r0, #16
 800905c:	b2d9      	uxtb	r1, r3
 800905e:	b909      	cbnz	r1, 8009064 <__lo0bits+0x32>
 8009060:	3008      	adds	r0, #8
 8009062:	0a1b      	lsrs	r3, r3, #8
 8009064:	0719      	lsls	r1, r3, #28
 8009066:	bf04      	itt	eq
 8009068:	091b      	lsreq	r3, r3, #4
 800906a:	3004      	addeq	r0, #4
 800906c:	0799      	lsls	r1, r3, #30
 800906e:	bf04      	itt	eq
 8009070:	089b      	lsreq	r3, r3, #2
 8009072:	3002      	addeq	r0, #2
 8009074:	07d9      	lsls	r1, r3, #31
 8009076:	d403      	bmi.n	8009080 <__lo0bits+0x4e>
 8009078:	085b      	lsrs	r3, r3, #1
 800907a:	f100 0001 	add.w	r0, r0, #1
 800907e:	d003      	beq.n	8009088 <__lo0bits+0x56>
 8009080:	6013      	str	r3, [r2, #0]
 8009082:	4770      	bx	lr
 8009084:	2000      	movs	r0, #0
 8009086:	4770      	bx	lr
 8009088:	2020      	movs	r0, #32
 800908a:	4770      	bx	lr

0800908c <__i2b>:
 800908c:	b510      	push	{r4, lr}
 800908e:	460c      	mov	r4, r1
 8009090:	2101      	movs	r1, #1
 8009092:	f7ff febd 	bl	8008e10 <_Balloc>
 8009096:	4602      	mov	r2, r0
 8009098:	b928      	cbnz	r0, 80090a6 <__i2b+0x1a>
 800909a:	4b05      	ldr	r3, [pc, #20]	@ (80090b0 <__i2b+0x24>)
 800909c:	4805      	ldr	r0, [pc, #20]	@ (80090b4 <__i2b+0x28>)
 800909e:	f240 1145 	movw	r1, #325	@ 0x145
 80090a2:	f7fe fbfd 	bl	80078a0 <__assert_func>
 80090a6:	2301      	movs	r3, #1
 80090a8:	6144      	str	r4, [r0, #20]
 80090aa:	6103      	str	r3, [r0, #16]
 80090ac:	bd10      	pop	{r4, pc}
 80090ae:	bf00      	nop
 80090b0:	0800a435 	.word	0x0800a435
 80090b4:	0800a4a6 	.word	0x0800a4a6

080090b8 <__multiply>:
 80090b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090bc:	4614      	mov	r4, r2
 80090be:	690a      	ldr	r2, [r1, #16]
 80090c0:	6923      	ldr	r3, [r4, #16]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	bfa8      	it	ge
 80090c6:	4623      	movge	r3, r4
 80090c8:	460f      	mov	r7, r1
 80090ca:	bfa4      	itt	ge
 80090cc:	460c      	movge	r4, r1
 80090ce:	461f      	movge	r7, r3
 80090d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80090d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80090d8:	68a3      	ldr	r3, [r4, #8]
 80090da:	6861      	ldr	r1, [r4, #4]
 80090dc:	eb0a 0609 	add.w	r6, sl, r9
 80090e0:	42b3      	cmp	r3, r6
 80090e2:	b085      	sub	sp, #20
 80090e4:	bfb8      	it	lt
 80090e6:	3101      	addlt	r1, #1
 80090e8:	f7ff fe92 	bl	8008e10 <_Balloc>
 80090ec:	b930      	cbnz	r0, 80090fc <__multiply+0x44>
 80090ee:	4602      	mov	r2, r0
 80090f0:	4b44      	ldr	r3, [pc, #272]	@ (8009204 <__multiply+0x14c>)
 80090f2:	4845      	ldr	r0, [pc, #276]	@ (8009208 <__multiply+0x150>)
 80090f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80090f8:	f7fe fbd2 	bl	80078a0 <__assert_func>
 80090fc:	f100 0514 	add.w	r5, r0, #20
 8009100:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009104:	462b      	mov	r3, r5
 8009106:	2200      	movs	r2, #0
 8009108:	4543      	cmp	r3, r8
 800910a:	d321      	bcc.n	8009150 <__multiply+0x98>
 800910c:	f107 0114 	add.w	r1, r7, #20
 8009110:	f104 0214 	add.w	r2, r4, #20
 8009114:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009118:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800911c:	9302      	str	r3, [sp, #8]
 800911e:	1b13      	subs	r3, r2, r4
 8009120:	3b15      	subs	r3, #21
 8009122:	f023 0303 	bic.w	r3, r3, #3
 8009126:	3304      	adds	r3, #4
 8009128:	f104 0715 	add.w	r7, r4, #21
 800912c:	42ba      	cmp	r2, r7
 800912e:	bf38      	it	cc
 8009130:	2304      	movcc	r3, #4
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	9b02      	ldr	r3, [sp, #8]
 8009136:	9103      	str	r1, [sp, #12]
 8009138:	428b      	cmp	r3, r1
 800913a:	d80c      	bhi.n	8009156 <__multiply+0x9e>
 800913c:	2e00      	cmp	r6, #0
 800913e:	dd03      	ble.n	8009148 <__multiply+0x90>
 8009140:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009144:	2b00      	cmp	r3, #0
 8009146:	d05b      	beq.n	8009200 <__multiply+0x148>
 8009148:	6106      	str	r6, [r0, #16]
 800914a:	b005      	add	sp, #20
 800914c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009150:	f843 2b04 	str.w	r2, [r3], #4
 8009154:	e7d8      	b.n	8009108 <__multiply+0x50>
 8009156:	f8b1 a000 	ldrh.w	sl, [r1]
 800915a:	f1ba 0f00 	cmp.w	sl, #0
 800915e:	d024      	beq.n	80091aa <__multiply+0xf2>
 8009160:	f104 0e14 	add.w	lr, r4, #20
 8009164:	46a9      	mov	r9, r5
 8009166:	f04f 0c00 	mov.w	ip, #0
 800916a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800916e:	f8d9 3000 	ldr.w	r3, [r9]
 8009172:	fa1f fb87 	uxth.w	fp, r7
 8009176:	b29b      	uxth	r3, r3
 8009178:	fb0a 330b 	mla	r3, sl, fp, r3
 800917c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009180:	f8d9 7000 	ldr.w	r7, [r9]
 8009184:	4463      	add	r3, ip
 8009186:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800918a:	fb0a c70b 	mla	r7, sl, fp, ip
 800918e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009192:	b29b      	uxth	r3, r3
 8009194:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009198:	4572      	cmp	r2, lr
 800919a:	f849 3b04 	str.w	r3, [r9], #4
 800919e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80091a2:	d8e2      	bhi.n	800916a <__multiply+0xb2>
 80091a4:	9b01      	ldr	r3, [sp, #4]
 80091a6:	f845 c003 	str.w	ip, [r5, r3]
 80091aa:	9b03      	ldr	r3, [sp, #12]
 80091ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80091b0:	3104      	adds	r1, #4
 80091b2:	f1b9 0f00 	cmp.w	r9, #0
 80091b6:	d021      	beq.n	80091fc <__multiply+0x144>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	f104 0c14 	add.w	ip, r4, #20
 80091be:	46ae      	mov	lr, r5
 80091c0:	f04f 0a00 	mov.w	sl, #0
 80091c4:	f8bc b000 	ldrh.w	fp, [ip]
 80091c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80091cc:	fb09 770b 	mla	r7, r9, fp, r7
 80091d0:	4457      	add	r7, sl
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80091d8:	f84e 3b04 	str.w	r3, [lr], #4
 80091dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80091e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091e4:	f8be 3000 	ldrh.w	r3, [lr]
 80091e8:	fb09 330a 	mla	r3, r9, sl, r3
 80091ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80091f0:	4562      	cmp	r2, ip
 80091f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091f6:	d8e5      	bhi.n	80091c4 <__multiply+0x10c>
 80091f8:	9f01      	ldr	r7, [sp, #4]
 80091fa:	51eb      	str	r3, [r5, r7]
 80091fc:	3504      	adds	r5, #4
 80091fe:	e799      	b.n	8009134 <__multiply+0x7c>
 8009200:	3e01      	subs	r6, #1
 8009202:	e79b      	b.n	800913c <__multiply+0x84>
 8009204:	0800a435 	.word	0x0800a435
 8009208:	0800a4a6 	.word	0x0800a4a6

0800920c <__pow5mult>:
 800920c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009210:	4615      	mov	r5, r2
 8009212:	f012 0203 	ands.w	r2, r2, #3
 8009216:	4607      	mov	r7, r0
 8009218:	460e      	mov	r6, r1
 800921a:	d007      	beq.n	800922c <__pow5mult+0x20>
 800921c:	4c25      	ldr	r4, [pc, #148]	@ (80092b4 <__pow5mult+0xa8>)
 800921e:	3a01      	subs	r2, #1
 8009220:	2300      	movs	r3, #0
 8009222:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009226:	f7ff fe55 	bl	8008ed4 <__multadd>
 800922a:	4606      	mov	r6, r0
 800922c:	10ad      	asrs	r5, r5, #2
 800922e:	d03d      	beq.n	80092ac <__pow5mult+0xa0>
 8009230:	69fc      	ldr	r4, [r7, #28]
 8009232:	b97c      	cbnz	r4, 8009254 <__pow5mult+0x48>
 8009234:	2010      	movs	r0, #16
 8009236:	f7ff fd23 	bl	8008c80 <malloc>
 800923a:	4602      	mov	r2, r0
 800923c:	61f8      	str	r0, [r7, #28]
 800923e:	b928      	cbnz	r0, 800924c <__pow5mult+0x40>
 8009240:	4b1d      	ldr	r3, [pc, #116]	@ (80092b8 <__pow5mult+0xac>)
 8009242:	481e      	ldr	r0, [pc, #120]	@ (80092bc <__pow5mult+0xb0>)
 8009244:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009248:	f7fe fb2a 	bl	80078a0 <__assert_func>
 800924c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009250:	6004      	str	r4, [r0, #0]
 8009252:	60c4      	str	r4, [r0, #12]
 8009254:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800925c:	b94c      	cbnz	r4, 8009272 <__pow5mult+0x66>
 800925e:	f240 2171 	movw	r1, #625	@ 0x271
 8009262:	4638      	mov	r0, r7
 8009264:	f7ff ff12 	bl	800908c <__i2b>
 8009268:	2300      	movs	r3, #0
 800926a:	f8c8 0008 	str.w	r0, [r8, #8]
 800926e:	4604      	mov	r4, r0
 8009270:	6003      	str	r3, [r0, #0]
 8009272:	f04f 0900 	mov.w	r9, #0
 8009276:	07eb      	lsls	r3, r5, #31
 8009278:	d50a      	bpl.n	8009290 <__pow5mult+0x84>
 800927a:	4631      	mov	r1, r6
 800927c:	4622      	mov	r2, r4
 800927e:	4638      	mov	r0, r7
 8009280:	f7ff ff1a 	bl	80090b8 <__multiply>
 8009284:	4631      	mov	r1, r6
 8009286:	4680      	mov	r8, r0
 8009288:	4638      	mov	r0, r7
 800928a:	f7ff fe01 	bl	8008e90 <_Bfree>
 800928e:	4646      	mov	r6, r8
 8009290:	106d      	asrs	r5, r5, #1
 8009292:	d00b      	beq.n	80092ac <__pow5mult+0xa0>
 8009294:	6820      	ldr	r0, [r4, #0]
 8009296:	b938      	cbnz	r0, 80092a8 <__pow5mult+0x9c>
 8009298:	4622      	mov	r2, r4
 800929a:	4621      	mov	r1, r4
 800929c:	4638      	mov	r0, r7
 800929e:	f7ff ff0b 	bl	80090b8 <__multiply>
 80092a2:	6020      	str	r0, [r4, #0]
 80092a4:	f8c0 9000 	str.w	r9, [r0]
 80092a8:	4604      	mov	r4, r0
 80092aa:	e7e4      	b.n	8009276 <__pow5mult+0x6a>
 80092ac:	4630      	mov	r0, r6
 80092ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092b2:	bf00      	nop
 80092b4:	0800a500 	.word	0x0800a500
 80092b8:	0800a294 	.word	0x0800a294
 80092bc:	0800a4a6 	.word	0x0800a4a6

080092c0 <__lshift>:
 80092c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092c4:	460c      	mov	r4, r1
 80092c6:	6849      	ldr	r1, [r1, #4]
 80092c8:	6923      	ldr	r3, [r4, #16]
 80092ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80092ce:	68a3      	ldr	r3, [r4, #8]
 80092d0:	4607      	mov	r7, r0
 80092d2:	4691      	mov	r9, r2
 80092d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80092d8:	f108 0601 	add.w	r6, r8, #1
 80092dc:	42b3      	cmp	r3, r6
 80092de:	db0b      	blt.n	80092f8 <__lshift+0x38>
 80092e0:	4638      	mov	r0, r7
 80092e2:	f7ff fd95 	bl	8008e10 <_Balloc>
 80092e6:	4605      	mov	r5, r0
 80092e8:	b948      	cbnz	r0, 80092fe <__lshift+0x3e>
 80092ea:	4602      	mov	r2, r0
 80092ec:	4b28      	ldr	r3, [pc, #160]	@ (8009390 <__lshift+0xd0>)
 80092ee:	4829      	ldr	r0, [pc, #164]	@ (8009394 <__lshift+0xd4>)
 80092f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80092f4:	f7fe fad4 	bl	80078a0 <__assert_func>
 80092f8:	3101      	adds	r1, #1
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	e7ee      	b.n	80092dc <__lshift+0x1c>
 80092fe:	2300      	movs	r3, #0
 8009300:	f100 0114 	add.w	r1, r0, #20
 8009304:	f100 0210 	add.w	r2, r0, #16
 8009308:	4618      	mov	r0, r3
 800930a:	4553      	cmp	r3, sl
 800930c:	db33      	blt.n	8009376 <__lshift+0xb6>
 800930e:	6920      	ldr	r0, [r4, #16]
 8009310:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009314:	f104 0314 	add.w	r3, r4, #20
 8009318:	f019 091f 	ands.w	r9, r9, #31
 800931c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009320:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009324:	d02b      	beq.n	800937e <__lshift+0xbe>
 8009326:	f1c9 0e20 	rsb	lr, r9, #32
 800932a:	468a      	mov	sl, r1
 800932c:	2200      	movs	r2, #0
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	fa00 f009 	lsl.w	r0, r0, r9
 8009334:	4310      	orrs	r0, r2
 8009336:	f84a 0b04 	str.w	r0, [sl], #4
 800933a:	f853 2b04 	ldr.w	r2, [r3], #4
 800933e:	459c      	cmp	ip, r3
 8009340:	fa22 f20e 	lsr.w	r2, r2, lr
 8009344:	d8f3      	bhi.n	800932e <__lshift+0x6e>
 8009346:	ebac 0304 	sub.w	r3, ip, r4
 800934a:	3b15      	subs	r3, #21
 800934c:	f023 0303 	bic.w	r3, r3, #3
 8009350:	3304      	adds	r3, #4
 8009352:	f104 0015 	add.w	r0, r4, #21
 8009356:	4584      	cmp	ip, r0
 8009358:	bf38      	it	cc
 800935a:	2304      	movcc	r3, #4
 800935c:	50ca      	str	r2, [r1, r3]
 800935e:	b10a      	cbz	r2, 8009364 <__lshift+0xa4>
 8009360:	f108 0602 	add.w	r6, r8, #2
 8009364:	3e01      	subs	r6, #1
 8009366:	4638      	mov	r0, r7
 8009368:	612e      	str	r6, [r5, #16]
 800936a:	4621      	mov	r1, r4
 800936c:	f7ff fd90 	bl	8008e90 <_Bfree>
 8009370:	4628      	mov	r0, r5
 8009372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009376:	f842 0f04 	str.w	r0, [r2, #4]!
 800937a:	3301      	adds	r3, #1
 800937c:	e7c5      	b.n	800930a <__lshift+0x4a>
 800937e:	3904      	subs	r1, #4
 8009380:	f853 2b04 	ldr.w	r2, [r3], #4
 8009384:	f841 2f04 	str.w	r2, [r1, #4]!
 8009388:	459c      	cmp	ip, r3
 800938a:	d8f9      	bhi.n	8009380 <__lshift+0xc0>
 800938c:	e7ea      	b.n	8009364 <__lshift+0xa4>
 800938e:	bf00      	nop
 8009390:	0800a435 	.word	0x0800a435
 8009394:	0800a4a6 	.word	0x0800a4a6

08009398 <__mcmp>:
 8009398:	690a      	ldr	r2, [r1, #16]
 800939a:	4603      	mov	r3, r0
 800939c:	6900      	ldr	r0, [r0, #16]
 800939e:	1a80      	subs	r0, r0, r2
 80093a0:	b530      	push	{r4, r5, lr}
 80093a2:	d10e      	bne.n	80093c2 <__mcmp+0x2a>
 80093a4:	3314      	adds	r3, #20
 80093a6:	3114      	adds	r1, #20
 80093a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80093ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80093b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80093b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80093b8:	4295      	cmp	r5, r2
 80093ba:	d003      	beq.n	80093c4 <__mcmp+0x2c>
 80093bc:	d205      	bcs.n	80093ca <__mcmp+0x32>
 80093be:	f04f 30ff 	mov.w	r0, #4294967295
 80093c2:	bd30      	pop	{r4, r5, pc}
 80093c4:	42a3      	cmp	r3, r4
 80093c6:	d3f3      	bcc.n	80093b0 <__mcmp+0x18>
 80093c8:	e7fb      	b.n	80093c2 <__mcmp+0x2a>
 80093ca:	2001      	movs	r0, #1
 80093cc:	e7f9      	b.n	80093c2 <__mcmp+0x2a>
	...

080093d0 <__mdiff>:
 80093d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d4:	4689      	mov	r9, r1
 80093d6:	4606      	mov	r6, r0
 80093d8:	4611      	mov	r1, r2
 80093da:	4648      	mov	r0, r9
 80093dc:	4614      	mov	r4, r2
 80093de:	f7ff ffdb 	bl	8009398 <__mcmp>
 80093e2:	1e05      	subs	r5, r0, #0
 80093e4:	d112      	bne.n	800940c <__mdiff+0x3c>
 80093e6:	4629      	mov	r1, r5
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7ff fd11 	bl	8008e10 <_Balloc>
 80093ee:	4602      	mov	r2, r0
 80093f0:	b928      	cbnz	r0, 80093fe <__mdiff+0x2e>
 80093f2:	4b3f      	ldr	r3, [pc, #252]	@ (80094f0 <__mdiff+0x120>)
 80093f4:	f240 2137 	movw	r1, #567	@ 0x237
 80093f8:	483e      	ldr	r0, [pc, #248]	@ (80094f4 <__mdiff+0x124>)
 80093fa:	f7fe fa51 	bl	80078a0 <__assert_func>
 80093fe:	2301      	movs	r3, #1
 8009400:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009404:	4610      	mov	r0, r2
 8009406:	b003      	add	sp, #12
 8009408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940c:	bfbc      	itt	lt
 800940e:	464b      	movlt	r3, r9
 8009410:	46a1      	movlt	r9, r4
 8009412:	4630      	mov	r0, r6
 8009414:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009418:	bfba      	itte	lt
 800941a:	461c      	movlt	r4, r3
 800941c:	2501      	movlt	r5, #1
 800941e:	2500      	movge	r5, #0
 8009420:	f7ff fcf6 	bl	8008e10 <_Balloc>
 8009424:	4602      	mov	r2, r0
 8009426:	b918      	cbnz	r0, 8009430 <__mdiff+0x60>
 8009428:	4b31      	ldr	r3, [pc, #196]	@ (80094f0 <__mdiff+0x120>)
 800942a:	f240 2145 	movw	r1, #581	@ 0x245
 800942e:	e7e3      	b.n	80093f8 <__mdiff+0x28>
 8009430:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009434:	6926      	ldr	r6, [r4, #16]
 8009436:	60c5      	str	r5, [r0, #12]
 8009438:	f109 0310 	add.w	r3, r9, #16
 800943c:	f109 0514 	add.w	r5, r9, #20
 8009440:	f104 0e14 	add.w	lr, r4, #20
 8009444:	f100 0b14 	add.w	fp, r0, #20
 8009448:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800944c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009450:	9301      	str	r3, [sp, #4]
 8009452:	46d9      	mov	r9, fp
 8009454:	f04f 0c00 	mov.w	ip, #0
 8009458:	9b01      	ldr	r3, [sp, #4]
 800945a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800945e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009462:	9301      	str	r3, [sp, #4]
 8009464:	fa1f f38a 	uxth.w	r3, sl
 8009468:	4619      	mov	r1, r3
 800946a:	b283      	uxth	r3, r0
 800946c:	1acb      	subs	r3, r1, r3
 800946e:	0c00      	lsrs	r0, r0, #16
 8009470:	4463      	add	r3, ip
 8009472:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009476:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800947a:	b29b      	uxth	r3, r3
 800947c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009480:	4576      	cmp	r6, lr
 8009482:	f849 3b04 	str.w	r3, [r9], #4
 8009486:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800948a:	d8e5      	bhi.n	8009458 <__mdiff+0x88>
 800948c:	1b33      	subs	r3, r6, r4
 800948e:	3b15      	subs	r3, #21
 8009490:	f023 0303 	bic.w	r3, r3, #3
 8009494:	3415      	adds	r4, #21
 8009496:	3304      	adds	r3, #4
 8009498:	42a6      	cmp	r6, r4
 800949a:	bf38      	it	cc
 800949c:	2304      	movcc	r3, #4
 800949e:	441d      	add	r5, r3
 80094a0:	445b      	add	r3, fp
 80094a2:	461e      	mov	r6, r3
 80094a4:	462c      	mov	r4, r5
 80094a6:	4544      	cmp	r4, r8
 80094a8:	d30e      	bcc.n	80094c8 <__mdiff+0xf8>
 80094aa:	f108 0103 	add.w	r1, r8, #3
 80094ae:	1b49      	subs	r1, r1, r5
 80094b0:	f021 0103 	bic.w	r1, r1, #3
 80094b4:	3d03      	subs	r5, #3
 80094b6:	45a8      	cmp	r8, r5
 80094b8:	bf38      	it	cc
 80094ba:	2100      	movcc	r1, #0
 80094bc:	440b      	add	r3, r1
 80094be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094c2:	b191      	cbz	r1, 80094ea <__mdiff+0x11a>
 80094c4:	6117      	str	r7, [r2, #16]
 80094c6:	e79d      	b.n	8009404 <__mdiff+0x34>
 80094c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80094cc:	46e6      	mov	lr, ip
 80094ce:	0c08      	lsrs	r0, r1, #16
 80094d0:	fa1c fc81 	uxtah	ip, ip, r1
 80094d4:	4471      	add	r1, lr
 80094d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80094da:	b289      	uxth	r1, r1
 80094dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80094e0:	f846 1b04 	str.w	r1, [r6], #4
 80094e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80094e8:	e7dd      	b.n	80094a6 <__mdiff+0xd6>
 80094ea:	3f01      	subs	r7, #1
 80094ec:	e7e7      	b.n	80094be <__mdiff+0xee>
 80094ee:	bf00      	nop
 80094f0:	0800a435 	.word	0x0800a435
 80094f4:	0800a4a6 	.word	0x0800a4a6

080094f8 <__ulp>:
 80094f8:	b082      	sub	sp, #8
 80094fa:	ed8d 0b00 	vstr	d0, [sp]
 80094fe:	9a01      	ldr	r2, [sp, #4]
 8009500:	4b0f      	ldr	r3, [pc, #60]	@ (8009540 <__ulp+0x48>)
 8009502:	4013      	ands	r3, r2
 8009504:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009508:	2b00      	cmp	r3, #0
 800950a:	dc08      	bgt.n	800951e <__ulp+0x26>
 800950c:	425b      	negs	r3, r3
 800950e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009512:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009516:	da04      	bge.n	8009522 <__ulp+0x2a>
 8009518:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800951c:	4113      	asrs	r3, r2
 800951e:	2200      	movs	r2, #0
 8009520:	e008      	b.n	8009534 <__ulp+0x3c>
 8009522:	f1a2 0314 	sub.w	r3, r2, #20
 8009526:	2b1e      	cmp	r3, #30
 8009528:	bfda      	itte	le
 800952a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800952e:	40da      	lsrle	r2, r3
 8009530:	2201      	movgt	r2, #1
 8009532:	2300      	movs	r3, #0
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	ec41 0b10 	vmov	d0, r0, r1
 800953c:	b002      	add	sp, #8
 800953e:	4770      	bx	lr
 8009540:	7ff00000 	.word	0x7ff00000

08009544 <__b2d>:
 8009544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009548:	6906      	ldr	r6, [r0, #16]
 800954a:	f100 0814 	add.w	r8, r0, #20
 800954e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009552:	1f37      	subs	r7, r6, #4
 8009554:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009558:	4610      	mov	r0, r2
 800955a:	f7ff fd4b 	bl	8008ff4 <__hi0bits>
 800955e:	f1c0 0320 	rsb	r3, r0, #32
 8009562:	280a      	cmp	r0, #10
 8009564:	600b      	str	r3, [r1, #0]
 8009566:	491b      	ldr	r1, [pc, #108]	@ (80095d4 <__b2d+0x90>)
 8009568:	dc15      	bgt.n	8009596 <__b2d+0x52>
 800956a:	f1c0 0c0b 	rsb	ip, r0, #11
 800956e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009572:	45b8      	cmp	r8, r7
 8009574:	ea43 0501 	orr.w	r5, r3, r1
 8009578:	bf34      	ite	cc
 800957a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800957e:	2300      	movcs	r3, #0
 8009580:	3015      	adds	r0, #21
 8009582:	fa02 f000 	lsl.w	r0, r2, r0
 8009586:	fa23 f30c 	lsr.w	r3, r3, ip
 800958a:	4303      	orrs	r3, r0
 800958c:	461c      	mov	r4, r3
 800958e:	ec45 4b10 	vmov	d0, r4, r5
 8009592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009596:	45b8      	cmp	r8, r7
 8009598:	bf3a      	itte	cc
 800959a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800959e:	f1a6 0708 	subcc.w	r7, r6, #8
 80095a2:	2300      	movcs	r3, #0
 80095a4:	380b      	subs	r0, #11
 80095a6:	d012      	beq.n	80095ce <__b2d+0x8a>
 80095a8:	f1c0 0120 	rsb	r1, r0, #32
 80095ac:	fa23 f401 	lsr.w	r4, r3, r1
 80095b0:	4082      	lsls	r2, r0
 80095b2:	4322      	orrs	r2, r4
 80095b4:	4547      	cmp	r7, r8
 80095b6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80095ba:	bf8c      	ite	hi
 80095bc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80095c0:	2200      	movls	r2, #0
 80095c2:	4083      	lsls	r3, r0
 80095c4:	40ca      	lsrs	r2, r1
 80095c6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80095ca:	4313      	orrs	r3, r2
 80095cc:	e7de      	b.n	800958c <__b2d+0x48>
 80095ce:	ea42 0501 	orr.w	r5, r2, r1
 80095d2:	e7db      	b.n	800958c <__b2d+0x48>
 80095d4:	3ff00000 	.word	0x3ff00000

080095d8 <__d2b>:
 80095d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095dc:	460f      	mov	r7, r1
 80095de:	2101      	movs	r1, #1
 80095e0:	ec59 8b10 	vmov	r8, r9, d0
 80095e4:	4616      	mov	r6, r2
 80095e6:	f7ff fc13 	bl	8008e10 <_Balloc>
 80095ea:	4604      	mov	r4, r0
 80095ec:	b930      	cbnz	r0, 80095fc <__d2b+0x24>
 80095ee:	4602      	mov	r2, r0
 80095f0:	4b23      	ldr	r3, [pc, #140]	@ (8009680 <__d2b+0xa8>)
 80095f2:	4824      	ldr	r0, [pc, #144]	@ (8009684 <__d2b+0xac>)
 80095f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80095f8:	f7fe f952 	bl	80078a0 <__assert_func>
 80095fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009600:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009604:	b10d      	cbz	r5, 800960a <__d2b+0x32>
 8009606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800960a:	9301      	str	r3, [sp, #4]
 800960c:	f1b8 0300 	subs.w	r3, r8, #0
 8009610:	d023      	beq.n	800965a <__d2b+0x82>
 8009612:	4668      	mov	r0, sp
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	f7ff fd0c 	bl	8009032 <__lo0bits>
 800961a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800961e:	b1d0      	cbz	r0, 8009656 <__d2b+0x7e>
 8009620:	f1c0 0320 	rsb	r3, r0, #32
 8009624:	fa02 f303 	lsl.w	r3, r2, r3
 8009628:	430b      	orrs	r3, r1
 800962a:	40c2      	lsrs	r2, r0
 800962c:	6163      	str	r3, [r4, #20]
 800962e:	9201      	str	r2, [sp, #4]
 8009630:	9b01      	ldr	r3, [sp, #4]
 8009632:	61a3      	str	r3, [r4, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	bf0c      	ite	eq
 8009638:	2201      	moveq	r2, #1
 800963a:	2202      	movne	r2, #2
 800963c:	6122      	str	r2, [r4, #16]
 800963e:	b1a5      	cbz	r5, 800966a <__d2b+0x92>
 8009640:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009644:	4405      	add	r5, r0
 8009646:	603d      	str	r5, [r7, #0]
 8009648:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800964c:	6030      	str	r0, [r6, #0]
 800964e:	4620      	mov	r0, r4
 8009650:	b003      	add	sp, #12
 8009652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009656:	6161      	str	r1, [r4, #20]
 8009658:	e7ea      	b.n	8009630 <__d2b+0x58>
 800965a:	a801      	add	r0, sp, #4
 800965c:	f7ff fce9 	bl	8009032 <__lo0bits>
 8009660:	9b01      	ldr	r3, [sp, #4]
 8009662:	6163      	str	r3, [r4, #20]
 8009664:	3020      	adds	r0, #32
 8009666:	2201      	movs	r2, #1
 8009668:	e7e8      	b.n	800963c <__d2b+0x64>
 800966a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800966e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009672:	6038      	str	r0, [r7, #0]
 8009674:	6918      	ldr	r0, [r3, #16]
 8009676:	f7ff fcbd 	bl	8008ff4 <__hi0bits>
 800967a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800967e:	e7e5      	b.n	800964c <__d2b+0x74>
 8009680:	0800a435 	.word	0x0800a435
 8009684:	0800a4a6 	.word	0x0800a4a6

08009688 <__ratio>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	b085      	sub	sp, #20
 800968e:	e9cd 1000 	strd	r1, r0, [sp]
 8009692:	a902      	add	r1, sp, #8
 8009694:	f7ff ff56 	bl	8009544 <__b2d>
 8009698:	9800      	ldr	r0, [sp, #0]
 800969a:	a903      	add	r1, sp, #12
 800969c:	ec55 4b10 	vmov	r4, r5, d0
 80096a0:	f7ff ff50 	bl	8009544 <__b2d>
 80096a4:	9b01      	ldr	r3, [sp, #4]
 80096a6:	6919      	ldr	r1, [r3, #16]
 80096a8:	9b00      	ldr	r3, [sp, #0]
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	1ac9      	subs	r1, r1, r3
 80096ae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80096b2:	1a9b      	subs	r3, r3, r2
 80096b4:	ec5b ab10 	vmov	sl, fp, d0
 80096b8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80096bc:	2b00      	cmp	r3, #0
 80096be:	bfce      	itee	gt
 80096c0:	462a      	movgt	r2, r5
 80096c2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80096c6:	465a      	movle	r2, fp
 80096c8:	462f      	mov	r7, r5
 80096ca:	46d9      	mov	r9, fp
 80096cc:	bfcc      	ite	gt
 80096ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80096d2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80096d6:	464b      	mov	r3, r9
 80096d8:	4652      	mov	r2, sl
 80096da:	4620      	mov	r0, r4
 80096dc:	4639      	mov	r1, r7
 80096de:	f7f7 f8c5 	bl	800086c <__aeabi_ddiv>
 80096e2:	ec41 0b10 	vmov	d0, r0, r1
 80096e6:	b005      	add	sp, #20
 80096e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096ec <__copybits>:
 80096ec:	3901      	subs	r1, #1
 80096ee:	b570      	push	{r4, r5, r6, lr}
 80096f0:	1149      	asrs	r1, r1, #5
 80096f2:	6914      	ldr	r4, [r2, #16]
 80096f4:	3101      	adds	r1, #1
 80096f6:	f102 0314 	add.w	r3, r2, #20
 80096fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80096fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009702:	1f05      	subs	r5, r0, #4
 8009704:	42a3      	cmp	r3, r4
 8009706:	d30c      	bcc.n	8009722 <__copybits+0x36>
 8009708:	1aa3      	subs	r3, r4, r2
 800970a:	3b11      	subs	r3, #17
 800970c:	f023 0303 	bic.w	r3, r3, #3
 8009710:	3211      	adds	r2, #17
 8009712:	42a2      	cmp	r2, r4
 8009714:	bf88      	it	hi
 8009716:	2300      	movhi	r3, #0
 8009718:	4418      	add	r0, r3
 800971a:	2300      	movs	r3, #0
 800971c:	4288      	cmp	r0, r1
 800971e:	d305      	bcc.n	800972c <__copybits+0x40>
 8009720:	bd70      	pop	{r4, r5, r6, pc}
 8009722:	f853 6b04 	ldr.w	r6, [r3], #4
 8009726:	f845 6f04 	str.w	r6, [r5, #4]!
 800972a:	e7eb      	b.n	8009704 <__copybits+0x18>
 800972c:	f840 3b04 	str.w	r3, [r0], #4
 8009730:	e7f4      	b.n	800971c <__copybits+0x30>

08009732 <__any_on>:
 8009732:	f100 0214 	add.w	r2, r0, #20
 8009736:	6900      	ldr	r0, [r0, #16]
 8009738:	114b      	asrs	r3, r1, #5
 800973a:	4298      	cmp	r0, r3
 800973c:	b510      	push	{r4, lr}
 800973e:	db11      	blt.n	8009764 <__any_on+0x32>
 8009740:	dd0a      	ble.n	8009758 <__any_on+0x26>
 8009742:	f011 011f 	ands.w	r1, r1, #31
 8009746:	d007      	beq.n	8009758 <__any_on+0x26>
 8009748:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800974c:	fa24 f001 	lsr.w	r0, r4, r1
 8009750:	fa00 f101 	lsl.w	r1, r0, r1
 8009754:	428c      	cmp	r4, r1
 8009756:	d10b      	bne.n	8009770 <__any_on+0x3e>
 8009758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800975c:	4293      	cmp	r3, r2
 800975e:	d803      	bhi.n	8009768 <__any_on+0x36>
 8009760:	2000      	movs	r0, #0
 8009762:	bd10      	pop	{r4, pc}
 8009764:	4603      	mov	r3, r0
 8009766:	e7f7      	b.n	8009758 <__any_on+0x26>
 8009768:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800976c:	2900      	cmp	r1, #0
 800976e:	d0f5      	beq.n	800975c <__any_on+0x2a>
 8009770:	2001      	movs	r0, #1
 8009772:	e7f6      	b.n	8009762 <__any_on+0x30>

08009774 <__ascii_wctomb>:
 8009774:	4603      	mov	r3, r0
 8009776:	4608      	mov	r0, r1
 8009778:	b141      	cbz	r1, 800978c <__ascii_wctomb+0x18>
 800977a:	2aff      	cmp	r2, #255	@ 0xff
 800977c:	d904      	bls.n	8009788 <__ascii_wctomb+0x14>
 800977e:	228a      	movs	r2, #138	@ 0x8a
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	f04f 30ff 	mov.w	r0, #4294967295
 8009786:	4770      	bx	lr
 8009788:	700a      	strb	r2, [r1, #0]
 800978a:	2001      	movs	r0, #1
 800978c:	4770      	bx	lr

0800978e <__ssputs_r>:
 800978e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009792:	688e      	ldr	r6, [r1, #8]
 8009794:	461f      	mov	r7, r3
 8009796:	42be      	cmp	r6, r7
 8009798:	680b      	ldr	r3, [r1, #0]
 800979a:	4682      	mov	sl, r0
 800979c:	460c      	mov	r4, r1
 800979e:	4690      	mov	r8, r2
 80097a0:	d82d      	bhi.n	80097fe <__ssputs_r+0x70>
 80097a2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80097a6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80097aa:	d026      	beq.n	80097fa <__ssputs_r+0x6c>
 80097ac:	6965      	ldr	r5, [r4, #20]
 80097ae:	6909      	ldr	r1, [r1, #16]
 80097b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097b4:	eba3 0901 	sub.w	r9, r3, r1
 80097b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097bc:	1c7b      	adds	r3, r7, #1
 80097be:	444b      	add	r3, r9
 80097c0:	106d      	asrs	r5, r5, #1
 80097c2:	429d      	cmp	r5, r3
 80097c4:	bf38      	it	cc
 80097c6:	461d      	movcc	r5, r3
 80097c8:	0553      	lsls	r3, r2, #21
 80097ca:	d527      	bpl.n	800981c <__ssputs_r+0x8e>
 80097cc:	4629      	mov	r1, r5
 80097ce:	f7ff fa81 	bl	8008cd4 <_malloc_r>
 80097d2:	4606      	mov	r6, r0
 80097d4:	b360      	cbz	r0, 8009830 <__ssputs_r+0xa2>
 80097d6:	6921      	ldr	r1, [r4, #16]
 80097d8:	464a      	mov	r2, r9
 80097da:	f7fe f848 	bl	800786e <memcpy>
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80097e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	6126      	str	r6, [r4, #16]
 80097ec:	6165      	str	r5, [r4, #20]
 80097ee:	444e      	add	r6, r9
 80097f0:	eba5 0509 	sub.w	r5, r5, r9
 80097f4:	6026      	str	r6, [r4, #0]
 80097f6:	60a5      	str	r5, [r4, #8]
 80097f8:	463e      	mov	r6, r7
 80097fa:	42be      	cmp	r6, r7
 80097fc:	d900      	bls.n	8009800 <__ssputs_r+0x72>
 80097fe:	463e      	mov	r6, r7
 8009800:	6820      	ldr	r0, [r4, #0]
 8009802:	4632      	mov	r2, r6
 8009804:	4641      	mov	r1, r8
 8009806:	f000 fb7b 	bl	8009f00 <memmove>
 800980a:	68a3      	ldr	r3, [r4, #8]
 800980c:	1b9b      	subs	r3, r3, r6
 800980e:	60a3      	str	r3, [r4, #8]
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	4433      	add	r3, r6
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	2000      	movs	r0, #0
 8009818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981c:	462a      	mov	r2, r5
 800981e:	f000 fbd6 	bl	8009fce <_realloc_r>
 8009822:	4606      	mov	r6, r0
 8009824:	2800      	cmp	r0, #0
 8009826:	d1e0      	bne.n	80097ea <__ssputs_r+0x5c>
 8009828:	6921      	ldr	r1, [r4, #16]
 800982a:	4650      	mov	r0, sl
 800982c:	f7fe fea4 	bl	8008578 <_free_r>
 8009830:	230c      	movs	r3, #12
 8009832:	f8ca 3000 	str.w	r3, [sl]
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800983c:	81a3      	strh	r3, [r4, #12]
 800983e:	f04f 30ff 	mov.w	r0, #4294967295
 8009842:	e7e9      	b.n	8009818 <__ssputs_r+0x8a>

08009844 <_svfiprintf_r>:
 8009844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009848:	4698      	mov	r8, r3
 800984a:	898b      	ldrh	r3, [r1, #12]
 800984c:	061b      	lsls	r3, r3, #24
 800984e:	b09d      	sub	sp, #116	@ 0x74
 8009850:	4607      	mov	r7, r0
 8009852:	460d      	mov	r5, r1
 8009854:	4614      	mov	r4, r2
 8009856:	d510      	bpl.n	800987a <_svfiprintf_r+0x36>
 8009858:	690b      	ldr	r3, [r1, #16]
 800985a:	b973      	cbnz	r3, 800987a <_svfiprintf_r+0x36>
 800985c:	2140      	movs	r1, #64	@ 0x40
 800985e:	f7ff fa39 	bl	8008cd4 <_malloc_r>
 8009862:	6028      	str	r0, [r5, #0]
 8009864:	6128      	str	r0, [r5, #16]
 8009866:	b930      	cbnz	r0, 8009876 <_svfiprintf_r+0x32>
 8009868:	230c      	movs	r3, #12
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	f04f 30ff 	mov.w	r0, #4294967295
 8009870:	b01d      	add	sp, #116	@ 0x74
 8009872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009876:	2340      	movs	r3, #64	@ 0x40
 8009878:	616b      	str	r3, [r5, #20]
 800987a:	2300      	movs	r3, #0
 800987c:	9309      	str	r3, [sp, #36]	@ 0x24
 800987e:	2320      	movs	r3, #32
 8009880:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009884:	f8cd 800c 	str.w	r8, [sp, #12]
 8009888:	2330      	movs	r3, #48	@ 0x30
 800988a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a28 <_svfiprintf_r+0x1e4>
 800988e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009892:	f04f 0901 	mov.w	r9, #1
 8009896:	4623      	mov	r3, r4
 8009898:	469a      	mov	sl, r3
 800989a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800989e:	b10a      	cbz	r2, 80098a4 <_svfiprintf_r+0x60>
 80098a0:	2a25      	cmp	r2, #37	@ 0x25
 80098a2:	d1f9      	bne.n	8009898 <_svfiprintf_r+0x54>
 80098a4:	ebba 0b04 	subs.w	fp, sl, r4
 80098a8:	d00b      	beq.n	80098c2 <_svfiprintf_r+0x7e>
 80098aa:	465b      	mov	r3, fp
 80098ac:	4622      	mov	r2, r4
 80098ae:	4629      	mov	r1, r5
 80098b0:	4638      	mov	r0, r7
 80098b2:	f7ff ff6c 	bl	800978e <__ssputs_r>
 80098b6:	3001      	adds	r0, #1
 80098b8:	f000 80a7 	beq.w	8009a0a <_svfiprintf_r+0x1c6>
 80098bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098be:	445a      	add	r2, fp
 80098c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80098c2:	f89a 3000 	ldrb.w	r3, [sl]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 809f 	beq.w	8009a0a <_svfiprintf_r+0x1c6>
 80098cc:	2300      	movs	r3, #0
 80098ce:	f04f 32ff 	mov.w	r2, #4294967295
 80098d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098d6:	f10a 0a01 	add.w	sl, sl, #1
 80098da:	9304      	str	r3, [sp, #16]
 80098dc:	9307      	str	r3, [sp, #28]
 80098de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80098e4:	4654      	mov	r4, sl
 80098e6:	2205      	movs	r2, #5
 80098e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098ec:	484e      	ldr	r0, [pc, #312]	@ (8009a28 <_svfiprintf_r+0x1e4>)
 80098ee:	f7f6 fc7f 	bl	80001f0 <memchr>
 80098f2:	9a04      	ldr	r2, [sp, #16]
 80098f4:	b9d8      	cbnz	r0, 800992e <_svfiprintf_r+0xea>
 80098f6:	06d0      	lsls	r0, r2, #27
 80098f8:	bf44      	itt	mi
 80098fa:	2320      	movmi	r3, #32
 80098fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009900:	0711      	lsls	r1, r2, #28
 8009902:	bf44      	itt	mi
 8009904:	232b      	movmi	r3, #43	@ 0x2b
 8009906:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800990a:	f89a 3000 	ldrb.w	r3, [sl]
 800990e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009910:	d015      	beq.n	800993e <_svfiprintf_r+0xfa>
 8009912:	9a07      	ldr	r2, [sp, #28]
 8009914:	4654      	mov	r4, sl
 8009916:	2000      	movs	r0, #0
 8009918:	f04f 0c0a 	mov.w	ip, #10
 800991c:	4621      	mov	r1, r4
 800991e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009922:	3b30      	subs	r3, #48	@ 0x30
 8009924:	2b09      	cmp	r3, #9
 8009926:	d94b      	bls.n	80099c0 <_svfiprintf_r+0x17c>
 8009928:	b1b0      	cbz	r0, 8009958 <_svfiprintf_r+0x114>
 800992a:	9207      	str	r2, [sp, #28]
 800992c:	e014      	b.n	8009958 <_svfiprintf_r+0x114>
 800992e:	eba0 0308 	sub.w	r3, r0, r8
 8009932:	fa09 f303 	lsl.w	r3, r9, r3
 8009936:	4313      	orrs	r3, r2
 8009938:	9304      	str	r3, [sp, #16]
 800993a:	46a2      	mov	sl, r4
 800993c:	e7d2      	b.n	80098e4 <_svfiprintf_r+0xa0>
 800993e:	9b03      	ldr	r3, [sp, #12]
 8009940:	1d19      	adds	r1, r3, #4
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	9103      	str	r1, [sp, #12]
 8009946:	2b00      	cmp	r3, #0
 8009948:	bfbb      	ittet	lt
 800994a:	425b      	neglt	r3, r3
 800994c:	f042 0202 	orrlt.w	r2, r2, #2
 8009950:	9307      	strge	r3, [sp, #28]
 8009952:	9307      	strlt	r3, [sp, #28]
 8009954:	bfb8      	it	lt
 8009956:	9204      	strlt	r2, [sp, #16]
 8009958:	7823      	ldrb	r3, [r4, #0]
 800995a:	2b2e      	cmp	r3, #46	@ 0x2e
 800995c:	d10a      	bne.n	8009974 <_svfiprintf_r+0x130>
 800995e:	7863      	ldrb	r3, [r4, #1]
 8009960:	2b2a      	cmp	r3, #42	@ 0x2a
 8009962:	d132      	bne.n	80099ca <_svfiprintf_r+0x186>
 8009964:	9b03      	ldr	r3, [sp, #12]
 8009966:	1d1a      	adds	r2, r3, #4
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	9203      	str	r2, [sp, #12]
 800996c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009970:	3402      	adds	r4, #2
 8009972:	9305      	str	r3, [sp, #20]
 8009974:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a38 <_svfiprintf_r+0x1f4>
 8009978:	7821      	ldrb	r1, [r4, #0]
 800997a:	2203      	movs	r2, #3
 800997c:	4650      	mov	r0, sl
 800997e:	f7f6 fc37 	bl	80001f0 <memchr>
 8009982:	b138      	cbz	r0, 8009994 <_svfiprintf_r+0x150>
 8009984:	9b04      	ldr	r3, [sp, #16]
 8009986:	eba0 000a 	sub.w	r0, r0, sl
 800998a:	2240      	movs	r2, #64	@ 0x40
 800998c:	4082      	lsls	r2, r0
 800998e:	4313      	orrs	r3, r2
 8009990:	3401      	adds	r4, #1
 8009992:	9304      	str	r3, [sp, #16]
 8009994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009998:	4824      	ldr	r0, [pc, #144]	@ (8009a2c <_svfiprintf_r+0x1e8>)
 800999a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800999e:	2206      	movs	r2, #6
 80099a0:	f7f6 fc26 	bl	80001f0 <memchr>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d036      	beq.n	8009a16 <_svfiprintf_r+0x1d2>
 80099a8:	4b21      	ldr	r3, [pc, #132]	@ (8009a30 <_svfiprintf_r+0x1ec>)
 80099aa:	bb1b      	cbnz	r3, 80099f4 <_svfiprintf_r+0x1b0>
 80099ac:	9b03      	ldr	r3, [sp, #12]
 80099ae:	3307      	adds	r3, #7
 80099b0:	f023 0307 	bic.w	r3, r3, #7
 80099b4:	3308      	adds	r3, #8
 80099b6:	9303      	str	r3, [sp, #12]
 80099b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ba:	4433      	add	r3, r6
 80099bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80099be:	e76a      	b.n	8009896 <_svfiprintf_r+0x52>
 80099c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099c4:	460c      	mov	r4, r1
 80099c6:	2001      	movs	r0, #1
 80099c8:	e7a8      	b.n	800991c <_svfiprintf_r+0xd8>
 80099ca:	2300      	movs	r3, #0
 80099cc:	3401      	adds	r4, #1
 80099ce:	9305      	str	r3, [sp, #20]
 80099d0:	4619      	mov	r1, r3
 80099d2:	f04f 0c0a 	mov.w	ip, #10
 80099d6:	4620      	mov	r0, r4
 80099d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099dc:	3a30      	subs	r2, #48	@ 0x30
 80099de:	2a09      	cmp	r2, #9
 80099e0:	d903      	bls.n	80099ea <_svfiprintf_r+0x1a6>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0c6      	beq.n	8009974 <_svfiprintf_r+0x130>
 80099e6:	9105      	str	r1, [sp, #20]
 80099e8:	e7c4      	b.n	8009974 <_svfiprintf_r+0x130>
 80099ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80099ee:	4604      	mov	r4, r0
 80099f0:	2301      	movs	r3, #1
 80099f2:	e7f0      	b.n	80099d6 <_svfiprintf_r+0x192>
 80099f4:	ab03      	add	r3, sp, #12
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	462a      	mov	r2, r5
 80099fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009a34 <_svfiprintf_r+0x1f0>)
 80099fc:	a904      	add	r1, sp, #16
 80099fe:	4638      	mov	r0, r7
 8009a00:	f7fd f8ae 	bl	8006b60 <_printf_float>
 8009a04:	1c42      	adds	r2, r0, #1
 8009a06:	4606      	mov	r6, r0
 8009a08:	d1d6      	bne.n	80099b8 <_svfiprintf_r+0x174>
 8009a0a:	89ab      	ldrh	r3, [r5, #12]
 8009a0c:	065b      	lsls	r3, r3, #25
 8009a0e:	f53f af2d 	bmi.w	800986c <_svfiprintf_r+0x28>
 8009a12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a14:	e72c      	b.n	8009870 <_svfiprintf_r+0x2c>
 8009a16:	ab03      	add	r3, sp, #12
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	462a      	mov	r2, r5
 8009a1c:	4b05      	ldr	r3, [pc, #20]	@ (8009a34 <_svfiprintf_r+0x1f0>)
 8009a1e:	a904      	add	r1, sp, #16
 8009a20:	4638      	mov	r0, r7
 8009a22:	f7fd fb35 	bl	8007090 <_printf_i>
 8009a26:	e7ed      	b.n	8009a04 <_svfiprintf_r+0x1c0>
 8009a28:	0800a701 	.word	0x0800a701
 8009a2c:	0800a70b 	.word	0x0800a70b
 8009a30:	08006b61 	.word	0x08006b61
 8009a34:	0800978f 	.word	0x0800978f
 8009a38:	0800a707 	.word	0x0800a707

08009a3c <__sfputc_r>:
 8009a3c:	6893      	ldr	r3, [r2, #8]
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	b410      	push	{r4}
 8009a44:	6093      	str	r3, [r2, #8]
 8009a46:	da08      	bge.n	8009a5a <__sfputc_r+0x1e>
 8009a48:	6994      	ldr	r4, [r2, #24]
 8009a4a:	42a3      	cmp	r3, r4
 8009a4c:	db01      	blt.n	8009a52 <__sfputc_r+0x16>
 8009a4e:	290a      	cmp	r1, #10
 8009a50:	d103      	bne.n	8009a5a <__sfputc_r+0x1e>
 8009a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a56:	f7fd bde4 	b.w	8007622 <__swbuf_r>
 8009a5a:	6813      	ldr	r3, [r2, #0]
 8009a5c:	1c58      	adds	r0, r3, #1
 8009a5e:	6010      	str	r0, [r2, #0]
 8009a60:	7019      	strb	r1, [r3, #0]
 8009a62:	4608      	mov	r0, r1
 8009a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <__sfputs_r>:
 8009a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6c:	4606      	mov	r6, r0
 8009a6e:	460f      	mov	r7, r1
 8009a70:	4614      	mov	r4, r2
 8009a72:	18d5      	adds	r5, r2, r3
 8009a74:	42ac      	cmp	r4, r5
 8009a76:	d101      	bne.n	8009a7c <__sfputs_r+0x12>
 8009a78:	2000      	movs	r0, #0
 8009a7a:	e007      	b.n	8009a8c <__sfputs_r+0x22>
 8009a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a80:	463a      	mov	r2, r7
 8009a82:	4630      	mov	r0, r6
 8009a84:	f7ff ffda 	bl	8009a3c <__sfputc_r>
 8009a88:	1c43      	adds	r3, r0, #1
 8009a8a:	d1f3      	bne.n	8009a74 <__sfputs_r+0xa>
 8009a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a90 <_vfiprintf_r>:
 8009a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a94:	460d      	mov	r5, r1
 8009a96:	b09d      	sub	sp, #116	@ 0x74
 8009a98:	4614      	mov	r4, r2
 8009a9a:	4698      	mov	r8, r3
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	b118      	cbz	r0, 8009aa8 <_vfiprintf_r+0x18>
 8009aa0:	6a03      	ldr	r3, [r0, #32]
 8009aa2:	b90b      	cbnz	r3, 8009aa8 <_vfiprintf_r+0x18>
 8009aa4:	f7fd fca0 	bl	80073e8 <__sinit>
 8009aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aaa:	07d9      	lsls	r1, r3, #31
 8009aac:	d405      	bmi.n	8009aba <_vfiprintf_r+0x2a>
 8009aae:	89ab      	ldrh	r3, [r5, #12]
 8009ab0:	059a      	lsls	r2, r3, #22
 8009ab2:	d402      	bmi.n	8009aba <_vfiprintf_r+0x2a>
 8009ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ab6:	f7fd fed8 	bl	800786a <__retarget_lock_acquire_recursive>
 8009aba:	89ab      	ldrh	r3, [r5, #12]
 8009abc:	071b      	lsls	r3, r3, #28
 8009abe:	d501      	bpl.n	8009ac4 <_vfiprintf_r+0x34>
 8009ac0:	692b      	ldr	r3, [r5, #16]
 8009ac2:	b99b      	cbnz	r3, 8009aec <_vfiprintf_r+0x5c>
 8009ac4:	4629      	mov	r1, r5
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	f7fd fdea 	bl	80076a0 <__swsetup_r>
 8009acc:	b170      	cbz	r0, 8009aec <_vfiprintf_r+0x5c>
 8009ace:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ad0:	07dc      	lsls	r4, r3, #31
 8009ad2:	d504      	bpl.n	8009ade <_vfiprintf_r+0x4e>
 8009ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ad8:	b01d      	add	sp, #116	@ 0x74
 8009ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ade:	89ab      	ldrh	r3, [r5, #12]
 8009ae0:	0598      	lsls	r0, r3, #22
 8009ae2:	d4f7      	bmi.n	8009ad4 <_vfiprintf_r+0x44>
 8009ae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ae6:	f7fd fec1 	bl	800786c <__retarget_lock_release_recursive>
 8009aea:	e7f3      	b.n	8009ad4 <_vfiprintf_r+0x44>
 8009aec:	2300      	movs	r3, #0
 8009aee:	9309      	str	r3, [sp, #36]	@ 0x24
 8009af0:	2320      	movs	r3, #32
 8009af2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009afa:	2330      	movs	r3, #48	@ 0x30
 8009afc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009cac <_vfiprintf_r+0x21c>
 8009b00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b04:	f04f 0901 	mov.w	r9, #1
 8009b08:	4623      	mov	r3, r4
 8009b0a:	469a      	mov	sl, r3
 8009b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b10:	b10a      	cbz	r2, 8009b16 <_vfiprintf_r+0x86>
 8009b12:	2a25      	cmp	r2, #37	@ 0x25
 8009b14:	d1f9      	bne.n	8009b0a <_vfiprintf_r+0x7a>
 8009b16:	ebba 0b04 	subs.w	fp, sl, r4
 8009b1a:	d00b      	beq.n	8009b34 <_vfiprintf_r+0xa4>
 8009b1c:	465b      	mov	r3, fp
 8009b1e:	4622      	mov	r2, r4
 8009b20:	4629      	mov	r1, r5
 8009b22:	4630      	mov	r0, r6
 8009b24:	f7ff ffa1 	bl	8009a6a <__sfputs_r>
 8009b28:	3001      	adds	r0, #1
 8009b2a:	f000 80a7 	beq.w	8009c7c <_vfiprintf_r+0x1ec>
 8009b2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b30:	445a      	add	r2, fp
 8009b32:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b34:	f89a 3000 	ldrb.w	r3, [sl]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 809f 	beq.w	8009c7c <_vfiprintf_r+0x1ec>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	f04f 32ff 	mov.w	r2, #4294967295
 8009b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b48:	f10a 0a01 	add.w	sl, sl, #1
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	9307      	str	r3, [sp, #28]
 8009b50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b54:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b56:	4654      	mov	r4, sl
 8009b58:	2205      	movs	r2, #5
 8009b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b5e:	4853      	ldr	r0, [pc, #332]	@ (8009cac <_vfiprintf_r+0x21c>)
 8009b60:	f7f6 fb46 	bl	80001f0 <memchr>
 8009b64:	9a04      	ldr	r2, [sp, #16]
 8009b66:	b9d8      	cbnz	r0, 8009ba0 <_vfiprintf_r+0x110>
 8009b68:	06d1      	lsls	r1, r2, #27
 8009b6a:	bf44      	itt	mi
 8009b6c:	2320      	movmi	r3, #32
 8009b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b72:	0713      	lsls	r3, r2, #28
 8009b74:	bf44      	itt	mi
 8009b76:	232b      	movmi	r3, #43	@ 0x2b
 8009b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b82:	d015      	beq.n	8009bb0 <_vfiprintf_r+0x120>
 8009b84:	9a07      	ldr	r2, [sp, #28]
 8009b86:	4654      	mov	r4, sl
 8009b88:	2000      	movs	r0, #0
 8009b8a:	f04f 0c0a 	mov.w	ip, #10
 8009b8e:	4621      	mov	r1, r4
 8009b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b94:	3b30      	subs	r3, #48	@ 0x30
 8009b96:	2b09      	cmp	r3, #9
 8009b98:	d94b      	bls.n	8009c32 <_vfiprintf_r+0x1a2>
 8009b9a:	b1b0      	cbz	r0, 8009bca <_vfiprintf_r+0x13a>
 8009b9c:	9207      	str	r2, [sp, #28]
 8009b9e:	e014      	b.n	8009bca <_vfiprintf_r+0x13a>
 8009ba0:	eba0 0308 	sub.w	r3, r0, r8
 8009ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	9304      	str	r3, [sp, #16]
 8009bac:	46a2      	mov	sl, r4
 8009bae:	e7d2      	b.n	8009b56 <_vfiprintf_r+0xc6>
 8009bb0:	9b03      	ldr	r3, [sp, #12]
 8009bb2:	1d19      	adds	r1, r3, #4
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	9103      	str	r1, [sp, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	bfbb      	ittet	lt
 8009bbc:	425b      	neglt	r3, r3
 8009bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8009bc2:	9307      	strge	r3, [sp, #28]
 8009bc4:	9307      	strlt	r3, [sp, #28]
 8009bc6:	bfb8      	it	lt
 8009bc8:	9204      	strlt	r2, [sp, #16]
 8009bca:	7823      	ldrb	r3, [r4, #0]
 8009bcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009bce:	d10a      	bne.n	8009be6 <_vfiprintf_r+0x156>
 8009bd0:	7863      	ldrb	r3, [r4, #1]
 8009bd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009bd4:	d132      	bne.n	8009c3c <_vfiprintf_r+0x1ac>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	1d1a      	adds	r2, r3, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	9203      	str	r2, [sp, #12]
 8009bde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009be2:	3402      	adds	r4, #2
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009cbc <_vfiprintf_r+0x22c>
 8009bea:	7821      	ldrb	r1, [r4, #0]
 8009bec:	2203      	movs	r2, #3
 8009bee:	4650      	mov	r0, sl
 8009bf0:	f7f6 fafe 	bl	80001f0 <memchr>
 8009bf4:	b138      	cbz	r0, 8009c06 <_vfiprintf_r+0x176>
 8009bf6:	9b04      	ldr	r3, [sp, #16]
 8009bf8:	eba0 000a 	sub.w	r0, r0, sl
 8009bfc:	2240      	movs	r2, #64	@ 0x40
 8009bfe:	4082      	lsls	r2, r0
 8009c00:	4313      	orrs	r3, r2
 8009c02:	3401      	adds	r4, #1
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c0a:	4829      	ldr	r0, [pc, #164]	@ (8009cb0 <_vfiprintf_r+0x220>)
 8009c0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c10:	2206      	movs	r2, #6
 8009c12:	f7f6 faed 	bl	80001f0 <memchr>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	d03f      	beq.n	8009c9a <_vfiprintf_r+0x20a>
 8009c1a:	4b26      	ldr	r3, [pc, #152]	@ (8009cb4 <_vfiprintf_r+0x224>)
 8009c1c:	bb1b      	cbnz	r3, 8009c66 <_vfiprintf_r+0x1d6>
 8009c1e:	9b03      	ldr	r3, [sp, #12]
 8009c20:	3307      	adds	r3, #7
 8009c22:	f023 0307 	bic.w	r3, r3, #7
 8009c26:	3308      	adds	r3, #8
 8009c28:	9303      	str	r3, [sp, #12]
 8009c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c2c:	443b      	add	r3, r7
 8009c2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c30:	e76a      	b.n	8009b08 <_vfiprintf_r+0x78>
 8009c32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c36:	460c      	mov	r4, r1
 8009c38:	2001      	movs	r0, #1
 8009c3a:	e7a8      	b.n	8009b8e <_vfiprintf_r+0xfe>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	3401      	adds	r4, #1
 8009c40:	9305      	str	r3, [sp, #20]
 8009c42:	4619      	mov	r1, r3
 8009c44:	f04f 0c0a 	mov.w	ip, #10
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c4e:	3a30      	subs	r2, #48	@ 0x30
 8009c50:	2a09      	cmp	r2, #9
 8009c52:	d903      	bls.n	8009c5c <_vfiprintf_r+0x1cc>
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d0c6      	beq.n	8009be6 <_vfiprintf_r+0x156>
 8009c58:	9105      	str	r1, [sp, #20]
 8009c5a:	e7c4      	b.n	8009be6 <_vfiprintf_r+0x156>
 8009c5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c60:	4604      	mov	r4, r0
 8009c62:	2301      	movs	r3, #1
 8009c64:	e7f0      	b.n	8009c48 <_vfiprintf_r+0x1b8>
 8009c66:	ab03      	add	r3, sp, #12
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	462a      	mov	r2, r5
 8009c6c:	4b12      	ldr	r3, [pc, #72]	@ (8009cb8 <_vfiprintf_r+0x228>)
 8009c6e:	a904      	add	r1, sp, #16
 8009c70:	4630      	mov	r0, r6
 8009c72:	f7fc ff75 	bl	8006b60 <_printf_float>
 8009c76:	4607      	mov	r7, r0
 8009c78:	1c78      	adds	r0, r7, #1
 8009c7a:	d1d6      	bne.n	8009c2a <_vfiprintf_r+0x19a>
 8009c7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c7e:	07d9      	lsls	r1, r3, #31
 8009c80:	d405      	bmi.n	8009c8e <_vfiprintf_r+0x1fe>
 8009c82:	89ab      	ldrh	r3, [r5, #12]
 8009c84:	059a      	lsls	r2, r3, #22
 8009c86:	d402      	bmi.n	8009c8e <_vfiprintf_r+0x1fe>
 8009c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c8a:	f7fd fdef 	bl	800786c <__retarget_lock_release_recursive>
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	065b      	lsls	r3, r3, #25
 8009c92:	f53f af1f 	bmi.w	8009ad4 <_vfiprintf_r+0x44>
 8009c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c98:	e71e      	b.n	8009ad8 <_vfiprintf_r+0x48>
 8009c9a:	ab03      	add	r3, sp, #12
 8009c9c:	9300      	str	r3, [sp, #0]
 8009c9e:	462a      	mov	r2, r5
 8009ca0:	4b05      	ldr	r3, [pc, #20]	@ (8009cb8 <_vfiprintf_r+0x228>)
 8009ca2:	a904      	add	r1, sp, #16
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	f7fd f9f3 	bl	8007090 <_printf_i>
 8009caa:	e7e4      	b.n	8009c76 <_vfiprintf_r+0x1e6>
 8009cac:	0800a701 	.word	0x0800a701
 8009cb0:	0800a70b 	.word	0x0800a70b
 8009cb4:	08006b61 	.word	0x08006b61
 8009cb8:	08009a6b 	.word	0x08009a6b
 8009cbc:	0800a707 	.word	0x0800a707

08009cc0 <__sflush_r>:
 8009cc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cc8:	0716      	lsls	r6, r2, #28
 8009cca:	4605      	mov	r5, r0
 8009ccc:	460c      	mov	r4, r1
 8009cce:	d454      	bmi.n	8009d7a <__sflush_r+0xba>
 8009cd0:	684b      	ldr	r3, [r1, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	dc02      	bgt.n	8009cdc <__sflush_r+0x1c>
 8009cd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	dd48      	ble.n	8009d6e <__sflush_r+0xae>
 8009cdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009cde:	2e00      	cmp	r6, #0
 8009ce0:	d045      	beq.n	8009d6e <__sflush_r+0xae>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ce8:	682f      	ldr	r7, [r5, #0]
 8009cea:	6a21      	ldr	r1, [r4, #32]
 8009cec:	602b      	str	r3, [r5, #0]
 8009cee:	d030      	beq.n	8009d52 <__sflush_r+0x92>
 8009cf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	0759      	lsls	r1, r3, #29
 8009cf6:	d505      	bpl.n	8009d04 <__sflush_r+0x44>
 8009cf8:	6863      	ldr	r3, [r4, #4]
 8009cfa:	1ad2      	subs	r2, r2, r3
 8009cfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009cfe:	b10b      	cbz	r3, 8009d04 <__sflush_r+0x44>
 8009d00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d02:	1ad2      	subs	r2, r2, r3
 8009d04:	2300      	movs	r3, #0
 8009d06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d08:	6a21      	ldr	r1, [r4, #32]
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	47b0      	blx	r6
 8009d0e:	1c43      	adds	r3, r0, #1
 8009d10:	89a3      	ldrh	r3, [r4, #12]
 8009d12:	d106      	bne.n	8009d22 <__sflush_r+0x62>
 8009d14:	6829      	ldr	r1, [r5, #0]
 8009d16:	291d      	cmp	r1, #29
 8009d18:	d82b      	bhi.n	8009d72 <__sflush_r+0xb2>
 8009d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8009dc4 <__sflush_r+0x104>)
 8009d1c:	410a      	asrs	r2, r1
 8009d1e:	07d6      	lsls	r6, r2, #31
 8009d20:	d427      	bmi.n	8009d72 <__sflush_r+0xb2>
 8009d22:	2200      	movs	r2, #0
 8009d24:	6062      	str	r2, [r4, #4]
 8009d26:	04d9      	lsls	r1, r3, #19
 8009d28:	6922      	ldr	r2, [r4, #16]
 8009d2a:	6022      	str	r2, [r4, #0]
 8009d2c:	d504      	bpl.n	8009d38 <__sflush_r+0x78>
 8009d2e:	1c42      	adds	r2, r0, #1
 8009d30:	d101      	bne.n	8009d36 <__sflush_r+0x76>
 8009d32:	682b      	ldr	r3, [r5, #0]
 8009d34:	b903      	cbnz	r3, 8009d38 <__sflush_r+0x78>
 8009d36:	6560      	str	r0, [r4, #84]	@ 0x54
 8009d38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d3a:	602f      	str	r7, [r5, #0]
 8009d3c:	b1b9      	cbz	r1, 8009d6e <__sflush_r+0xae>
 8009d3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009d42:	4299      	cmp	r1, r3
 8009d44:	d002      	beq.n	8009d4c <__sflush_r+0x8c>
 8009d46:	4628      	mov	r0, r5
 8009d48:	f7fe fc16 	bl	8008578 <_free_r>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009d50:	e00d      	b.n	8009d6e <__sflush_r+0xae>
 8009d52:	2301      	movs	r3, #1
 8009d54:	4628      	mov	r0, r5
 8009d56:	47b0      	blx	r6
 8009d58:	4602      	mov	r2, r0
 8009d5a:	1c50      	adds	r0, r2, #1
 8009d5c:	d1c9      	bne.n	8009cf2 <__sflush_r+0x32>
 8009d5e:	682b      	ldr	r3, [r5, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d0c6      	beq.n	8009cf2 <__sflush_r+0x32>
 8009d64:	2b1d      	cmp	r3, #29
 8009d66:	d001      	beq.n	8009d6c <__sflush_r+0xac>
 8009d68:	2b16      	cmp	r3, #22
 8009d6a:	d11e      	bne.n	8009daa <__sflush_r+0xea>
 8009d6c:	602f      	str	r7, [r5, #0]
 8009d6e:	2000      	movs	r0, #0
 8009d70:	e022      	b.n	8009db8 <__sflush_r+0xf8>
 8009d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d76:	b21b      	sxth	r3, r3
 8009d78:	e01b      	b.n	8009db2 <__sflush_r+0xf2>
 8009d7a:	690f      	ldr	r7, [r1, #16]
 8009d7c:	2f00      	cmp	r7, #0
 8009d7e:	d0f6      	beq.n	8009d6e <__sflush_r+0xae>
 8009d80:	0793      	lsls	r3, r2, #30
 8009d82:	680e      	ldr	r6, [r1, #0]
 8009d84:	bf08      	it	eq
 8009d86:	694b      	ldreq	r3, [r1, #20]
 8009d88:	600f      	str	r7, [r1, #0]
 8009d8a:	bf18      	it	ne
 8009d8c:	2300      	movne	r3, #0
 8009d8e:	eba6 0807 	sub.w	r8, r6, r7
 8009d92:	608b      	str	r3, [r1, #8]
 8009d94:	f1b8 0f00 	cmp.w	r8, #0
 8009d98:	dde9      	ble.n	8009d6e <__sflush_r+0xae>
 8009d9a:	6a21      	ldr	r1, [r4, #32]
 8009d9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d9e:	4643      	mov	r3, r8
 8009da0:	463a      	mov	r2, r7
 8009da2:	4628      	mov	r0, r5
 8009da4:	47b0      	blx	r6
 8009da6:	2800      	cmp	r0, #0
 8009da8:	dc08      	bgt.n	8009dbc <__sflush_r+0xfc>
 8009daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009db2:	81a3      	strh	r3, [r4, #12]
 8009db4:	f04f 30ff 	mov.w	r0, #4294967295
 8009db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dbc:	4407      	add	r7, r0
 8009dbe:	eba8 0800 	sub.w	r8, r8, r0
 8009dc2:	e7e7      	b.n	8009d94 <__sflush_r+0xd4>
 8009dc4:	dfbffffe 	.word	0xdfbffffe

08009dc8 <_fflush_r>:
 8009dc8:	b538      	push	{r3, r4, r5, lr}
 8009dca:	690b      	ldr	r3, [r1, #16]
 8009dcc:	4605      	mov	r5, r0
 8009dce:	460c      	mov	r4, r1
 8009dd0:	b913      	cbnz	r3, 8009dd8 <_fflush_r+0x10>
 8009dd2:	2500      	movs	r5, #0
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	bd38      	pop	{r3, r4, r5, pc}
 8009dd8:	b118      	cbz	r0, 8009de2 <_fflush_r+0x1a>
 8009dda:	6a03      	ldr	r3, [r0, #32]
 8009ddc:	b90b      	cbnz	r3, 8009de2 <_fflush_r+0x1a>
 8009dde:	f7fd fb03 	bl	80073e8 <__sinit>
 8009de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0f3      	beq.n	8009dd2 <_fflush_r+0xa>
 8009dea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009dec:	07d0      	lsls	r0, r2, #31
 8009dee:	d404      	bmi.n	8009dfa <_fflush_r+0x32>
 8009df0:	0599      	lsls	r1, r3, #22
 8009df2:	d402      	bmi.n	8009dfa <_fflush_r+0x32>
 8009df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009df6:	f7fd fd38 	bl	800786a <__retarget_lock_acquire_recursive>
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	f7ff ff5f 	bl	8009cc0 <__sflush_r>
 8009e02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e04:	07da      	lsls	r2, r3, #31
 8009e06:	4605      	mov	r5, r0
 8009e08:	d4e4      	bmi.n	8009dd4 <_fflush_r+0xc>
 8009e0a:	89a3      	ldrh	r3, [r4, #12]
 8009e0c:	059b      	lsls	r3, r3, #22
 8009e0e:	d4e1      	bmi.n	8009dd4 <_fflush_r+0xc>
 8009e10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e12:	f7fd fd2b 	bl	800786c <__retarget_lock_release_recursive>
 8009e16:	e7dd      	b.n	8009dd4 <_fflush_r+0xc>

08009e18 <fiprintf>:
 8009e18:	b40e      	push	{r1, r2, r3}
 8009e1a:	b503      	push	{r0, r1, lr}
 8009e1c:	4601      	mov	r1, r0
 8009e1e:	ab03      	add	r3, sp, #12
 8009e20:	4805      	ldr	r0, [pc, #20]	@ (8009e38 <fiprintf+0x20>)
 8009e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e26:	6800      	ldr	r0, [r0, #0]
 8009e28:	9301      	str	r3, [sp, #4]
 8009e2a:	f7ff fe31 	bl	8009a90 <_vfiprintf_r>
 8009e2e:	b002      	add	sp, #8
 8009e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e34:	b003      	add	sp, #12
 8009e36:	4770      	bx	lr
 8009e38:	20000190 	.word	0x20000190

08009e3c <__swhatbuf_r>:
 8009e3c:	b570      	push	{r4, r5, r6, lr}
 8009e3e:	460c      	mov	r4, r1
 8009e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e44:	2900      	cmp	r1, #0
 8009e46:	b096      	sub	sp, #88	@ 0x58
 8009e48:	4615      	mov	r5, r2
 8009e4a:	461e      	mov	r6, r3
 8009e4c:	da0d      	bge.n	8009e6a <__swhatbuf_r+0x2e>
 8009e4e:	89a3      	ldrh	r3, [r4, #12]
 8009e50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009e54:	f04f 0100 	mov.w	r1, #0
 8009e58:	bf14      	ite	ne
 8009e5a:	2340      	movne	r3, #64	@ 0x40
 8009e5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009e60:	2000      	movs	r0, #0
 8009e62:	6031      	str	r1, [r6, #0]
 8009e64:	602b      	str	r3, [r5, #0]
 8009e66:	b016      	add	sp, #88	@ 0x58
 8009e68:	bd70      	pop	{r4, r5, r6, pc}
 8009e6a:	466a      	mov	r2, sp
 8009e6c:	f000 f862 	bl	8009f34 <_fstat_r>
 8009e70:	2800      	cmp	r0, #0
 8009e72:	dbec      	blt.n	8009e4e <__swhatbuf_r+0x12>
 8009e74:	9901      	ldr	r1, [sp, #4]
 8009e76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009e7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009e7e:	4259      	negs	r1, r3
 8009e80:	4159      	adcs	r1, r3
 8009e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e86:	e7eb      	b.n	8009e60 <__swhatbuf_r+0x24>

08009e88 <__smakebuf_r>:
 8009e88:	898b      	ldrh	r3, [r1, #12]
 8009e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e8c:	079d      	lsls	r5, r3, #30
 8009e8e:	4606      	mov	r6, r0
 8009e90:	460c      	mov	r4, r1
 8009e92:	d507      	bpl.n	8009ea4 <__smakebuf_r+0x1c>
 8009e94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	6123      	str	r3, [r4, #16]
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	6163      	str	r3, [r4, #20]
 8009ea0:	b003      	add	sp, #12
 8009ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ea4:	ab01      	add	r3, sp, #4
 8009ea6:	466a      	mov	r2, sp
 8009ea8:	f7ff ffc8 	bl	8009e3c <__swhatbuf_r>
 8009eac:	9f00      	ldr	r7, [sp, #0]
 8009eae:	4605      	mov	r5, r0
 8009eb0:	4639      	mov	r1, r7
 8009eb2:	4630      	mov	r0, r6
 8009eb4:	f7fe ff0e 	bl	8008cd4 <_malloc_r>
 8009eb8:	b948      	cbnz	r0, 8009ece <__smakebuf_r+0x46>
 8009eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ebe:	059a      	lsls	r2, r3, #22
 8009ec0:	d4ee      	bmi.n	8009ea0 <__smakebuf_r+0x18>
 8009ec2:	f023 0303 	bic.w	r3, r3, #3
 8009ec6:	f043 0302 	orr.w	r3, r3, #2
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	e7e2      	b.n	8009e94 <__smakebuf_r+0xc>
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	6020      	str	r0, [r4, #0]
 8009ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ed6:	81a3      	strh	r3, [r4, #12]
 8009ed8:	9b01      	ldr	r3, [sp, #4]
 8009eda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009ede:	b15b      	cbz	r3, 8009ef8 <__smakebuf_r+0x70>
 8009ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	f000 f837 	bl	8009f58 <_isatty_r>
 8009eea:	b128      	cbz	r0, 8009ef8 <__smakebuf_r+0x70>
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	f023 0303 	bic.w	r3, r3, #3
 8009ef2:	f043 0301 	orr.w	r3, r3, #1
 8009ef6:	81a3      	strh	r3, [r4, #12]
 8009ef8:	89a3      	ldrh	r3, [r4, #12]
 8009efa:	431d      	orrs	r5, r3
 8009efc:	81a5      	strh	r5, [r4, #12]
 8009efe:	e7cf      	b.n	8009ea0 <__smakebuf_r+0x18>

08009f00 <memmove>:
 8009f00:	4288      	cmp	r0, r1
 8009f02:	b510      	push	{r4, lr}
 8009f04:	eb01 0402 	add.w	r4, r1, r2
 8009f08:	d902      	bls.n	8009f10 <memmove+0x10>
 8009f0a:	4284      	cmp	r4, r0
 8009f0c:	4623      	mov	r3, r4
 8009f0e:	d807      	bhi.n	8009f20 <memmove+0x20>
 8009f10:	1e43      	subs	r3, r0, #1
 8009f12:	42a1      	cmp	r1, r4
 8009f14:	d008      	beq.n	8009f28 <memmove+0x28>
 8009f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f1e:	e7f8      	b.n	8009f12 <memmove+0x12>
 8009f20:	4402      	add	r2, r0
 8009f22:	4601      	mov	r1, r0
 8009f24:	428a      	cmp	r2, r1
 8009f26:	d100      	bne.n	8009f2a <memmove+0x2a>
 8009f28:	bd10      	pop	{r4, pc}
 8009f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f32:	e7f7      	b.n	8009f24 <memmove+0x24>

08009f34 <_fstat_r>:
 8009f34:	b538      	push	{r3, r4, r5, lr}
 8009f36:	4d07      	ldr	r5, [pc, #28]	@ (8009f54 <_fstat_r+0x20>)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	4608      	mov	r0, r1
 8009f3e:	4611      	mov	r1, r2
 8009f40:	602b      	str	r3, [r5, #0]
 8009f42:	f7f8 f8d1 	bl	80020e8 <_fstat>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	d102      	bne.n	8009f50 <_fstat_r+0x1c>
 8009f4a:	682b      	ldr	r3, [r5, #0]
 8009f4c:	b103      	cbz	r3, 8009f50 <_fstat_r+0x1c>
 8009f4e:	6023      	str	r3, [r4, #0]
 8009f50:	bd38      	pop	{r3, r4, r5, pc}
 8009f52:	bf00      	nop
 8009f54:	20000740 	.word	0x20000740

08009f58 <_isatty_r>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	4d06      	ldr	r5, [pc, #24]	@ (8009f74 <_isatty_r+0x1c>)
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	4604      	mov	r4, r0
 8009f60:	4608      	mov	r0, r1
 8009f62:	602b      	str	r3, [r5, #0]
 8009f64:	f7f8 f8d0 	bl	8002108 <_isatty>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d102      	bne.n	8009f72 <_isatty_r+0x1a>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	b103      	cbz	r3, 8009f72 <_isatty_r+0x1a>
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	bd38      	pop	{r3, r4, r5, pc}
 8009f74:	20000740 	.word	0x20000740

08009f78 <_sbrk_r>:
 8009f78:	b538      	push	{r3, r4, r5, lr}
 8009f7a:	4d06      	ldr	r5, [pc, #24]	@ (8009f94 <_sbrk_r+0x1c>)
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	4604      	mov	r4, r0
 8009f80:	4608      	mov	r0, r1
 8009f82:	602b      	str	r3, [r5, #0]
 8009f84:	f7f8 f8d8 	bl	8002138 <_sbrk>
 8009f88:	1c43      	adds	r3, r0, #1
 8009f8a:	d102      	bne.n	8009f92 <_sbrk_r+0x1a>
 8009f8c:	682b      	ldr	r3, [r5, #0]
 8009f8e:	b103      	cbz	r3, 8009f92 <_sbrk_r+0x1a>
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	bd38      	pop	{r3, r4, r5, pc}
 8009f94:	20000740 	.word	0x20000740

08009f98 <abort>:
 8009f98:	b508      	push	{r3, lr}
 8009f9a:	2006      	movs	r0, #6
 8009f9c:	f000 f86e 	bl	800a07c <raise>
 8009fa0:	2001      	movs	r0, #1
 8009fa2:	f7f8 f851 	bl	8002048 <_exit>

08009fa6 <_calloc_r>:
 8009fa6:	b570      	push	{r4, r5, r6, lr}
 8009fa8:	fba1 5402 	umull	r5, r4, r1, r2
 8009fac:	b93c      	cbnz	r4, 8009fbe <_calloc_r+0x18>
 8009fae:	4629      	mov	r1, r5
 8009fb0:	f7fe fe90 	bl	8008cd4 <_malloc_r>
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	b928      	cbnz	r0, 8009fc4 <_calloc_r+0x1e>
 8009fb8:	2600      	movs	r6, #0
 8009fba:	4630      	mov	r0, r6
 8009fbc:	bd70      	pop	{r4, r5, r6, pc}
 8009fbe:	220c      	movs	r2, #12
 8009fc0:	6002      	str	r2, [r0, #0]
 8009fc2:	e7f9      	b.n	8009fb8 <_calloc_r+0x12>
 8009fc4:	462a      	mov	r2, r5
 8009fc6:	4621      	mov	r1, r4
 8009fc8:	f7fd fbc0 	bl	800774c <memset>
 8009fcc:	e7f5      	b.n	8009fba <_calloc_r+0x14>

08009fce <_realloc_r>:
 8009fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd2:	4680      	mov	r8, r0
 8009fd4:	4615      	mov	r5, r2
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	b921      	cbnz	r1, 8009fe4 <_realloc_r+0x16>
 8009fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fde:	4611      	mov	r1, r2
 8009fe0:	f7fe be78 	b.w	8008cd4 <_malloc_r>
 8009fe4:	b92a      	cbnz	r2, 8009ff2 <_realloc_r+0x24>
 8009fe6:	f7fe fac7 	bl	8008578 <_free_r>
 8009fea:	2400      	movs	r4, #0
 8009fec:	4620      	mov	r0, r4
 8009fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff2:	f000 f85f 	bl	800a0b4 <_malloc_usable_size_r>
 8009ff6:	4285      	cmp	r5, r0
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	d802      	bhi.n	800a002 <_realloc_r+0x34>
 8009ffc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a000:	d8f4      	bhi.n	8009fec <_realloc_r+0x1e>
 800a002:	4629      	mov	r1, r5
 800a004:	4640      	mov	r0, r8
 800a006:	f7fe fe65 	bl	8008cd4 <_malloc_r>
 800a00a:	4607      	mov	r7, r0
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d0ec      	beq.n	8009fea <_realloc_r+0x1c>
 800a010:	42b5      	cmp	r5, r6
 800a012:	462a      	mov	r2, r5
 800a014:	4621      	mov	r1, r4
 800a016:	bf28      	it	cs
 800a018:	4632      	movcs	r2, r6
 800a01a:	f7fd fc28 	bl	800786e <memcpy>
 800a01e:	4621      	mov	r1, r4
 800a020:	4640      	mov	r0, r8
 800a022:	f7fe faa9 	bl	8008578 <_free_r>
 800a026:	463c      	mov	r4, r7
 800a028:	e7e0      	b.n	8009fec <_realloc_r+0x1e>

0800a02a <_raise_r>:
 800a02a:	291f      	cmp	r1, #31
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	4605      	mov	r5, r0
 800a030:	460c      	mov	r4, r1
 800a032:	d904      	bls.n	800a03e <_raise_r+0x14>
 800a034:	2316      	movs	r3, #22
 800a036:	6003      	str	r3, [r0, #0]
 800a038:	f04f 30ff 	mov.w	r0, #4294967295
 800a03c:	bd38      	pop	{r3, r4, r5, pc}
 800a03e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a040:	b112      	cbz	r2, 800a048 <_raise_r+0x1e>
 800a042:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a046:	b94b      	cbnz	r3, 800a05c <_raise_r+0x32>
 800a048:	4628      	mov	r0, r5
 800a04a:	f000 f831 	bl	800a0b0 <_getpid_r>
 800a04e:	4622      	mov	r2, r4
 800a050:	4601      	mov	r1, r0
 800a052:	4628      	mov	r0, r5
 800a054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a058:	f000 b818 	b.w	800a08c <_kill_r>
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d00a      	beq.n	800a076 <_raise_r+0x4c>
 800a060:	1c59      	adds	r1, r3, #1
 800a062:	d103      	bne.n	800a06c <_raise_r+0x42>
 800a064:	2316      	movs	r3, #22
 800a066:	6003      	str	r3, [r0, #0]
 800a068:	2001      	movs	r0, #1
 800a06a:	e7e7      	b.n	800a03c <_raise_r+0x12>
 800a06c:	2100      	movs	r1, #0
 800a06e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a072:	4620      	mov	r0, r4
 800a074:	4798      	blx	r3
 800a076:	2000      	movs	r0, #0
 800a078:	e7e0      	b.n	800a03c <_raise_r+0x12>
	...

0800a07c <raise>:
 800a07c:	4b02      	ldr	r3, [pc, #8]	@ (800a088 <raise+0xc>)
 800a07e:	4601      	mov	r1, r0
 800a080:	6818      	ldr	r0, [r3, #0]
 800a082:	f7ff bfd2 	b.w	800a02a <_raise_r>
 800a086:	bf00      	nop
 800a088:	20000190 	.word	0x20000190

0800a08c <_kill_r>:
 800a08c:	b538      	push	{r3, r4, r5, lr}
 800a08e:	4d07      	ldr	r5, [pc, #28]	@ (800a0ac <_kill_r+0x20>)
 800a090:	2300      	movs	r3, #0
 800a092:	4604      	mov	r4, r0
 800a094:	4608      	mov	r0, r1
 800a096:	4611      	mov	r1, r2
 800a098:	602b      	str	r3, [r5, #0]
 800a09a:	f7f7 ffc5 	bl	8002028 <_kill>
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	d102      	bne.n	800a0a8 <_kill_r+0x1c>
 800a0a2:	682b      	ldr	r3, [r5, #0]
 800a0a4:	b103      	cbz	r3, 800a0a8 <_kill_r+0x1c>
 800a0a6:	6023      	str	r3, [r4, #0]
 800a0a8:	bd38      	pop	{r3, r4, r5, pc}
 800a0aa:	bf00      	nop
 800a0ac:	20000740 	.word	0x20000740

0800a0b0 <_getpid_r>:
 800a0b0:	f7f7 bfb2 	b.w	8002018 <_getpid>

0800a0b4 <_malloc_usable_size_r>:
 800a0b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0b8:	1f18      	subs	r0, r3, #4
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	bfbc      	itt	lt
 800a0be:	580b      	ldrlt	r3, [r1, r0]
 800a0c0:	18c0      	addlt	r0, r0, r3
 800a0c2:	4770      	bx	lr

0800a0c4 <_init>:
 800a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c6:	bf00      	nop
 800a0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ca:	bc08      	pop	{r3}
 800a0cc:	469e      	mov	lr, r3
 800a0ce:	4770      	bx	lr

0800a0d0 <_fini>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	bf00      	nop
 800a0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d6:	bc08      	pop	{r3}
 800a0d8:	469e      	mov	lr, r3
 800a0da:	4770      	bx	lr
